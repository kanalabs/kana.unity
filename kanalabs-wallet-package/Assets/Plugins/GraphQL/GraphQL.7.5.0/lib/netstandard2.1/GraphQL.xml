<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GraphQL</name>
    </assembly>
    <members>
        <member name="T:System.Reflection.NullabilityInfo">
            <summary>
            A class that represents nullability info
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.Type">
            <summary>
            The <see cref="T:System.Type" /> of the member or generic parameter
            to which this NullabilityInfo belongs
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.ReadState">
            <summary>
            The nullability read state of the member
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.WriteState">
            <summary>
            The nullability write state of the member
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.ElementType">
            <summary>
            If the member type is an array, gives the <see cref="T:System.Reflection.NullabilityInfo" /> of the elements of the array, null otherwise
            </summary>
        </member>
        <member name="P:System.Reflection.NullabilityInfo.GenericTypeArguments">
            <summary>
            If the member type is a generic type, gives the array of <see cref="T:System.Reflection.NullabilityInfo" /> for each type parameter
            </summary>
        </member>
        <member name="T:System.Reflection.NullabilityState">
            <summary>
            An enum that represents nullability state
            </summary>
        </member>
        <member name="F:System.Reflection.NullabilityState.Unknown">
            <summary>
            Nullability context not enabled (oblivious)
            </summary>
        </member>
        <member name="F:System.Reflection.NullabilityState.NotNull">
            <summary>
            Non nullable value or reference type
            </summary>
        </member>
        <member name="F:System.Reflection.NullabilityState.Nullable">
            <summary>
            Nullable value or reference type
            </summary>
        </member>
        <member name="T:System.Reflection.NullabilityInfoContext">
            <summary>
            Provides APIs for populating nullability information/context from reflection members:
            <see cref="T:System.Reflection.ParameterInfo"/>, <see cref="T:System.Reflection.FieldInfo"/>, <see cref="T:System.Reflection.PropertyInfo"/> and <see cref="T:System.Reflection.EventInfo"/>.
            </summary>
        </member>
        <member name="M:System.Reflection.NullabilityInfoContext.Create(System.Reflection.ParameterInfo)">
            <summary>
            Populates <see cref="T:System.Reflection.NullabilityInfo" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.
            If the nullablePublicOnly feature is set for an assembly, like it does in .NET SDK, the private and/or internal member's
            nullability attributes are omitted, in this case the API will return NullabilityState.Unknown state.
            </summary>
            <param name="parameterInfo">The parameter which nullability info gets populated</param>
            <exception cref="T:System.ArgumentNullException">If the parameterInfo parameter is null</exception>
            <returns><see cref="T:System.Reflection.NullabilityInfo" /></returns>
        </member>
        <member name="M:System.Reflection.NullabilityInfoContext.Create(System.Reflection.PropertyInfo)">
            <summary>
            Populates <see cref="T:System.Reflection.NullabilityInfo" /> for the given <see cref="T:System.Reflection.PropertyInfo" />.
            If the nullablePublicOnly feature is set for an assembly, like it does in .NET SDK, the private and/or internal member's
            nullability attributes are omitted, in this case the API will return NullabilityState.Unknown state.
            </summary>
            <param name="propertyInfo">The parameter which nullability info gets populated</param>
            <exception cref="T:System.ArgumentNullException">If the propertyInfo parameter is null</exception>
            <returns><see cref="T:System.Reflection.NullabilityInfo" /></returns>
        </member>
        <member name="M:System.Reflection.NullabilityInfoContext.Create(System.Reflection.EventInfo)">
            <summary>
            Populates <see cref="T:System.Reflection.NullabilityInfo" /> for the given <see cref="T:System.Reflection.EventInfo" />.
            If the nullablePublicOnly feature is set for an assembly, like it does in .NET SDK, the private and/or internal member's
            nullability attributes are omitted, in this case the API will return NullabilityState.Unknown state.
            </summary>
            <param name="eventInfo">The parameter which nullability info gets populated</param>
            <exception cref="T:System.ArgumentNullException">If the eventInfo parameter is null</exception>
            <returns><see cref="T:System.Reflection.NullabilityInfo" /></returns>
        </member>
        <member name="M:System.Reflection.NullabilityInfoContext.Create(System.Reflection.FieldInfo)">
            <summary>
            Populates <see cref="T:System.Reflection.NullabilityInfo" /> for the given <see cref="T:System.Reflection.FieldInfo" />
            If the nullablePublicOnly feature is set for an assembly, like it does in .NET SDK, the private and/or internal member's
            nullability attributes are omitted, in this case the API will return NullabilityState.Unknown state.
            </summary>
            <param name="fieldInfo">The parameter which nullability info gets populated</param>
            <exception cref="T:System.ArgumentNullException">If the fieldInfo parameter is null</exception>
            <returns><see cref="T:System.Reflection.NullabilityInfo" /></returns>
        </member>
        <member name="T:System.Reflection.NullabilityInfoExtensions">
            <summary>
            Static and thread safe wrapper around <see cref="T:System.Reflection.NullabilityInfoContext"/>.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
             <summary>
             Indicates that certain members on a specified <see cref="T:System.Type"/> are accessed dynamically,
             for example through <see cref="N:System.Reflection"/>.
             </summary>
             <remarks>
             This allows tools to understand which members are being accessed during the execution
             of a program.
            
             This attribute is valid on members whose type is <see cref="T:System.Type"/> or <see cref="T:System.String"/>.
            
             When this attribute is applied to a location of type <see cref="T:System.String"/>, the assumption is
             that the string represents a fully qualified type name.
            
             When this attribute is applied to a class, interface, or struct, the members specified
             can be accessed dynamically on <see cref="T:System.Type"/> instances returned from calling
             <see cref="M:System.Object.GetType"/> on instances of that class, interface, or struct.
            
             If the attribute is applied to a method it's treated as a special case and it implies
             the attribute should be applied to the "this" parameter of the method. As such the attribute
             should only be used on instance methods of types assignable to System.Type (or string, but no methods
             will use it there).
             </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute"/> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
             <summary>
             Specifies the types of members that are dynamically accessed.
            
             This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a
             bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
            Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute">
            <summary>
            States a dependency that one member has on another.
            </summary>
            <remarks>
            This can be used to inform tooling of a dependency that is otherwise not evident purely from
            metadata and IL, for example a member relied on via reflection.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on the same type as the consumer.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing <paramref name="memberSignature"/>.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a type in an assembly.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="typeName">The full name of the type containing the specified member.</param>
            <param name="assemblyName">The assembly name of the type containing the specified member.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing the specified members.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a type in an assembly.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="typeName">The full name of the type containing the specified members.</param>
            <param name="assemblyName">The assembly name of the type containing the specified members.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature">
            <summary>
            Gets the signature of the member depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type">
            <summary>
            Gets the <see cref="T:System.Type"/> containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName">
            <summary>
            Gets the full name of the type containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName">
            <summary>
            Gets the assembly name of the specified type.
            </summary>
            <remarks>
            <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName"/> is only valid when <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> is specified.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Condition">
            <summary>
            Gets or sets the condition in which the dependency is applicable, e.g. "DEBUG".
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute">
            <summary>
            Indicates that the specified member requires assembly files to be on disk.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:global::System.RequiresAssemblyFilesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:global::System.RequiresAssemblyFilesAttribute"/> class.
            </summary>
            <param name="message">
            A message that contains information about the need for assembly files to be on disk.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.Message">
            <summary>
            Gets an optional message that contains information about the need for
            assembly files to be on disk.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the member,
            why it requires assembly files to be on disk, and what options a consumer has
            to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when compiling ahead of time.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when removing unreferenced
            code from an application.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute">
            <summary>
            Suppresses reporting of a specific rule violation, allowing multiple suppressions on a
            single code artifact.
            </summary>
            <remarks>
            <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> is different than
            <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"/> in that it doesn't have a
            <see cref="T:System.Diagnostics.ConditionalAttribute"/>. So it is always preserved in the compiled assembly.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/>
            class, specifying the category of the tool and the identifier for an analysis rule.
            </summary>
            <param name="category">The category for the attribute.</param>
            <param name="checkId">The identifier of the analysis rule the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category">
            <summary>
            Gets the category identifying the classification of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> property describes the tool or tool analysis category
            for which a message suppression attribute applies.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId">
            <summary>
            Gets the identifier of the analysis tool rule to be suppressed.
            </summary>
            <remarks>
            Concatenated together, the <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> and <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId"/>
            properties form a unique check identifier.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope">
            <summary>
            Gets or sets the scope of the code that is relevant for the attribute.
            </summary>
            <remarks>
            The Scope property is an optional argument that specifies the metadata scope for which
            the attribute is relevant.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target">
            <summary>
            Gets or sets a fully qualified path that represents the target of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target"/> property is an optional argument identifying the analysis target
            of the attribute. An example value is "System.IO.Stream.ctor():System.Void".
            Because it is fully qualified, it can be long, particularly for targets such as parameters.
            The analysis tool user interface should be capable of automatically formatting the parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId">
            <summary>
            Gets or sets an optional argument expanding on exclusion criteria.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId"/> property is an optional argument that specifies additional
            exclusion where the literal metadata target is not sufficiently precise. For example,
            the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> cannot be applied within a method,
            and it may be desirable to suppress a violation against a statement in the method that will
            give a rule violation, but not against all statements in the method.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification">
            <summary>
            Gets or sets the justification for suppressing the code analysis message.
            </summary>
        </member>
        <member name="T:System.Diagnostics.StackTraceHiddenAttribute">
            <summary>
            Types and Methods attributed with StackTraceHidden will be omitted from the stack trace text shown in StackTrace.ToString()
            and Exception.StackTrace
            </summary>
        </member>
        <member name="M:System.Diagnostics.StackTraceHiddenAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.StackTraceHiddenAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute">
             <summary>
             Disables the built-in runtime managed/unmanaged marshalling subsystem for
             P/Invokes, Delegate types, and unmanaged function pointer invocations.
             </summary>
             <remarks>
             The built-in marshalling subsystem has some behaviors that cannot be changed due to
             backward-compatibility requirements. This attribute allows disabling the built-in
             subsystem and instead uses the following rules for P/Invokes, Delegates,
             and unmanaged function pointer invocations:
            
             - All value types that do not contain reference type fields recursively (<c>unmanaged</c> in C#) are blittable
             - Value types that recursively have any fields that have <c>[StructLayout(LayoutKind.Auto)]</c> are disallowed from interop.
             - All reference types are disallowed from usage in interop scenarios.
             - SetLastError support in P/Invokes is disabled.
             - varargs support is disabled.
             - LCIDConversionAttribute support is disabled.
             </remarks>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.ObsoletedOSPlatformAttribute">
            <summary>
            Marks APIs that were obsoleted in a given operating system version.
            </summary>
            <remarks>
            Primarily used by OS bindings to indicate APIs that should not be used anymore.
            </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformAttribute">
             <summary>
             Records the operating system (and minimum version) that supports an API. Multiple attributes can be
             applied to indicate support on multiple operating systems.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformAttribute" />
             or use guards to prevent calls to APIs on unsupported operating systems.
            
             A given platform should only be specified once.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute">
             <summary>
             Annotates a custom guard field, property or method with a supported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple supported platforms.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that field, property or method in a conditional or assert statements in order to safely call platform specific APIs.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.TargetPlatformAttribute">
            <summary>
            Records the platform that the project targeted.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformAttribute">
            <summary>
            Marks APIs that were removed in a given operating system version.
            </summary>
            <remarks>
            Primarily used by OS bindings to indicate APIs that are only available in
            earlier versions.
            </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute">
             <summary>
             Annotates the custom guard field, property or method with an unsupported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple unsupported platforms.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that  field, property or method in a conditional or assert statements as a guard to safely call APIs unsupported on those platforms.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="T:System.Runtime.InteropServices.SuppressGCTransitionAttribute">
             <summary>
             An attribute used to indicate a GC transition should be skipped when making an unmanaged function call.
             </summary>
             <example>
             Example of a valid use case. The Win32 `GetTickCount()` function is a small performance related function
             that reads some global memory and returns the value. In this case, the GC transition overhead is significantly
             more than the memory read.
             <code>
             using System;
             using System.Runtime.InteropServices;
             class Program
             {
                 [DllImport("Kernel32")]
                 [SuppressGCTransition]
                 static extern int GetTickCount();
                 static void Main()
                 {
                     Console.WriteLine($"{GetTickCount()}");
                 }
             }
             </code>
             </example>
             <remarks>
             This attribute is ignored if applied to a method without the <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/>.
            
             Forgoing this transition can yield benefits when the cost of the transition is more than the execution time
             of the unmanaged function. However, avoiding this transition removes some of the guarantees the runtime
             provides through a normal P/Invoke. When exiting the managed runtime to enter an unmanaged function the
             GC must transition from Cooperative mode into Preemptive mode. Full details on these modes can be found at
             https://github.com/dotnet/runtime/blob/main/docs/coding-guidelines/clr-code-guide.md#2.1.8.
             Suppressing the GC transition is an advanced scenario and should not be done without fully understanding
             potential consequences.
            
             One of these consequences is an impact to Mixed-mode debugging (https://docs.microsoft.com/visualstudio/debugger/how-to-debug-in-mixed-mode).
             During Mixed-mode debugging, it is not possible to step into or set breakpoints in a P/Invoke that
             has been marked with this attribute. A workaround is to switch to native debugging and set a breakpoint in the native function.
             In general, usage of this attribute is not recommended if debugging the P/Invoke is important, for example
             stepping through the native code or diagnosing an exception thrown from the native code.
            
             The runtime may load the native library for method marked with this attribute in advance before the method is called for the first time.
             Usage of this attribute is not recommended for platform neutral libraries with conditional platform specific code.
            
             The P/Invoke method that this attribute is applied to must have all of the following properties:
               * Native function always executes for a trivial amount of time (less than 1 microsecond).
               * Native function does not perform a blocking syscall (e.g. any type of I/O).
               * Native function does not call back into the runtime (e.g. Reverse P/Invoke).
               * Native function does not throw exceptions.
               * Native function does not manipulate locks or other concurrency primitives.
            
             Consequences of invalid uses of this attribute:
               * GC starvation.
               * Immediate runtime termination.
               * Data corruption.
             </remarks>
        </member>
        <member name="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute">
            <summary>
            Any method marked with <see cref="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute" /> can be directly called from
            native code. The function token can be loaded to a local variable using the <see href="https://docs.microsoft.com/dotnet/csharp/language-reference/operators/pointer-related-operators#address-of-operator-">address-of</see> operator
            in C# and passed as a callback to a native method.
            </summary>
            <remarks>
            Methods marked with this attribute have the following restrictions:
              * Method must be marked "static".
              * Must not be called from managed code.
              * Must only have <see href="https://docs.microsoft.com/dotnet/framework/interop/blittable-and-non-blittable-types">blittable</see> arguments.
            </remarks>
        </member>
        <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.CallConvs">
            <summary>
            Optional. If omitted, the runtime will use the default platform calling convention.
            </summary>
            <remarks>
            Supplied types must be from the official "System.Runtime.CompilerServices" namespace and
            be of the form "CallConvXXX".
            </remarks>
        </member>
        <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.EntryPoint">
            <summary>
            Optional. If omitted, no named export is emitted during compilation.
            </summary>
        </member>
        <member name="T:GraphQL.AllowAnonymousAttribute">
            <summary>
            Attribute to typically indicate that anonymous access should be allowed to a field of a graph type
            requiring authorization, providing that no other fields were selected.
            </summary>
        </member>
        <member name="M:GraphQL.AllowAnonymousAttribute.Modify(GraphQL.Utilities.FieldConfig)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.AllowAnonymousAttribute.Modify(GraphQL.Types.FieldType,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:GraphQL.AuthorizeAttribute">
            <summary>
            Attribute to apply an authorization policy and/or roles to a graph, field or query argument.
            Marks the graph, field or query argument as requiring authentication even if no policies or
            roles are specified. This attribute mimics AuthorizeAttribute from ASP.NET Core so it is
            something people are likely used to, if they do any web programming in C#.
            </summary>
        </member>
        <member name="M:GraphQL.AuthorizeAttribute.#ctor">
            <summary>
            Creates an empty instance of <see cref="T:GraphQL.AuthorizeAttribute"/> with no policy/roles specified.
            </summary>
        </member>
        <member name="M:GraphQL.AuthorizeAttribute.#ctor(System.String)">
            <summary>
            Creates an instance with the specified policy name.
            </summary>
        </member>
        <member name="P:GraphQL.AuthorizeAttribute.Policy">
            <summary>
            The name of policy to apply.
            </summary>
        </member>
        <member name="P:GraphQL.AuthorizeAttribute.Roles">
            <summary>
            A comma-separated list of the roles to apply.
            Role names will be trimmed before adding.
            </summary>
        </member>
        <member name="M:GraphQL.AuthorizeAttribute.Modify(GraphQL.Utilities.TypeConfig)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.AuthorizeAttribute.Modify(GraphQL.Utilities.FieldConfig)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.AuthorizeAttribute.Modify(GraphQL.Types.IGraphType)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.AuthorizeAttribute.Modify(GraphQL.Types.FieldType,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.AuthorizeAttribute.Modify(GraphQL.Types.QueryArgument)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.AuthorizeAttribute.Modify(GraphQL.Types.EnumValueDefinition)">
            <inheritdoc />
        </member>
        <member name="T:GraphQL.DoNotMapClrTypeAttribute">
            <summary>
            Indicates that <see cref="M:GraphQL.SchemaExtensions.RegisterTypeMappings(GraphQL.Types.ISchema)"/> and
            <see cref="M:GraphQL.GraphQLBuilderExtensions.AddClrTypeMappings(GraphQL.DI.IGraphQLBuilder)"/>
            should skip this class when scanning an assembly for CLR type mappings.
            This attribute can be placed either on the graph type or the CLR type that comprises
            the mapping.
            </summary>
        </member>
        <member name="T:GraphQL.DoNotRegisterAttribute">
            <summary>
            Indicates that <see cref="M:GraphQL.GraphQLBuilderExtensions.AddGraphTypes(GraphQL.DI.IGraphQLBuilder,System.Reflection.Assembly)"/>
            should skip this class when scanning an assembly for classes that implement <see cref="T:GraphQL.Types.IGraphType"/>
            </summary>
        </member>
        <member name="T:GraphQL.FromServicesAttribute">
            <summary>
            Specifies that the method argument should be pulled from <see cref="P:GraphQL.IResolveFieldContext.RequestServices"/>.
            </summary>
        </member>
        <member name="M:GraphQL.FromServicesAttribute.Modify(GraphQL.Types.ArgumentInformation)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.FromSourceAttribute">
            <summary>
            Specifies that the method argument should be pulled from <see cref="P:GraphQL.IResolveFieldContext.Source"/>,
            </summary>
        </member>
        <member name="M:GraphQL.FromSourceAttribute.Modify(GraphQL.Types.ArgumentInformation)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.FromUserContextAttribute">
            <summary>
            Specifies that the method argument should be pulled from <see cref="T:GraphQL.IResolveFieldContext"/>.<see cref="P:GraphQL.Execution.IProvideUserContext.UserContext">UserContext</see>.
            </summary>
        </member>
        <member name="M:GraphQL.FromUserContextAttribute.Modify(GraphQL.Types.ArgumentInformation)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.GraphQLAttribute">
            <summary>
            Allows additional configuration to be applied to a type, field or query argument definition.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLAttribute.Modify(GraphQL.Utilities.TypeConfig)">
            <summary>
            Updates the properties of the specified <see cref="T:GraphQL.Utilities.TypeConfig"/> as necessary.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLAttribute.Modify(GraphQL.Utilities.FieldConfig)">
            <summary>
            Updates the properties of the specified <see cref="T:GraphQL.Utilities.FieldConfig"/> as necessary.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLAttribute.Modify(GraphQL.Types.IGraphType)">
            <summary>
            Updates the properties of the specified <see cref="T:GraphQL.Types.IGraphType"/> as necessary.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLAttribute.Modify(GraphQL.Types.EnumValueDefinition)">
            <summary>
            Updates the properties of the specified <see cref="T:GraphQL.Types.EnumValueDefinition"/> as necessary.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLAttribute.Modify(GraphQL.Types.FieldType,System.Boolean)">
            <summary>
            Updates the properties of the specified <see cref="T:GraphQL.Types.FieldType"/> as necessary.
            </summary>
            <param name="fieldType">The <see cref="T:GraphQL.Types.FieldType"/> to update.</param>
            <param name="isInputType">Indicates if the graph type containing this field is an input type.</param>
        </member>
        <member name="M:GraphQL.GraphQLAttribute.Modify(GraphQL.Types.TypeInformation)">
            <summary>
            Updates the properties of the specified <see cref="T:GraphQL.Types.TypeInformation"/> as necessary.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLAttribute.Modify(GraphQL.Types.ArgumentInformation)">
            <summary>
            Updates the properties of the specified <see cref="T:GraphQL.Types.ArgumentInformation"/> as necessary.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLAttribute.Modify``1(GraphQL.Types.ArgumentInformation)">
            <summary>
            Updates the properties of the specified <see cref="T:GraphQL.Types.ArgumentInformation"/> as necessary.
            <typeparamref name="TParameterType"/> represents the return type of the parameter.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLAttribute.Modify(GraphQL.Types.QueryArgument)">
            <summary>
            Updates the properties of the specified <see cref="T:GraphQL.Types.QueryArgument"/> as necessary.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLAttribute.ShouldInclude(System.Reflection.MemberInfo,System.Nullable{System.Boolean})">
            <summary>
            Determines if a specified member should be included during automatic generation
            of a graph type from a CLR type.
            <br/><br/>
            When called for enumeration values, <paramref name="isInputType"/> is <see langword="null"/>.
            </summary>
        </member>
        <member name="P:GraphQL.GraphQLAttribute.Priority">
            <summary>
            Determines the order in which GraphQL attributes are applied to the graph type, field type, or parameter definition.
            Attributes with the lowest <see cref="P:GraphQL.GraphQLAttribute.Priority"/> value are applied first.
            The default priority is 1.
            </summary>
        </member>
        <member name="T:GraphQL.GraphQLMetadataAttribute">
            <summary>
            Attribute for specifying additional information when matching a CLR type to a corresponding GraphType.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLMetadataAttribute.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLMetadataAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance with the specified GraphType name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:GraphQL.GraphQLMetadataAttribute.Name">
            <summary>
            GraphType name.
            </summary>
        </member>
        <member name="P:GraphQL.GraphQLMetadataAttribute.Description">
            <summary>
            GraphType description.
            </summary>
        </member>
        <member name="P:GraphQL.GraphQLMetadataAttribute.DeprecationReason">
            <summary>
            Deprecation reason of the field or GraphType.
            </summary>
        </member>
        <member name="P:GraphQL.GraphQLMetadataAttribute.ResolverType">
            <summary>
            Indicates if the marked method represents a field resolver or a subscription event stream resolver.
            </summary>
        </member>
        <member name="P:GraphQL.GraphQLMetadataAttribute.IsTypeOf">
            <summary>
            Indicates the CLR type that this graph type represents.
            </summary>
        </member>
        <member name="P:GraphQL.GraphQLMetadataAttribute.InputType">
            <summary>
            Indicates which GraphType input type this CLR type is mapped to (if used in input context).
            </summary>
        </member>
        <member name="P:GraphQL.GraphQLMetadataAttribute.OutputType">
            <summary>
            Indicates which GraphType output type this CLR type is mapped to (if used in output context).
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLMetadataAttribute.Modify(GraphQL.Utilities.TypeConfig)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.GraphQLMetadataAttribute.Modify(GraphQL.Utilities.FieldConfig)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.GraphQLMetadataAttribute.Modify(GraphQL.Types.EnumValueDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.GraphQLMetadataAttribute.Modify(GraphQL.Types.IGraphType)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.GraphQLMetadataAttribute.Modify(GraphQL.Types.FieldType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.ResolverType">
            <summary>
            Indicates if the specified method is a field resolver or event stream resolver.
            </summary>
        </member>
        <member name="F:GraphQL.ResolverType.Resolver">
            <summary>
            Indicates the specified method is a field resolver
            </summary>
        </member>
        <member name="F:GraphQL.ResolverType.StreamResolver">
            <summary>
            Indicates the specified method is an source stream resolver
            </summary>
        </member>
        <member name="T:GraphQL.IdAttribute">
            <summary>
            Specifies that a property will be mapped to <see cref="T:GraphQL.Types.IdGraphType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.IdAttribute.Modify(GraphQL.Types.TypeInformation)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.IgnoreAttribute">
            <summary>
            Does not add the marked property to the auto-registered GraphQL type as a field.
            </summary>
        </member>
        <member name="M:GraphQL.IgnoreAttribute.ShouldInclude(System.Reflection.MemberInfo,System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.ImplementsAttribute">
            <summary>
            Marks the type as implementing a specified interface.
            </summary>
        </member>
        <member name="M:GraphQL.ImplementsAttribute.#ctor(System.Type)">
            <summary>
            Marks the type as implementing a specified interface.
            </summary>
            <param name="type">Can be a interface CLR type or an interface graph type.</param>
        </member>
        <member name="P:GraphQL.ImplementsAttribute.InterfaceGraphType">
            <summary>
            Returns the interface graph type that this graph type implements.
            </summary>
        </member>
        <member name="M:GraphQL.ImplementsAttribute.Modify(GraphQL.Types.IGraphType)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.InputNameAttribute">
            <summary>
            Specifies a GraphQL type name for a CLR class when used as an input type.
            Note that the specified name will be translated by the schema's <see cref="T:GraphQL.Conversion.INameConverter"/>.
            </summary>
        </member>
        <member name="M:GraphQL.InputNameAttribute.#ctor(System.String)">
            <inheritdoc cref="T:GraphQL.NameAttribute"/>
        </member>
        <member name="P:GraphQL.InputNameAttribute.Name">
            <summary>
            Returns the GraphQL name of the associated graph type or field.
            </summary>
        </member>
        <member name="M:GraphQL.InputNameAttribute.Modify(GraphQL.Types.IGraphType)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.InputNameAttribute.Modify(GraphQL.Types.FieldType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.InputNameAttribute.Modify(GraphQL.Types.QueryArgument)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.InputTypeAttribute">
            <summary>
            Specifies an input graph type mapping for the CLR class or property marked with this attribute.
            </summary>
        </member>
        <member name="M:GraphQL.InputTypeAttribute.#ctor(System.Type)">
            <inheritdoc cref="T:GraphQL.InputTypeAttribute"/>
        </member>
        <member name="P:GraphQL.InputTypeAttribute.InputType">
            <inheritdoc cref="T:GraphQL.InputTypeAttribute"/>
        </member>
        <member name="M:GraphQL.InputTypeAttribute.Modify(GraphQL.Types.FieldType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.InputTypeAttribute.Modify(GraphQL.Types.QueryArgument)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.InputTypeAttribute`1">
            <inheritdoc cref="T:GraphQL.InputTypeAttribute"/>
        </member>
        <member name="M:GraphQL.InputTypeAttribute`1.#ctor">
            <inheritdoc cref="T:GraphQL.InputTypeAttribute"/>
        </member>
        <member name="T:GraphQL.MetadataAttribute">
            <summary>
            Marks a class (graph type) or property (field) with additional metadata.
            </summary>
        </member>
        <member name="M:GraphQL.MetadataAttribute.#ctor(System.String,System.Object)">
            <inheritdoc cref="T:GraphQL.MetadataAttribute"/>
        </member>
        <member name="P:GraphQL.MetadataAttribute.Key">
            <summary>
            Gets or sets the metadata key.
            </summary>
        </member>
        <member name="P:GraphQL.MetadataAttribute.Value">
            <summary>
            Gets or sets the metadata value.
            </summary>
        </member>
        <member name="M:GraphQL.MetadataAttribute.Modify(GraphQL.Utilities.TypeConfig)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.MetadataAttribute.Modify(GraphQL.Utilities.FieldConfig)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.MetadataAttribute.Modify(GraphQL.Types.EnumValueDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.MetadataAttribute.Modify(GraphQL.Types.IGraphType)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.MetadataAttribute.Modify(GraphQL.Types.FieldType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.MetadataAttribute.Modify(GraphQL.Types.QueryArgument)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.NameAttribute">
            <summary>
            Specifies a GraphQL type name for a CLR class, or a field name for a property.
            Note that the specified name will be translated by the schema's <see cref="T:GraphQL.Conversion.INameConverter"/>.
            </summary>
        </member>
        <member name="M:GraphQL.NameAttribute.#ctor(System.String)">
            <inheritdoc cref="T:GraphQL.NameAttribute"/>
        </member>
        <member name="P:GraphQL.NameAttribute.Name">
            <summary>
            Returns the GraphQL name of the associated graph type or field.
            </summary>
        </member>
        <member name="M:GraphQL.NameAttribute.Modify(GraphQL.Types.EnumValueDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.NameAttribute.Modify(GraphQL.Types.IGraphType)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.NameAttribute.Modify(GraphQL.Types.FieldType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.NameAttribute.Modify(GraphQL.Types.QueryArgument)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.OutputNameAttribute">
            <summary>
            Specifies a GraphQL type name for a CLR class when used as an output type.
            Note that the specified name will be translated by the schema's <see cref="T:GraphQL.Conversion.INameConverter"/>.
            </summary>
        </member>
        <member name="M:GraphQL.OutputNameAttribute.#ctor(System.String)">
            <inheritdoc cref="T:GraphQL.NameAttribute"/>
        </member>
        <member name="P:GraphQL.OutputNameAttribute.Name">
            <summary>
            Returns the GraphQL name of the associated graph type or field.
            </summary>
        </member>
        <member name="M:GraphQL.OutputNameAttribute.Modify(GraphQL.Types.IGraphType)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.OutputNameAttribute.Modify(GraphQL.Types.FieldType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.OutputTypeAttribute">
            <summary>
            Specifies an output graph type mapping for the CLR class or property marked with this attribute.
            </summary>
        </member>
        <member name="M:GraphQL.OutputTypeAttribute.#ctor(System.Type)">
            <inheritdoc cref="T:GraphQL.OutputTypeAttribute"/>
        </member>
        <member name="P:GraphQL.OutputTypeAttribute.OutputType">
            <inheritdoc cref="T:GraphQL.OutputTypeAttribute"/>
        </member>
        <member name="M:GraphQL.OutputTypeAttribute.Modify(GraphQL.Types.FieldType,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.OutputTypeAttribute`1">
            <inheritdoc cref="T:GraphQL.OutputTypeAttribute"/>
        </member>
        <member name="M:GraphQL.OutputTypeAttribute`1.#ctor">
            <inheritdoc cref="T:GraphQL.OutputTypeAttribute"/>
        </member>
        <member name="T:GraphQL.BoolBox">
            <summary>Boolean values to avoid boxing.</summary>
        </member>
        <member name="F:GraphQL.BoolBox.True">
            <summary>
            Shared field for 'true' value.
            </summary>
        </member>
        <member name="F:GraphQL.BoolBox.False">
            <summary>
            Shared field for 'false' value.
            </summary>
        </member>
        <member name="M:GraphQL.BoolBox.Boxed(System.Boolean)">
            <summary>This method avoids boxing boolean values.</summary>
            <param name="value">Original boolean value.</param>
            <returns>Shared static boxed boolean value.</returns>
        </member>
        <member name="M:GraphQL.BoolBox.Boxed(System.Nullable{System.Boolean})">
            <summary>This method avoids boxing boolean values.</summary>
            <param name="value">Original boolean value.</param>
            <returns>Shared static boxed boolean value or <see langword="null"/>.</returns>
        </member>
        <member name="T:GraphQL.Builders.ConnectionBuilder">
            <summary>
            Static methods to create connection field builders.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder.Create``2">
            <summary>
            Returns a builder for new connection field for the specified node type.
            The edge type is <see cref="T:GraphQL.Types.Relay.EdgeType`1">EdgeType</see>&lt;<typeparamref name="TNodeType"/>&gt;.
            The connection type is <see cref="T:GraphQL.Types.Relay.ConnectionType`2">ConnectionType</see>&lt;<typeparamref name="TNodeType"/>, <see cref="T:GraphQL.Types.Relay.EdgeType`1">EdgeType</see>&lt;<typeparamref name="TNodeType"/>&gt;&gt;.
            </summary>
            <typeparam name="TNodeType">The graph type of the connection's node.</typeparam>
            <typeparam name="TSourceType">The type of <see cref="P:GraphQL.IResolveFieldContext.Source"/>.</typeparam>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder.Create``3">
            <summary>
            Returns a builder for new connection field for the specified node and edge type.
            The connection type is <see cref="T:GraphQL.Types.Relay.ConnectionType`2">ConnectionType</see>&lt;<typeparamref name="TNodeType"/>, <typeparamref name="TEdgeType"/>&gt;
            </summary>
            <typeparam name="TNodeType">The graph type of the connection's node.</typeparam>
            <typeparam name="TEdgeType">The graph type of the connection's edge. Must derive from <see cref="T:GraphQL.Types.Relay.EdgeType`1">EdgeType</see>&lt;<typeparamref name="TNodeType"/>&gt;.</typeparam>
            <typeparam name="TSourceType">The type of <see cref="P:GraphQL.IResolveFieldContext.Source"/>.</typeparam>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder.Create``4">
            <summary>
            Returns a builder for new connection field for the specified node, edge and connection type.
            </summary>
            <typeparam name="TNodeType">The graph type of the connection's node.</typeparam>
            <typeparam name="TEdgeType">The graph type of the connection's edge. Must derive from <see cref="T:GraphQL.Types.Relay.EdgeType`1">EdgeType</see>&lt;<typeparamref name="TNodeType"/>&gt;.</typeparam>
            <typeparam name="TConnectionType">The graph type of the connection. Must derive from <see cref="T:GraphQL.Types.Relay.ConnectionType`2">ConnectionType</see>&lt;<typeparamref name="TNodeType"/>, <typeparamref name="TEdgeType"/>&gt;.</typeparam>
            <typeparam name="TSourceType">The type of <see cref="P:GraphQL.IResolveFieldContext.Source"/>.</typeparam>
        </member>
        <member name="T:GraphQL.Builders.ConnectionBuilder`1">
            <summary>
            Builds a connection field for graphs that have the specified source type.
            </summary>
        </member>
        <member name="P:GraphQL.Builders.ConnectionBuilder`1.FieldType">
            <summary>
            Returns the generated field.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.#ctor(GraphQL.Types.FieldType)">
            <summary>
            Initializes a new instance for the specified <see cref="T:GraphQL.Types.FieldType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Create``1(System.String)">
            <summary>
            Returns a builder for new connection field for the specified node type.
            The edge type is <see cref="T:GraphQL.Types.Relay.EdgeType`1">EdgeType</see>&lt;<typeparamref name="TNodeType"/>&gt;.
            The connection type is <see cref="T:GraphQL.Types.Relay.ConnectionType`2">ConnectionType</see>&lt;<typeparamref name="TNodeType"/>, <see cref="T:GraphQL.Types.Relay.EdgeType`1">EdgeType</see>&lt;<typeparamref name="TNodeType"/>&gt;&gt;.
            </summary>
            <typeparam name="TNodeType">The graph type of the connection's node.</typeparam>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Create``2(System.String)">
            <summary>
            Returns a builder for new connection field for the specified node and edge type.
            The connection type is <see cref="T:GraphQL.Types.Relay.ConnectionType`2">ConnectionType</see>&lt;<typeparamref name="TNodeType"/>, <typeparamref name="TEdgeType"/>&gt;
            </summary>
            <typeparam name="TNodeType">The graph type of the connection's node.</typeparam>
            <typeparam name="TEdgeType">The graph type of the connection's edge. Must derive from <see cref="T:GraphQL.Types.Relay.EdgeType`1">EdgeType</see>&lt;<typeparamref name="TNodeType"/>&gt;.</typeparam>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Create``3(System.String)">
            <summary>
            Returns a builder for new connection field for the specified node, edge and connection type.
            </summary>
            <typeparam name="TNodeType">The graph type of the connection's node.</typeparam>
            <typeparam name="TEdgeType">The graph type of the connection's edge. Must derive from <see cref="T:GraphQL.Types.Relay.EdgeType`1">EdgeType</see>&lt;<typeparamref name="TNodeType"/>&gt;.</typeparam>
            <typeparam name="TConnectionType">The graph type of the connection. Must derive from <see cref="T:GraphQL.Types.Relay.ConnectionType`2">ConnectionType</see>&lt;<typeparamref name="TNodeType"/>, <typeparamref name="TEdgeType"/>&gt;.</typeparam>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Bidirectional">
            <summary>
            Configure the connection to be bi-directional.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Name(System.String)">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder`2.Name(System.String)"/>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Description(System.String)">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder`2.Description(System.String)"/>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.DeprecationReason(System.String)">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder`2.DeprecationReason(System.String)"/>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.PageSize(System.Int32)">
            <summary>
            Sets the default page size.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.ReturnAll">
            <summary>
            Clears the default page size, so all records are returned by default.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Argument``1(System.String,System.Action{GraphQL.Types.QueryArgument})">
            <summary>
            Adds an argument to the connection field.
            </summary>
            <typeparam name="TArgumentGraphType">The graph type of the argument.</typeparam>
            <param name="name">The name of the argument.</param>
            <param name="configure">A delegate to further configure the argument.</param>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Argument``1(System.String,System.String)">
            <summary>
            Adds an argument to the connection field.
            </summary>
            <typeparam name="TArgumentGraphType">The graph type of the argument.</typeparam>
            <param name="name">The name of the argument.</param>
            <param name="description">The description of the argument.</param>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Argument``1(System.String,System.String,System.Action{GraphQL.Types.QueryArgument})">
            <summary>
            Adds an argument to the connection field.
            </summary>
            <typeparam name="TArgumentGraphType">The graph type of the argument.</typeparam>
            <param name="name">The name of the argument.</param>
            <param name="description">The description of the argument.</param>
            <param name="configure">A delegate to further configure the argument.</param>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Argument``2(System.String,System.String,``1)">
            <summary>
            Adds an argument to the connection field.
            </summary>
            <typeparam name="TArgumentGraphType">The graph type of the argument.</typeparam>
            <typeparam name="TArgumentType">The type of the argument value.</typeparam>
            <param name="name">The name of the argument.</param>
            <param name="description">The description of the argument.</param>
            <param name="defaultValue">The default value of the argument.</param>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Argument``2(System.String,System.String,``1,System.Action{GraphQL.Types.QueryArgument})">
            <summary>
            Adds an argument to the connection field.
            </summary>
            <typeparam name="TArgumentGraphType">The graph type of the argument.</typeparam>
            <typeparam name="TArgumentType">The type of the argument value.</typeparam>
            <param name="name">The name of the argument.</param>
            <param name="description">The description of the argument.</param>
            <param name="defaultValue">The default value of the argument.</param>
            <param name="configure">A delegate to further configure the argument.</param>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Configure(System.Action{GraphQL.Types.FieldType})">
            <summary>
            Runs a configuration delegate for the connection field.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Directive(System.String)">
            <summary>
            Apply directive to connection field without specifying arguments. If the directive
            declaration has arguments, then their default values (if any) will be used.
            </summary>
            <param name="name">Directive name.</param>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Directive(System.String,System.String,System.Object)">
            <summary>
            Apply directive to connection field specifying one argument. If the directive
            declaration has other arguments, then their default values (if any) will be used.
            </summary>
            <param name="name">Directive name.</param>
            <param name="argumentName">Argument name.</param>
            <param name="argumentValue">Argument value.</param>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Directive(System.String,System.Action{GraphQL.Types.AppliedDirective})">
            <summary>
            Apply directive to connection field specifying configuration delegate.
            </summary>
            <param name="name">Directive name.</param>
            <param name="configure">Configuration delegate.</param>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Returns``1">
            <summary>
            Specifies the return data type of the connection resolver. Typically this would be <see cref="T:GraphQL.Types.Relay.DataObjects.Connection`1"/>
            or <see cref="T:GraphQL.Types.Relay.DataObjects.Connection`2"/>, but it can be any type that returns the proper fields for the
            connection graph type.
            <br/><br/>
            For instance, to specify a return type for a Widget you might write:
            <br/><br/>
            <code>
            .Returns&lt;Connection&lt;Widget&gt;&gt;()
            </code>
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.Resolve(System.Func{GraphQL.Builders.IResolveConnectionContext{`0},System.Object})">
            <summary>
            Sets the resolver method for the connection field.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`1.ResolveAsync(System.Func{GraphQL.Builders.IResolveConnectionContext{`0},System.Threading.Tasks.Task{System.Object}})">
            <summary>
            Sets the resolver method for the connection field.
            </summary>
        </member>
        <member name="T:GraphQL.Builders.ConnectionBuilder`2">
            <summary>
            Builds a connection field for graphs that have the specified source and return type.
            </summary>
        </member>
        <member name="P:GraphQL.Builders.ConnectionBuilder`2.FieldType">
            <summary>
            Returns the generated field.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`2.#ctor(GraphQL.Types.FieldType)">
            <summary>
            Initializes a new instance for the specified <see cref="T:GraphQL.Types.FieldType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`2.Create``1(System.String)">
            <summary>
            Returns a builder for new connection field for the specified node type.
            The edge type is <see cref="T:GraphQL.Types.Relay.EdgeType`1">EdgeType</see>&lt;<typeparamref name="TNodeType"/>&gt;.
            The connection type is <see cref="T:GraphQL.Types.Relay.ConnectionType`2">ConnectionType</see>&lt;<typeparamref name="TNodeType"/>, <see cref="T:GraphQL.Types.Relay.EdgeType`1">EdgeType</see>&lt;<typeparamref name="TNodeType"/>&gt;&gt;.
            </summary>
            <typeparam name="TNodeType">The graph type of the connection's node.</typeparam>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`2.Create``2(System.String)">
            <summary>
            Returns a builder for new connection field for the specified node and edge type.
            The connection type is <see cref="T:GraphQL.Types.Relay.ConnectionType`2">ConnectionType</see>&lt;<typeparamref name="TNodeType"/>, <typeparamref name="TEdgeType"/>&gt;
            </summary>
            <typeparam name="TNodeType">The graph type of the connection's node.</typeparam>
            <typeparam name="TEdgeType">The graph type of the connection's edge. Must derive from <see cref="T:GraphQL.Types.Relay.EdgeType`1">EdgeType</see>&lt;<typeparamref name="TNodeType"/>&gt;.</typeparam>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`2.Create``3(System.String)">
            <summary>
            Returns a builder for new connection field for the specified node, edge and connection type.
            </summary>
            <typeparam name="TNodeType">The graph type of the connection's node.</typeparam>
            <typeparam name="TEdgeType">The graph type of the connection's edge. Must derive from <see cref="T:GraphQL.Types.Relay.EdgeType`1">EdgeType</see>&lt;<typeparamref name="TNodeType"/>&gt;.</typeparam>
            <typeparam name="TConnectionType">The graph type of the connection. Must derive from <see cref="T:GraphQL.Types.Relay.ConnectionType`2">ConnectionType</see>&lt;<typeparamref name="TNodeType"/>, <typeparamref name="TEdgeType"/>&gt;.</typeparam>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`2.Bidirectional">
            <summary>
            Configure the connection to be bi-directional.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`2.Name(System.String)">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder`2.Name(System.String)"/>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`2.Description(System.String)">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder`2.Description(System.String)"/>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`2.DeprecationReason(System.String)">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder`2.DeprecationReason(System.String)"/>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`2.PageSize(System.Nullable{System.Int32})">
            <summary>
            Sets the default page size or clears (if null) the default page size, so all records are returned by default.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`2.Argument``1(System.String,System.Action{GraphQL.Types.QueryArgument})">
            <summary>
            Adds an argument to the connection field.
            </summary>
            <typeparam name="TArgumentGraphType">The graph type of the argument.</typeparam>
            <param name="name">The name of the argument.</param>
            <param name="configure">A delegate to further configure the argument.</param>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`2.Argument``1(System.String,System.String,System.Action{GraphQL.Types.QueryArgument})">
            <summary>
            Adds an argument to the connection field.
            </summary>
            <typeparam name="TArgumentGraphType">The graph type of the argument.</typeparam>
            <param name="name">The name of the argument.</param>
            <param name="description">The description of the argument.</param>
            <param name="configure">A delegate to further configure the argument.</param>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`2.Argument``2(System.String,System.String,``1,System.Action{GraphQL.Types.QueryArgument})">
            <summary>
            Adds an argument to the connection field.
            </summary>
            <typeparam name="TArgumentGraphType">The graph type of the argument.</typeparam>
            <typeparam name="TArgumentType">The type of the argument value.</typeparam>
            <param name="name">The name of the argument.</param>
            <param name="description">The description of the argument.</param>
            <param name="defaultValue">The default value of the argument.</param>
            <param name="configure">A delegate to further configure the argument.</param>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`2.Configure(System.Action{GraphQL.Types.FieldType})">
            <summary>
            Runs a configuration delegate for the connection field.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`2.Directive(System.String)">
            <summary>
            Apply directive to connection field without specifying arguments. If the directive
            declaration has arguments, then their default values (if any) will be used.
            </summary>
            <param name="name">Directive name.</param>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`2.Directive(System.String,System.String,System.Object)">
            <summary>
            Apply directive to connection field specifying one argument. If the directive
            declaration has other arguments, then their default values (if any) will be used.
            </summary>
            <param name="name">Directive name.</param>
            <param name="argumentName">Argument name.</param>
            <param name="argumentValue">Argument value.</param>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`2.Directive(System.String,System.Action{GraphQL.Types.AppliedDirective})">
            <summary>
            Apply directive to connection field specifying configuration delegate.
            </summary>
            <param name="name">Directive name.</param>
            <param name="configure">Configuration delegate.</param>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`2.Returns``1">
            <summary>
            Sets the return type of the field.
            </summary>
            <typeparam name="TNewReturnType">The type of the return value of the resolver.</typeparam>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`2.Resolve(System.Func{GraphQL.Builders.IResolveConnectionContext{`0},`1})">
            <summary>
            Sets the resolver method for the connection field. This method must be called after
            <see cref="M:GraphQL.Builders.ConnectionBuilder`2.PageSize(System.Nullable{System.Int32})"/> and/or <see cref="M:GraphQL.Builders.ConnectionBuilder`2.Bidirectional"/> have been called.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ConnectionBuilder`2.ResolveAsync(System.Func{GraphQL.Builders.IResolveConnectionContext{`0},System.Threading.Tasks.Task{`1}})">
            <summary>
            Sets the resolver method for the connection field. This method must be called after
            <see cref="M:GraphQL.Builders.ConnectionBuilder`2.PageSize(System.Nullable{System.Int32})"/> and/or <see cref="M:GraphQL.Builders.ConnectionBuilder`2.Bidirectional"/> have been called.
            </summary>
        </member>
        <member name="T:GraphQL.Builders.FieldBuilder">
            <summary>
            Static methods to create field builders.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder.Create``2(System.Type)">
            <summary>
            Returns a builder for a new field with a specified source type, return type and graph type.
            </summary>
            <typeparam name="TSourceType">The type of <see cref="P:GraphQL.IResolveFieldContext.Source"/>.</typeparam>
            <typeparam name="TReturnType">The type of the return value of the resolver.</typeparam>
            <param name="type">The graph type of the field.</param>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder.Create``2(GraphQL.Types.IGraphType)">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder.Create``2(System.Type)"/>
        </member>
        <member name="T:GraphQL.Builders.FieldBuilder`2">
            <summary>
            Builds a field for a graph with a specified source type and return type.
            </summary>
            <typeparam name="TSourceType">The type of <see cref="P:GraphQL.IResolveFieldContext.Source"/>.</typeparam>
            <typeparam name="TReturnType">The type of the return value of the resolver.</typeparam>
        </member>
        <member name="P:GraphQL.Builders.FieldBuilder`2.FieldType">
            <summary>
            Returns the generated field.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.#ctor(GraphQL.Types.FieldType)">
            <summary>
            Initializes a new instance for the specified <see cref="T:GraphQL.Types.FieldType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Create(GraphQL.Types.IGraphType,System.String)">
            <summary>
            Returns a builder for a new field.
            </summary>
            <param name="type">The graph type of the field.</param>
            <param name="name">The name of the field.</param>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Create(System.Type,System.String)">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder`2.Create(GraphQL.Types.IGraphType,System.String)"/>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Type(GraphQL.Types.IGraphType)">
            <summary>
            Sets the graph type of the field.
            </summary>
            <param name="type">The graph type of the field.</param>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Name(System.String)">
            <summary>
            Sets the name of the field.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Description(System.String)">
            <summary>
            Sets the description of the field.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.DeprecationReason(System.String)">
            <summary>
            Sets the deprecation reason of the field.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.DefaultValue(`1)">
            <summary>
            Sets the default value of fields on input object graph types.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Resolve(GraphQL.Resolvers.IFieldResolver)">
            <summary>
            Sets the resolver for the field.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Resolve(System.Func{GraphQL.IResolveFieldContext{`0},`1})">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder`2.Resolve(GraphQL.Resolvers.IFieldResolver)"/>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.ResolveAsync(System.Func{GraphQL.IResolveFieldContext{`0},System.Threading.Tasks.Task{`1}})">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder`2.Resolve(GraphQL.Resolvers.IFieldResolver)"/>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.ResolveDelegate(System.Delegate)">
            <inheritdoc cref="M:GraphQL.Builders.FieldBuilder`2.Resolve(GraphQL.Resolvers.IFieldResolver)"/>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Returns``1">
            <summary>
            Sets the return type of the field.
            </summary>
            <typeparam name="TNewReturnType">The type of the return value of the resolver.</typeparam>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Argument``1(System.String,System.String,System.Action{GraphQL.Types.QueryArgument})">
            <summary>
            Adds an argument to the field.
            </summary>
            <typeparam name="TArgumentGraphType">The graph type of the argument.</typeparam>
            <param name="name">The name of the argument.</param>
            <param name="description">The description of the argument.</param>
            <param name="configure">A delegate to further configure the argument.</param>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Argument``2(System.String,System.String,``1,System.Action{GraphQL.Types.QueryArgument})">
            <summary>
            Adds an argument to the field.
            </summary>
            <typeparam name="TArgumentGraphType">The graph type of the argument.</typeparam>
            <typeparam name="TArgumentType">The type of the argument value.</typeparam>
            <param name="name">The name of the argument.</param>
            <param name="description">The description of the argument.</param>
            <param name="defaultValue">The default value of the argument.</param>
            <param name="configure">A delegate to further configure the argument.</param>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Argument``1(System.String)">
            <summary>
            Adds an argument to the field.
            </summary>
            <typeparam name="TArgumentGraphType">The graph type of the argument.</typeparam>
            <param name="name">The name of the argument.</param>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Argument``1(System.String,System.Action{GraphQL.Types.QueryArgument})">
            <summary>
            Adds an argument to the field.
            </summary>
            <typeparam name="TArgumentGraphType">The graph type of the argument.</typeparam>
            <param name="name">The name of the argument.</param>
            <param name="configure">A delegate to further configure the argument.</param>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Argument``1(System.String,System.Boolean,System.Action{GraphQL.Types.QueryArgument})">
            <summary>
            Adds an argument to the field.
            </summary>
            <typeparam name="TArgumentClrType">The clr type of the argument.</typeparam>
            <param name="name">The name of the argument.</param>
            <param name="nullable">Indicates if the argument is optional or not.</param>
            <param name="configure">A delegate to further configure the argument.</param>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Argument``1(System.String,System.Boolean,System.String,System.Action{GraphQL.Types.QueryArgument})">
            <summary>
            Adds an argument to the field.
            </summary>
            <typeparam name="TArgumentClrType">The clr type of the argument.</typeparam>
            <param name="name">The name of the argument.</param>
            <param name="nullable">Indicates if the argument is optional or not.</param>
            <param name="description">The description of the argument.</param>
            <param name="configure">A delegate to further configure the argument.</param>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Argument(System.Type,System.String,System.Action{GraphQL.Types.QueryArgument})">
            <summary>
            Adds an argument to the field.
            </summary>
            <param name="type">The graph type of the argument.</param>
            <param name="name">The name of the argument.</param>
            <param name="configure">A delegate to further configure the argument.</param>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Arguments(System.Collections.Generic.IEnumerable{GraphQL.Types.QueryArgument})">
            <summary>
            Adds the specified collection of arguments to the field.
            </summary>
            <param name="arguments">Arguments to add.</param>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Arguments(GraphQL.Types.QueryArgument[])">
            <summary>
            Adds the specified collection of arguments to the field.
            </summary>
            <param name="arguments">Arguments to add.</param>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Configure(System.Action{GraphQL.Types.FieldType})">
            <summary>
            Runs a configuration delegate for the field.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.ResolveStream(System.Func{GraphQL.IResolveFieldContext{`0},System.IObservable{`1}})">
            <summary>
            Sets a source stream resolver for the field.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.ResolveStreamAsync(System.Func{GraphQL.IResolveFieldContext{`0},System.Threading.Tasks.Task{System.IObservable{`1}}})">
            <summary>
            Sets a source stream resolver for the field.
            </summary>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Directive(System.String)">
            <summary>
            Apply directive to field without specifying arguments. If the directive declaration has arguments,
            then their default values (if any) will be used.
            </summary>
            <param name="name">Directive name.</param>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Directive(System.String,System.String,System.Object)">
            <summary>
            Apply directive to field specifying one argument. If the directive declaration has other arguments,
            then their default values (if any) will be used.
            </summary>
            <param name="name">Directive name.</param>
            <param name="argumentName">Argument name.</param>
            <param name="argumentValue">Argument value.</param>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Directive(System.String,System.String,System.Object,System.String,System.Object)">
            <summary>
            Apply directive specifying two arguments. If the directive declaration has other arguments,
            then their default values (if any) will be used.
            </summary>
            <param name="name">Directive name.</param>
            <param name="argument1Name">First argument name.</param>
            <param name="argument1Value">First argument value.</param>
            <param name="argument2Name">Second argument name.</param>
            <param name="argument2Value">Second argument value.</param>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.Directive(System.String,System.Action{GraphQL.Types.AppliedDirective})">
            <summary>
            Apply directive to field specifying configuration delegate.
            </summary>
            <param name="name">Directive name.</param>
            <param name="configure">Configuration delegate.</param>
        </member>
        <member name="M:GraphQL.Builders.FieldBuilder`2.ComplexityImpact(System.Double)">
            <summary>
            Specify field's complexity impact which will be taken into account by <see cref="T:GraphQL.Validation.Complexity.ComplexityAnalyzer"/>.
            </summary>
            <param name="impact">Field's complexity impact.</param>
        </member>
        <member name="T:GraphQL.Builders.IResolveConnectionContext">
            <summary>
            Contains parameters pertaining to the currently executing <see cref="T:GraphQL.Resolvers.IFieldResolver"/>, along
            with helper properties for resolving forward and backward pagination requests on a
            connection type.
            </summary>
        </member>
        <member name="P:GraphQL.Builders.IResolveConnectionContext.IsUnidirectional">
            <summary>
            Indicates if this connection only allows forward pagination requests.
            </summary>
        </member>
        <member name="P:GraphQL.Builders.IResolveConnectionContext.First">
            <summary>
            For a forward pagination request, returns the maximum number of edges to be returned.
            </summary>
        </member>
        <member name="P:GraphQL.Builders.IResolveConnectionContext.Last">
            <summary>
            For a backwards pagination request, returns the maximum number of edges to be returned.
            </summary>
        </member>
        <member name="P:GraphQL.Builders.IResolveConnectionContext.After">
            <summary>
            For a forward pagination request, returned edges should start immediately after the edge identified by this cursor.
            </summary>
        </member>
        <member name="P:GraphQL.Builders.IResolveConnectionContext.Before">
            <summary>
            For a backwards pagination request, returned edges should end immediately prior to the edge identified by this cursor.
            </summary>
        </member>
        <member name="P:GraphQL.Builders.IResolveConnectionContext.PageSize">
            <summary>
            The maximum number of edges to be returned, or the specified default page size if <see cref="P:GraphQL.Builders.IResolveConnectionContext.First"/> and
            <see cref="P:GraphQL.Builders.IResolveConnectionContext.Last"/> are not specified.
            </summary>
        </member>
        <member name="T:GraphQL.Builders.IResolveConnectionContext`1">
            <inheritdoc cref="T:GraphQL.Builders.IResolveConnectionContext"/>
        </member>
        <member name="T:GraphQL.Builders.ResolveConnectionContext`1">
            <summary>
            A mutable implementation of <see cref="T:GraphQL.Builders.IResolveConnectionContext`1"/>
            </summary>
        </member>
        <member name="M:GraphQL.Builders.ResolveConnectionContext`1.#ctor(GraphQL.IResolveFieldContext,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Initializes an instance which mirrors the specified <see cref="T:GraphQL.IResolveFieldContext"/>
            with the specified properties and defaults
            </summary>
            <param name="context">The underlying <see cref="T:GraphQL.IResolveFieldContext"/> to mirror</param>
            <param name="isUnidirectional">Indicates if the connection only allows forward paging requests</param>
            <param name="defaultPageSize">Indicates the default page size if not specified by the request</param>
        </member>
        <member name="P:GraphQL.Builders.ResolveConnectionContext`1.IsUnidirectional">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Builders.ResolveConnectionContext`1.First">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Builders.ResolveConnectionContext`1.Last">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Builders.ResolveConnectionContext`1.After">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Builders.ResolveConnectionContext`1.Before">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Builders.ResolveConnectionContext`1.PageSize">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Conversion.CamelCaseNameConverter">
            <summary>
            Camel case name converter; set as the default <see cref="T:GraphQL.Conversion.INameConverter"/> within <see cref="P:GraphQL.Types.Schema.NameConverter"/>.
            Always used by all introspection fields regardless of the selected <see cref="T:GraphQL.Conversion.INameConverter"/>.
            </summary>
        </member>
        <member name="F:GraphQL.Conversion.CamelCaseNameConverter.Instance">
            <summary>
            Static instance of <see cref="T:GraphQL.Conversion.CamelCaseNameConverter"/> that can be reused instead of creating new.
            </summary>
        </member>
        <member name="M:GraphQL.Conversion.CamelCaseNameConverter.NameForField(System.String,GraphQL.Types.IComplexGraphType)">
            <summary>
            Returns the field name converted to camelCase.
            </summary>
        </member>
        <member name="M:GraphQL.Conversion.CamelCaseNameConverter.NameForArgument(System.String,GraphQL.Types.IComplexGraphType,GraphQL.Types.FieldType)">
            <summary>
            Returns the argument name converted to camelCase.
            </summary>
        </member>
        <member name="T:GraphQL.Conversion.DefaultNameConverter">
            <summary>
            A name converter which does not modify the names passed to it.
            </summary>
        </member>
        <member name="F:GraphQL.Conversion.DefaultNameConverter.Instance">
            <summary>
            Static instance of <see cref="T:GraphQL.Conversion.DefaultNameConverter"/> that can be reused instead of creating new.
            </summary>
        </member>
        <member name="M:GraphQL.Conversion.DefaultNameConverter.NameForField(System.String,GraphQL.Types.IComplexGraphType)">
            <summary>
            Returns the field name without modification
            </summary>
        </member>
        <member name="M:GraphQL.Conversion.DefaultNameConverter.NameForArgument(System.String,GraphQL.Types.IComplexGraphType,GraphQL.Types.FieldType)">
            <summary>
            Returns the argument name without modification
            </summary>
        </member>
        <member name="T:GraphQL.Conversion.INameConverter">
            <summary>
            Sanitizes graph field and argument names to a particular case convention, such as camelСase or PascalCase.<br/>
            <br/>
            Set <see cref="P:GraphQL.Types.Schema.NameConverter"/> to an instance of a derived class to select a converter to use.
            The default converter is <see cref="T:GraphQL.Conversion.CamelCaseNameConverter"/>.<br/>
            <br/>
            Introspection fields always use <see cref="T:GraphQL.Conversion.CamelCaseNameConverter"/> regardless of the selected <see cref="T:GraphQL.Conversion.INameConverter"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Conversion.INameConverter.NameForField(System.String,GraphQL.Types.IComplexGraphType)">
            <summary>
            Sanitizes a field name for a specified parent graph type; returns the updated field name
            </summary>
        </member>
        <member name="M:GraphQL.Conversion.INameConverter.NameForArgument(System.String,GraphQL.Types.IComplexGraphType,GraphQL.Types.FieldType)">
            <summary>
            Sanitizes an argument name for a specified parent graph type and field definition; returns the updated field name
            </summary>
        </member>
        <member name="T:GraphQL.Conversion.PascalCaseNameConverter">
            <summary>
            PascalCase name converter.
            </summary>
        </member>
        <member name="F:GraphQL.Conversion.PascalCaseNameConverter.Instance">
            <summary>
            Static instance of <see cref="T:GraphQL.Conversion.PascalCaseNameConverter"/> that can be reused instead of creating new.
            </summary>
        </member>
        <member name="M:GraphQL.Conversion.PascalCaseNameConverter.NameForField(System.String,GraphQL.Types.IComplexGraphType)">
            <summary>
            Returns the field name converted to PascalCase.
            </summary>
        </member>
        <member name="M:GraphQL.Conversion.PascalCaseNameConverter.NameForArgument(System.String,GraphQL.Types.IComplexGraphType,GraphQL.Types.FieldType)">
            <summary>
            Returns the argument name converted to PascalCase.
            </summary>
        </member>
        <member name="T:GraphQL.ValueConverter">
            <summary>
            This class provides value conversions between objects of different types.
            Conversions are registered in a static thread safe dictionary and are used for all schemas in the application.
            <br/><br/>
            Each ScalarGraphType calls <see cref="M:GraphQL.ValueConverter.ConvertTo(System.Object,System.Type)">ConvertTo</see> method to return correct value
            type from its <see cref="M:GraphQL.Types.ScalarGraphType.ParseValue(System.Object)">ParseValue</see> method.
            Also conversions may be useful in advanced <see cref="M:GraphQL.ResolveFieldContextExtensions.GetArgument``1(GraphQL.IResolveFieldContext,System.String,``0)">GetArgument</see>
            use cases when deserialization from the values dictionary to the complex input argument is required.
            </summary>
        </member>
        <member name="M:GraphQL.ValueConverter.#cctor">
            <summary>
            Register built-in conversions. This list is expected to grow over time.
            </summary>
        </member>
        <member name="M:GraphQL.ValueConverter.ConvertTo``1(System.Object)">
            <summary>
            <para>Returns an object of the specified type and whose value is equivalent to the specified object.</para>
            <para>Throws a <see cref="T:System.InvalidOperationException"/> if there is no conversion registered; conversion functions may throw other exceptions</para>
            </summary>
        </member>
        <member name="M:GraphQL.ValueConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            <para>Returns an object of the specified type and whose value is equivalent to the specified object.</para>
            <para>Throws a <see cref="T:System.InvalidOperationException"/> if there is no conversion registered; conversion functions may throw other exceptions</para>
            </summary>
        </member>
        <member name="M:GraphQL.ValueConverter.TryConvertTo(System.Object,System.Type,System.Object@,System.Type)">
            <summary>
            <para>
            If a conversion delegate was registered, converts an object to the specified type and
            returns <see langword="true"/>; returns <see langword="false"/> if no conversion delegate is registered.
            </para>
            <para>Conversion delegates may throw exceptions if the conversion was unsuccessful</para>
            </summary>
        </member>
        <member name="M:GraphQL.ValueConverter.GetConversion(System.Type,System.Type)">
            <summary>
            Returns the conversion delegate registered to convert objects of type <paramref name="valueType"/>
            to type <paramref name="targetType"/>, if any.
            </summary>
            <param name="valueType">Type of original values.</param>
            <param name="targetType">Converted value type.</param>
            <returns>The conversion delegate if it is present, <see langword="null"/> otherwise.</returns>
        </member>
        <member name="M:GraphQL.ValueConverter.Register(System.Type,System.Type,System.Func{System.Object,System.Object})">
            <summary>
            Allows you to register your own conversion delegate from one type to another.
            <br/><br/>
            If the conversion from valueType to targetType is already registered, then it will be overwritten.
            </summary>
            <param name="valueType">Type of original value.</param>
            <param name="targetType">Converted value type.</param>
            <param name="conversion">Conversion delegate; <see langword="null"/> for unregister already registered conversion.</param>
        </member>
        <member name="M:GraphQL.ValueConverter.Register``2(System.Func{``0,``1})">
            <summary>
            Allows you to register your own conversion delegate from one type to another.
            <br/><br/>
            If the conversion from TSource to TTarget is already registered, then it will be overwritten.
            </summary>
            <typeparam name="TSource">Type of original value.</typeparam>
            <typeparam name="TTarget">Converted value type.</typeparam>
            <param name="conversion">Conversion delegate; <see langword="null"/> for unregister already registered conversion.</param>
        </member>
        <member name="M:GraphQL.ValueConverter.Register``1(System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},``0})">
            <summary>
            Allows you to register your own conversion delegate from dictionary to some complex object.
            <br/><br/>
            This method may be useful in advanced <see cref="M:GraphQL.ResolveFieldContextExtensions.GetArgument``1(GraphQL.IResolveFieldContext,System.String,``0)">GetArgument</see>
            use cases when deserialization from the values dictionary to the complex input argument is required.
            <br/><br/>
            If the conversion from dictionary to TTarget is already registered, then it will be overwritten.
            </summary>
            <typeparam name="TTarget">Converted value type.</typeparam>
            <param name="conversion">Conversion delegate; <see langword="null"/> for unregister already registered conversion.</param>
        </member>
        <member name="T:GraphQL.DataLoader.IDataLoaderResult`1">
            <summary>
            Represents a pending operation that can return a value
            </summary>
            <typeparam name="T">The type of value that is returned</typeparam>
        </member>
        <member name="M:GraphQL.DataLoader.IDataLoaderResult`1.GetResultAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the loader if it has not yet been executed; then returns the result
            </summary>
            <param name="cancellationToken">Optional <seealso cref="T:System.Threading.CancellationToken"/> to pass to fetch delegate</param>
        </member>
        <member name="T:GraphQL.DataLoader.IDataLoaderResult">
            <summary>
            Represents a pending operation that can return a value
            </summary>
        </member>
        <member name="M:GraphQL.DataLoader.IDataLoaderResult.GetResultAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the loader if it has not yet been executed; then returns the result
            </summary>
            <param name="cancellationToken">Optional <seealso cref="T:System.Threading.CancellationToken"/> to pass to fetch delegate</param>
        </member>
        <member name="T:GraphQL.DI.GraphQLBuilderBase">
            <summary>
            Base implementation of <see cref="T:GraphQL.DI.IGraphQLBuilder"/>.
            </summary>
        </member>
        <member name="M:GraphQL.DI.GraphQLBuilderBase.RegisterDefaultServices">
            <summary>
            Register the default services required by GraphQL if they have not already been registered.
            Includes graph types required for connection builders (GraphQL Relay) and generic graph types
            such as <see cref="T:GraphQL.Types.EnumerationGraphType`1"/> and <see cref="T:GraphQL.Types.AutoRegisteringObjectGraphType`1"/>.
            <br/><br/>
            Does not include <see cref="T:GraphQL.IGraphQLSerializer"/>, and the default <see cref="T:GraphQL.IDocumentExecuter"/>
            implementation does not support subscriptions.
            </summary>
        </member>
        <member name="P:GraphQL.DI.GraphQLBuilderBase.Services">
            <inheritdoc />
        </member>
        <member name="T:GraphQL.DI.IConfigureExecution">
            <summary>
            Allows configuration of document execution, adding or replacing default behavior.
            This configuration generally happens in <see cref="M:GraphQL.IDocumentExecuter.ExecuteAsync(GraphQL.ExecutionOptions)" /> implementations.
            </summary>
        </member>
        <member name="M:GraphQL.DI.IConfigureExecution.ExecuteAsync(GraphQL.ExecutionOptions,GraphQL.DI.ExecutionDelegate)">
            <summary>
            Called when the document begins executing, passing in a delegate to continue execution.
            </summary>
            <remarks>
            <see cref="P:GraphQL.ExecutionOptions.RequestServices"/> can be used to resolve other services from the dependency injection framework.
            </remarks>
        </member>
        <member name="P:GraphQL.DI.IConfigureExecution.SortOrder">
            <summary>
            Determines the order of the registered <see cref="T:GraphQL.DI.IConfigureExecution"/> instances;
            the lowest order executes first; instances with the same value execute in the same
            order they were registered, assuming the dependency injection provider returns
            instances in the order they were registered.
            <para>
            The default sort order of configurations are as follows:
            </para>
            <list type="bullet">
            <item>100: Option configurations -- 'Add' calls such as <see cref="M:GraphQL.GraphQLBuilderExtensions.AddValidationRule``1(GraphQL.DI.IGraphQLBuilder,System.Boolean)">AddValidationRule</see>, and <see cref="M:GraphQL.GraphQLBuilderExtensions.ConfigureExecutionOptions(GraphQL.DI.IGraphQLBuilder,System.Action{GraphQL.ExecutionOptions})">ConfigureExecutionOptions</see> calls</item>
            <item>200: Execution configurations -- 'Use' calls such as <see cref="M:GraphQL.GraphQLBuilderExtensions.UseApolloTracing(GraphQL.DI.IGraphQLBuilder,System.Boolean)">UseApolloTracing</see>, and <see cref="M:GraphQL.GraphQLBuilderExtensions.ConfigureExecution(GraphQL.DI.IGraphQLBuilder,System.Func{GraphQL.ExecutionOptions,GraphQL.DI.ExecutionDelegate,System.Threading.Tasks.Task{GraphQL.ExecutionResult}})">ConfigureExecution</see> calls</item>
            </list>
            </summary>
        </member>
        <member name="T:GraphQL.DI.ExecutionDelegate">
            <summary>
            A function that can process a GraphQL document.
            </summary>
        </member>
        <member name="T:GraphQL.DI.IConfigureSchema">
            <summary>
            Allows configuration of a schema prior to the code in its constructor.
            <br/><br/>
            Typically executes during the <see cref="T:GraphQL.Types.Schema"/> constructor,
            which executes prior to any descendant classes' constructors.
            </summary>
        </member>
        <member name="M:GraphQL.DI.IConfigureSchema.Configure(GraphQL.Types.ISchema,System.IServiceProvider)">
            <summary>
            Configures a schema prior to the code in its constructor.
            <br/><br/>
            Specifically, typically executes during the <see cref="T:GraphQL.Types.Schema"/> constructor,
            which executes prior to any descendant classes' constructors.
            </summary>
        </member>
        <member name="T:GraphQL.DI.IGraphQLBuilder">
            <summary>
            An interface for configuring GraphQL.NET services.
            </summary>
        </member>
        <member name="P:GraphQL.DI.IGraphQLBuilder.Services">
            <summary>
            Provides an interface for registering services with the dependency injection provider.
            </summary>
        </member>
        <member name="T:GraphQL.DI.IServiceRegister">
            <summary>
            An interface for registering services with the dependency injection provider.
            </summary>
        </member>
        <member name="M:GraphQL.DI.IServiceRegister.Register(System.Type,System.Type,GraphQL.DI.ServiceLifetime,System.Boolean)">
            <summary>
            Registers the service of type <paramref name="serviceType"/> with the dependency injection provider.
            Optionally removes any existing implementation of the same service type.
            When not replacing existing registrations, requesting the service type should return the most recent registration,
            and requesting an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the service type should return all of the registrations.
            </summary>
        </member>
        <member name="M:GraphQL.DI.IServiceRegister.Register(System.Type,System.Func{System.IServiceProvider,System.Object},GraphQL.DI.ServiceLifetime,System.Boolean)">
            <inheritdoc cref="M:GraphQL.DI.IServiceRegister.Register(System.Type,System.Type,GraphQL.DI.ServiceLifetime,System.Boolean)"/>
        </member>
        <member name="M:GraphQL.DI.IServiceRegister.Register(System.Type,System.Object,System.Boolean)">
            <inheritdoc cref="M:GraphQL.DI.IServiceRegister.Register(System.Type,System.Type,GraphQL.DI.ServiceLifetime,System.Boolean)"/>
        </member>
        <member name="M:GraphQL.DI.IServiceRegister.TryRegister(System.Type,System.Type,GraphQL.DI.ServiceLifetime,GraphQL.DI.RegistrationCompareMode)">
            <summary>
            Registers the service of type <paramref name="serviceType"/> with the dependency
            injection provider if a service of the same type (and of the same implementation type
            in case of <see cref="F:GraphQL.DI.RegistrationCompareMode.ServiceTypeAndImplementationType"/>)
            has not already been registered.
            </summary>
        </member>
        <member name="M:GraphQL.DI.IServiceRegister.TryRegister(System.Type,System.Func{System.IServiceProvider,System.Object},GraphQL.DI.ServiceLifetime,GraphQL.DI.RegistrationCompareMode)">
            <summary>
            Registers the service of type <paramref name="serviceType"/> with the dependency
            injection provider if a service of the same type (and of the same implementation type
            in case of <see cref="F:GraphQL.DI.RegistrationCompareMode.ServiceTypeAndImplementationType"/>)
            has not already been registered.
            <br/><br/>
            With <see cref="F:GraphQL.DI.RegistrationCompareMode.ServiceTypeAndImplementationType"/>, it is required
            that <paramref name="implementationFactory"/> is a strongly typed delegate with a return type
            of a specific implementation type.
            </summary>
        </member>
        <member name="M:GraphQL.DI.IServiceRegister.TryRegister(System.Type,System.Object,GraphQL.DI.RegistrationCompareMode)">
            <inheritdoc cref="M:GraphQL.DI.IServiceRegister.TryRegister(System.Type,System.Type,GraphQL.DI.ServiceLifetime,GraphQL.DI.RegistrationCompareMode)"/>
        </member>
        <member name="M:GraphQL.DI.IServiceRegister.Configure``1(System.Action{``0,System.IServiceProvider})">
            <summary>
            Configures an options class of type <typeparamref name="TOptions"/>. Each registration call to this method
            will be applied to instance of <typeparamref name="TOptions"/> returned from the DI engine.
            <br/><br/>
            If <paramref name="action"/> is <see langword="null"/> then <typeparamref name="TOptions"/> is still configured and
            will return a default instance (unless otherwise configured with a subsequent call to <see cref="M:GraphQL.DI.IServiceRegister.Configure``1(System.Action{``0,System.IServiceProvider})">Configure</see>).
            </summary>
        </member>
        <member name="T:GraphQL.DI.RegistrationCompareMode">
            <summary>
            Comparison mode used for <see cref="M:GraphQL.DI.IServiceRegister.TryRegister(System.Type,System.Type,GraphQL.DI.ServiceLifetime,GraphQL.DI.RegistrationCompareMode)">IServiceRegister.TryRegister</see>
            methods.
            </summary>
        </member>
        <member name="F:GraphQL.DI.RegistrationCompareMode.ServiceType">
            <summary>
            Registers the service with the dependency injection provider
            if a service of the same service type has not already been registered.
            </summary>
        </member>
        <member name="F:GraphQL.DI.RegistrationCompareMode.ServiceTypeAndImplementationType">
            <summary>
            Registers the service with the dependency injection provider
            if a service of the same service type and same implementation type
            has not already been registered.
            </summary>
        </member>
        <member name="T:GraphQL.DI.ServiceLifetime">
            <summary>
            Specifies the lifetime of a service.
            </summary>
        </member>
        <member name="F:GraphQL.DI.ServiceLifetime.Singleton">
            <summary>
            Specifies that a single instance of the service will be created.
            </summary>
        </member>
        <member name="F:GraphQL.DI.ServiceLifetime.Scoped">
            <summary>
            Specifies that a new instance of the service will be created for each scope.
            </summary>
            <remarks>
            In ASP.NET Core applications a scope is created around each server request.
            </remarks>
        </member>
        <member name="F:GraphQL.DI.ServiceLifetime.Transient">
            <summary>
            Specifies that a new instance of the service will be created every time it is requested.
            </summary>
        </member>
        <member name="T:GraphQL.DefaultServiceProvider">
            <summary>
            Activator.CreateInstance based service provider.
            </summary>
            <seealso cref="T:System.IServiceProvider" />
        </member>
        <member name="M:GraphQL.DefaultServiceProvider.GetService(System.Type)">
            <summary>
            Gets an instance of the specified type. Returns <see langword="null"/> for interfaces.
            Can not return <see langword="null"/> for classes but may throw exception.
            </summary>
            <param name="serviceType">Desired type</param>
            <returns>An instance of <paramref name="serviceType"/>.</returns>
        </member>
        <member name="T:GraphQL.FuncServiceProvider">
            <summary>
            Func based service provider.
            </summary>
            <seealso cref="T:System.IServiceProvider" />
            <remarks>This is mainly used as an adapter for other service providers such as DI frameworks.</remarks>
        </member>
        <member name="M:GraphQL.FuncServiceProvider.#ctor(System.Func{System.Type,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.FuncServiceProvider"/> class.
            </summary>
            <param name="resolver">The resolver function.</param>
        </member>
        <member name="M:GraphQL.FuncServiceProvider.GetService(System.Type)">
            <summary>
            Gets an instance of the specified type. May return <see langword="null"/>. Also you can use GetRequiredService extension method.
            </summary>
            <param name="type">Desired type</param>
        </member>
        <member name="T:GraphQL.Execution.ArgumentValue">
            <summary>
            Represents the value of an argument.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ArgumentValue.NullLiteral">
            <summary>
            Returns an instance of this struct containing a <see langword="null"/> value supplied as a literal.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ArgumentValue.NullVariable">
            <summary>
            Returns an instance of this struct containing a <see langword="null"/> value supplied as a variable.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ArgumentValue.#ctor(System.Object,GraphQL.Execution.ArgumentSource)">
            <summary>
            Initializes a new instance with the specified values.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ArgumentValue.Value">
            <summary>
            Returns the value of the argument.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ArgumentValue.Source">
            <summary>
            Returns a value indicating the source of the argument's value.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.ArgumentSource">
            <summary>
            The source of an argument's value.
            </summary>
        </member>
        <member name="F:GraphQL.Execution.ArgumentSource.FieldDefault">
            <summary>
            The field default value.
            </summary>
        </member>
        <member name="F:GraphQL.Execution.ArgumentSource.Literal">
            <summary>
            A literal value supplied for the argument.
            </summary>
        </member>
        <member name="F:GraphQL.Execution.ArgumentSource.Variable">
            <summary>
            A variable referenced by the argument.
            </summary>
        </member>
        <member name="F:GraphQL.Execution.ArgumentSource.VariableDefault">
            <summary>
            A default value for a variable referenced by the argument.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.DefaultExecutionStrategySelector">
            <inheritdoc cref="T:GraphQL.Execution.IExecutionStrategySelector"/>
        </member>
        <member name="M:GraphQL.Execution.DefaultExecutionStrategySelector.#ctor">
            <summary>
            Initializes an instance that only returns the default registrations;
            <see cref="T:GraphQL.Execution.ParallelExecutionStrategy"/> for <see cref="F:GraphQLParser.AST.OperationType.Query"/> and
            <see cref="T:GraphQL.Execution.SerialExecutionStrategy"/> for <see cref="F:GraphQLParser.AST.OperationType.Mutation"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.DefaultExecutionStrategySelector.#ctor(System.Collections.Generic.IEnumerable{GraphQL.Execution.ExecutionStrategyRegistration})">
            <summary>
            Initializes a new instance with the specified registrations.
            If no registration is specified for <see cref="F:GraphQLParser.AST.OperationType.Query"/>, returns <see cref="T:GraphQL.Execution.ParallelExecutionStrategy"/>.
            If no registration is specified for <see cref="F:GraphQLParser.AST.OperationType.Mutation"/>, returns <see cref="T:GraphQL.Execution.SerialExecutionStrategy"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.DefaultExecutionStrategySelector.Select(GraphQL.Execution.ExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Execution.DirectiveInfo">
            <summary>
            Represents information about directive that has been provided in the GraphQL query request.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.DirectiveInfo.#ctor(GraphQL.Types.Directive,System.Collections.Generic.IDictionary{System.String,GraphQL.Execution.ArgumentValue})">
            <summary>
            Creates an instance of <see cref="T:GraphQL.Execution.DirectiveInfo"/> with the specified
            directive definition and directive arguments.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.DirectiveInfo.Directive">
            <summary>
            Directive definition.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.DirectiveInfo.Arguments">
            <summary>
            Dictionary of directive arguments.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.DirectiveInfo.GetArgument``1(System.String,``0)">
            <summary>
            Returns the value of the specified directive argument, or <paramref name="defaultValue"/> when
            unspecified. Variable default values take precedence over the <paramref name="defaultValue"/> parameter.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.DirectiveInfo.GetArgument(System.Type,System.String,System.Object)">
            <inheritdoc cref="M:GraphQL.Execution.DirectiveInfo.GetArgument``1(System.String,``0)"/>
        </member>
        <member name="T:GraphQL.Execution.IDocumentExecutionListener">
            <summary>
            Provides the ability to log query validation failures and monitor progress of a GraphQL request's execution.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.IDocumentExecutionListener.AfterValidationAsync(GraphQL.Execution.IExecutionContext,GraphQL.Validation.IValidationResult)">
            <summary>Executes after document validation is complete. Can be used to log validation failures.</summary>
        </member>
        <member name="M:GraphQL.Execution.IDocumentExecutionListener.BeforeExecutionAsync(GraphQL.Execution.IExecutionContext)">
            <summary>Executes after document validation passes, before calling <see cref="M:GraphQL.Execution.IExecutionStrategy.ExecuteAsync(GraphQL.Execution.ExecutionContext)"/>.</summary>
        </member>
        <member name="M:GraphQL.Execution.IDocumentExecutionListener.AfterExecutionAsync(GraphQL.Execution.IExecutionContext)">
            <summary>Executes after the <see cref="T:GraphQL.Execution.IExecutionStrategy"/> has completed executing the request</summary>
        </member>
        <member name="T:GraphQL.Execution.DocumentExecutionListenerBase">
            <inheritdoc cref="T:GraphQL.Execution.IDocumentExecutionListener"/>
        </member>
        <member name="M:GraphQL.Execution.DocumentExecutionListenerBase.AfterValidationAsync(GraphQL.Execution.IExecutionContext,GraphQL.Validation.IValidationResult)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Execution.DocumentExecutionListenerBase.BeforeExecutionAsync(GraphQL.Execution.IExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Execution.DocumentExecutionListenerBase.AfterExecutionAsync(GraphQL.Execution.IExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Execution.ErrorInfo">
            <summary>
            Represents the fields of a GraphQL error entry. See https://spec.graphql.org/October2021/#sec-Errors
            </summary>
        </member>
        <member name="F:GraphQL.Execution.ErrorInfo.Message">
            <summary>
            A description of the error intended for the developer as a guide to understand and correct the error
            </summary>
        </member>
        <member name="F:GraphQL.Execution.ErrorInfo.Extensions">
            <summary>
            This entry, if set, must have a map as its value. This entry is reserved for implementors to add additional
            information to errors however they see fit, and there are no additional restrictions on its contents.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.ErrorInfoProvider">
            <inheritdoc cref="T:GraphQL.Execution.IErrorInfoProvider"/>
        </member>
        <member name="M:GraphQL.Execution.ErrorInfoProvider.#ctor">
            <summary>
            Initializes an <see cref="T:GraphQL.Execution.ErrorInfoProvider"/> with a default set of <see cref="T:GraphQL.Execution.ErrorInfoProviderOptions"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ErrorInfoProvider.#ctor(GraphQL.Execution.ErrorInfoProviderOptions)">
            <summary>
            Initializes an <see cref="T:GraphQL.Execution.ErrorInfoProvider"/> with a specified set of <see cref="T:GraphQL.Execution.ErrorInfoProviderOptions"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ErrorInfoProvider.#ctor(System.Action{GraphQL.Execution.ErrorInfoProviderOptions})">
            <summary>
            Initializes an <see cref="T:GraphQL.Execution.ErrorInfoProvider"/> with a set of <see cref="T:GraphQL.Execution.ErrorInfoProviderOptions"/> filled out by the specified delegate.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ErrorInfoProvider.GetInfo(GraphQL.ExecutionError)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Execution.ErrorInfoProvider.GetCodesForError(GraphQL.ExecutionError)">
            <summary>
            <para>Returns a list of error codes derived from a specified <see cref="T:GraphQL.ExecutionError"/> instance.</para>
            <para>
            By default, this returns the <see cref="P:GraphQL.ExecutionError.Code"/> value if set, along with
            codes generated from the type of the <see cref="P:System.Exception.InnerException"/> and all their inner exceptions.
            </para>
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ErrorInfoProvider.GetErrorCode(System.Type)">
            <summary>
            Generates an normalized error code for the specified exception by taking the type name, removing the "GraphQL" prefix, if any,
            removing the "Exception" suffix, if any, and then converting the result from PascalCase to UPPER_CASE.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ErrorInfoProvider.GetErrorCode``1">
            <summary>
            Generates an normalized error code for the specified exception by taking the type name, removing the "GraphQL" prefix, if any,
            removing the "Exception" suffix, if any, and then converting the result from PascalCase to UPPER_CASE.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ErrorInfoProvider.GetErrorCode(System.Exception)">
            <summary>
            Generates an normalized error code for the specified exception by taking the type name, removing the "GraphQL" prefix, if any,
            removing the "Exception" suffix, if any, and then converting the result from PascalCase to UPPER_CASE.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.ErrorInfoProviderOptions">
            <summary>
            Provides options to be used with <see cref="T:GraphQL.Execution.ErrorInfoProvider"/>
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ErrorInfoProviderOptions.ExposeExceptionStackTrace">
            <summary>
            Specifies whether stack traces should be serialized.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ErrorInfoProviderOptions.ExposeExceptionDetails">
            <summary>
            Specifies whether detailed exception information (exception types, stack traces, inner exceptions)
            should be serialized.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ErrorInfoProviderOptions.ExposeExceptionDetailsMode">
            <inheritdoc cref="T:GraphQL.Execution.ExposeExceptionDetailsMode"/>
        </member>
        <member name="P:GraphQL.Execution.ErrorInfoProviderOptions.ExposeExtensions">
            <summary>
            Specifies whether the extensions property, including by default the 'code',
            'codes', 'data' and 'details' properties, should be serialized.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ErrorInfoProviderOptions.ExposeCode">
            <summary>
            Specifies whether the code of this error should be returned.
            For validation errors, also returns the <see cref="P:GraphQL.Validation.ValidationError.Number"/>.
            Not applicable when <see cref="P:GraphQL.Execution.ErrorInfoProviderOptions.ExposeExtensions"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ErrorInfoProviderOptions.ExposeCodes">
            <summary>
            Specifies whether the codes of this error and inner exceptions should be returned.
            Not applicable when <see cref="P:GraphQL.Execution.ErrorInfoProviderOptions.ExposeExtensions"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ErrorInfoProviderOptions.ExposeData">
            <summary>
            Specifies whether data (typically from inner exceptions) should be returned.
            Not applicable when <see cref="P:GraphQL.Execution.ErrorInfoProviderOptions.ExposeExtensions"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.ExposeExceptionDetailsMode">
            <summary>
            Mode to control location of exception details.
            </summary>
        </member>
        <member name="F:GraphQL.Execution.ExposeExceptionDetailsMode.Message">
            <summary>
            Exception details are located along with exception message.
            </summary>
        </member>
        <member name="F:GraphQL.Execution.ExposeExceptionDetailsMode.Extensions">
            <summary>
            Exception details are located within "extensions.details" separately from exception message itself.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.DocumentError">
            <summary>
            Represents an error generated while parsing or validating the document or its associated variables.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.DocumentError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Execution.DocumentError"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.DocumentError.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Execution.DocumentError"/> class with a specified
            error message and inner exception. Sets the <see cref="P:GraphQL.ExecutionError.Code">Code</see>
            property based on the inner exception. Loads any exception data from the inner exception
            into this instance.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.InvalidOperationError">
            <summary>
            Represents an error triggered by an invalid operation being requested that is not configured for the schema.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.InvalidOperationError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Execution.InvalidOperationError"/> class with a specified error message.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.NoOperationError">
            <summary>
            Represents an error triggered when the document does not include any operations.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.NoOperationError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Execution.NoOperationError"/> class.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.QueryMissingError">
            <summary>
            Represents an error indicating that no GraphQL query was provided to the request.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.QueryMissingError.#ctor">
            <inheritdoc cref="T:GraphQL.Execution.QueryMissingError"/>
        </member>
        <member name="T:GraphQL.Execution.RequestError">
            <summary>
            Represents an error that occurred prior to the execution of the GraphQL request.
            This refers to any errors that arise before passing the request inside the GraphQL engine, that is, even before its validation.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.RequestError.#ctor(System.String)">
            <summary>
            Initializes an instance with the specified message.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.RequestError.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an instance with the specified message and inner exception.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.SyntaxError">
            <summary>
            Represents an error generated while parsing the document.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.SyntaxError.#ctor(GraphQLParser.Exceptions.GraphQLSyntaxErrorException)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Execution.SyntaxError"/> class from a specified
            <see cref="T:GraphQLParser.Exceptions.GraphQLSyntaxErrorException"/> instance, setting the <see cref="P:System.Exception.Message">Message</see>
            and <see cref="P:GraphQL.ExecutionError.Locations">Locations</see> properties appropriately.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.UnhandledError">
            <summary>
            Represents an unhandled exception caught during document or subscription processing.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.UnhandledError.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Execution.UnhandledError"/> class with a specified error message. Sets the
            <see cref="P:GraphQL.ExecutionError.Code">Code</see> property based on the inner exception.
            Loads any exception data from the inner exception into this instance.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.ExecutionContext">
            <summary>
            Provides a mutable instance of <see cref="T:GraphQL.Execution.IExecutionContext"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionContext.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionContext.#ctor(GraphQL.Execution.ExecutionContext)">
            <summary>
            Clones reusable state information from an existing instance; not any properties that
            hold result information. Specifically, <see cref="P:GraphQL.Execution.ExecutionContext.Errors"/>, <see cref="P:GraphQL.Execution.ExecutionContext.Metrics"/>,
            <see cref="P:GraphQL.Execution.ExecutionContext.OutputExtensions"/>, array pool reservations and internal reusable references
            are not cloned.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.ExecutionStrategy">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.Document">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.Schema">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.RootValue">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.UserContext">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.Operation">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.Variables">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.Errors">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.CancellationToken">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.Metrics">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.Listeners">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.ThrowOnUnhandledException">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.UnhandledExceptionDelegate">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.MaxParallelExecutionCount">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.InputExtensions">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.OutputExtensions">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.RequestServices">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ExecutionContext.User">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Execution.ExecutionContext.Rent``1(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Execution.ExecutionContext.Dispose">
            <summary>
            Clears all state in this context.
            Releases any rented arrays back to the backing memory pool.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionContext.ClearContext">
            <summary>
            Clears all state in this context including any rented arrays.
            </summary>
        </member>
        <member name="F:GraphQL.Execution.ExecutionContext.ReusableReadonlyResolveFieldContext">
            <summary>
            Allows for an execution strategy to reuse an instance of <see cref="T:GraphQL.ReadonlyResolveFieldContext"/>.
            This field may be accessed by multiple threads at the same time, so
            access is restricted to <see cref="M:System.Threading.Interlocked.Exchange``1(``0@,``0)"/>
            and <see cref="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)"/>.
            </summary>
        </member>
        <member name="F:GraphQL.Execution.ExecutionContext.ReusableFields">
            <summary>
            Allows for an execution strategy to reuse an instance of <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            This field may be accessed by multiple threads at the same time, so
            access is restricted to <see cref="M:System.Threading.Interlocked.Exchange``1(``0@,``0)"/>
            and <see cref="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)"/>.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.ExecutionHelper">
            <summary>
            Provides helper methods for document execution.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionHelper.GetDirectives(GraphQLParser.AST.GraphQLField,GraphQL.Validation.Variables,GraphQL.Types.ISchema)">
            <summary>
            Returns a dictionary of directives with their arguments values for a field.
            Values will be retrieved from literals or variables as specified by the document.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionHelper.GetArguments(GraphQL.Types.QueryArguments,GraphQLParser.AST.GraphQLArguments,GraphQL.Validation.Variables)">
            <summary>
            Returns a dictionary of arguments and their values for a field or directive.
            Values will be retrieved from literals or variables as specified by the document.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionHelper.CoerceValue(GraphQL.Types.IGraphType,GraphQLParser.AST.GraphQLValue,GraphQL.Validation.Variables,System.Object)">
            <summary>
            Coerces a literal value to a compatible .NET type for the variable's graph type.
            Typically this is a value for a field argument or default value for a variable.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.ExecutionStrategy">
            <summary>
            The base class for the included serial and parallel execution strategies.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.ExecuteAsync(GraphQL.Execution.ExecutionContext)">
            <summary>
            Executes a GraphQL request and returns the result. The default implementation builds the root node
            and passes execution to <see cref="M:GraphQL.Execution.ExecutionStrategy.ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)"/>.
            Once complete, the values are collected into an object that is ready to be serialized and returned
            within an <see cref="T:GraphQL.ExecutionResult"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.GetOperationRootType(GraphQL.Execution.ExecutionContext)">
            <summary>
            Returns the root graph type for the execution -- for a specified schema and operation type.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.BuildExecutionRootNode(GraphQL.Execution.ExecutionContext,GraphQL.Types.IObjectGraphType)">
            <summary>
            Builds the root execution node.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.BuildExecutionNode(GraphQL.Execution.ExecutionNode,GraphQL.Types.IGraphType,GraphQLParser.AST.GraphQLField,GraphQL.Types.FieldType,System.Nullable{System.Int32})">
            <summary>
            Builds an execution node with the specified parameters.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.ShouldIncludeNode(GraphQL.Execution.ExecutionContext,GraphQLParser.AST.IHasDirectivesNode)">
            <summary>
            Examines @skip and @include directives for a node and returns a value indicating if the node should be included or not.
            <br/><br/>
            Note: Neither @skip nor @include has precedence over the other. In the case that both the @skip and @include
            directives are provided on the same field or fragment, it must be queried only if the @skip condition
            is <see langword="false"/> and the @include condition is <see langword="true"/>. Stated conversely, the field or
            fragment must not be queried if either the @skip condition is <see langword="true"/> or the @include condition is <see langword="false"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.SetSubFieldNodes(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ObjectExecutionNode)">
            <summary>
            Creates execution nodes for child fields of an object execution node. Only run if
            the object execution node result is not <see langword="null"/> or object execution
            node is <see cref="T:GraphQL.Execution.RootExecutionNode"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.GetFieldDefinition(GraphQL.Types.ISchema,GraphQL.Types.IComplexGraphType,GraphQLParser.AST.GraphQLField)">
            <summary>
            Returns a <see cref="T:GraphQL.Types.FieldType"/> for the specified AST <see cref="T:GraphQLParser.AST.GraphQLField"/> within a specified parent
            output graph type within a given schema. For meta-fields, returns the proper meta-field field type.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.GetSubFields(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.CollectFieldsFrom(GraphQL.Execution.ExecutionContext,GraphQL.Types.IGraphType,GraphQLParser.AST.GraphQLSelectionSet,System.Collections.Generic.Dictionary{System.String,System.ValueTuple{GraphQLParser.AST.GraphQLField,GraphQL.Types.FieldType}})">
            <summary>
            Before execution, the selection set is converted to a grouped field set by calling CollectFields().
            Each entry in the grouped field set is a list of fields that share a response key (the alias if defined,
            otherwise the field name). This ensures all fields with the same response key included via referenced
            fragments are executed at the same time.
            <br/><br/>
            <see href="https://spec.graphql.org/October2021/#sec-Field-Collection"/> and <see href="https://spec.graphql.org/October2021/#CollectFields()"/>
            </summary>
            <param name="context">The execution context.</param>
            <param name="specificType">The graph type to compare the selection set against. May be <see langword="null"/> for root execution node.</param>
            <param name="selectionSet">The selection set from the document.</param>
            <param name="fields">A dictionary to append the collected list of fields to; if <see langword="null"/>, a new dictionary will be created.</param>
            <returns>A list of collected fields</returns>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.DoesFragmentConditionMatch(GraphQL.Execution.ExecutionContext,GraphQLParser.ROM,GraphQL.Types.IGraphType)">
            <summary>
            This method calculates the criterion for matching fragment definition (spread or inline) to a given graph type.
            This criterion determines the need to fill the resulting selection set with fields from such a fragment.
            <br/><br/>
            <see href="https://spec.graphql.org/October2021/#DoesFragmentTypeApply()"/>
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.SetArrayItemNodesAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ArrayExecutionNode)">
            <summary>
            Creates execution nodes for array elements of an array execution node. Only run if
            the array execution node result is not <see langword="null"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.SelectResolver(GraphQL.Execution.ExecutionNode,GraphQL.Execution.ExecutionContext)">
            <summary>
            Selects resolver for the specified execution node. By default returns resolver from
            <see cref="P:GraphQL.Execution.ExecutionNode.FieldDefinition"/> if specified. Otherwise returns
            <see cref="P:GraphQL.Resolvers.SourceFieldResolver.Instance"/> for top level nodes of subscriptions or
            <see cref="P:GraphQL.Resolvers.NameFieldResolver.Instance"/> for all other cases.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.ExecuteNodeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)">
            <summary>
            Executes a single node. If the node does not return an <see cref="T:GraphQL.DataLoader.IDataLoaderResult"/>,
            it will pass execution to <see cref="M:GraphQL.Execution.ExecutionStrategy.CompleteNodeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.CompleteDataLoaderNodeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)">
            <summary>
            Completes a pending data loader node. If the node does not return an <see cref="T:GraphQL.DataLoader.IDataLoaderResult"/>,
            it will pass execution to <see cref="M:GraphQL.Execution.ExecutionStrategy.CompleteNodeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.CompleteNodeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)">
            <summary>
            Validates a node result. Builds child nodes via <see cref="M:GraphQL.Execution.ExecutionStrategy.SetSubFieldNodes(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ObjectExecutionNode)">SetSubFieldNodes</see>
            and <see cref="M:GraphQL.Execution.ExecutionStrategy.SetArrayItemNodesAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ArrayExecutionNode)">SetArrayItemNodes</see>, but does not execute them. For value
            execution nodes, it will run <see cref="M:GraphQL.Types.ScalarGraphType.Serialize(System.Object)"/> to serialize the result.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.SetNodeError(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode,GraphQL.ExecutionError)">
            <summary>
            Sets the location and path information to the error and adds it to the document. Sets the node result to <see langword="null"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.ProcessNodeUnhandledExceptionAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode,System.Exception)">
            <summary>
            Processes unhandled field resolver exceptions.
            </summary>
            <returns>A value that indicates when the exception should be rethrown.</returns>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategy.ValidateNodeResult(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)">
            <summary>
            Validates the <see cref="P:GraphQL.Execution.ExecutionNode.Result"/> to ensure that it is valid for the node.
            Errors typically occur when a null value is returned for a non-null graph type. Also validates the
            object type when <see cref="P:GraphQL.Types.IObjectGraphType.IsTypeOf"/> is assigned, or when the graph type
            is an <see cref="T:GraphQL.Types.IAbstractGraphType"/>.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.ExecutionStrategyRegistration">
            <summary>
            Represents a registration for a specific execution strategy to be used for a specific GraphQL operation type.
            </summary>
            <param name="Strategy">The execution strategy to be used.</param>
            <param name="Operation">The GraphQL operation type the execution strategy applies to.</param>
        </member>
        <member name="M:GraphQL.Execution.ExecutionStrategyRegistration.#ctor(GraphQL.Execution.IExecutionStrategy,GraphQLParser.AST.OperationType)">
            <summary>
            Represents a registration for a specific execution strategy to be used for a specific GraphQL operation type.
            </summary>
            <param name="Strategy">The execution strategy to be used.</param>
            <param name="Operation">The GraphQL operation type the execution strategy applies to.</param>
        </member>
        <member name="P:GraphQL.Execution.ExecutionStrategyRegistration.Strategy">
            <summary>The execution strategy to be used.</summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionStrategyRegistration.Operation">
            <summary>The GraphQL operation type the execution strategy applies to.</summary>
        </member>
        <member name="T:GraphQL.Execution.GraphQLDocumentBuilder">
            <summary>
            <inheritdoc cref="T:GraphQL.Execution.IDocumentBuilder"/>
            <br/><br/>
            Default instance of <see cref="T:GraphQL.Execution.IDocumentBuilder"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.GraphQLDocumentBuilder.IgnoreComments">
            <summary>
            Specifies whether to ignore comments when parsing GraphQL document.
            By default, all comments are ignored.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.GraphQLDocumentBuilder.IgnoreLocations">
            <summary>
            Specifies whether to ignore token locations when parsing GraphQL document.
            By default, all token locations are taken into account.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.GraphQLDocumentBuilder.MaxDepth">
            <summary>
            Maximum allowed recursion depth during parsing.
            Depth is calculated in terms of AST nodes.
            <br/>
            Defaults to 128 if not set.
            Minimum value is 1.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.GraphQLDocumentBuilder.Build(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Execution.IDocumentBuilder">
            <summary>
            Creates a <see cref="T:GraphQLParser.AST.GraphQLDocument">Document</see> representing a GraphQL AST from a plain GraphQL query string
            </summary>
        </member>
        <member name="M:GraphQL.Execution.IDocumentBuilder.Build(System.String)">
            <summary>
            Parse a GraphQL request and return a <see cref="T:GraphQLParser.AST.GraphQLDocument">Document</see> representing the GraphQL request AST
            </summary>
        </member>
        <member name="T:GraphQL.Execution.IErrorInfoProvider">
            <summary>
            Prepares <see cref="T:GraphQL.ExecutionError"/>s for serialization by the <see cref="T:GraphQL.IGraphQLSerializer"/>
            </summary>
        </member>
        <member name="M:GraphQL.Execution.IErrorInfoProvider.GetInfo(GraphQL.ExecutionError)">
            <summary>
            Parses an <see cref="T:GraphQL.ExecutionError"/> into a <see cref="T:GraphQL.Execution.ErrorInfo"/> struct
            </summary>
        </member>
        <member name="T:GraphQL.Execution.IExecutionArrayPool">
            <summary>
            Provides a resource pool of temporary arrays during query execution.
            Can be used to return lists of data from field resolvers.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.IExecutionArrayPool.Rent``1(System.Int32)">
            <summary>
            Gets an array of the specified minimum length from the execution's array pool.
            This array will be returned to the pool once the execution completes. It is
            important that you do not use this array after execution; otherwise its
            contents may be overwritten at any point in time. This method is safe
            for multi-threaded operation.
            </summary>
            <typeparam name="TElement">Array element type.</typeparam>
            <param name="minimumLength">The minimum length of the array.</param>
            <returns>Array from pool.</returns>
        </member>
        <member name="T:GraphQL.Execution.IExecutionContext">
            <summary>
            Provides information regarding the currently executing document.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.ExecutionStrategy">
            <summary>
            Execution strategy for the currently executing document.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.CancellationToken">
            <summary>
            Propagates notification that the GraphQL request should be canceled.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.Document">
            <summary>
            The parsed GraphQL request.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.Errors">
            <summary>
            A list of errors generated during GraphQL request processing.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.Listeners">
            <summary>
            A list of <see cref="T:GraphQL.Execution.IDocumentExecutionListener"/>s, enabling code to be executed at various points during the processing of the GraphQL query.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.MaxParallelExecutionCount">
            <summary>
            If set, limits the maximum number of nodes (in other words GraphQL fields) executed in parallel.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.Metrics">
            <summary>
            Provides performance metrics logging capabilities.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.Operation">
            <summary>
            The GraphQL operation that is being executed.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.RootValue">
            <summary>
            Object to pass to the <see cref="P:GraphQL.IResolveFieldContext.Source"/> property of first-level resolvers.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.Schema">
            <summary>
            Schema of the graph to use.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.ThrowOnUnhandledException">
            <summary>
            When <see langword="false"/>, <see cref="T:GraphQL.DocumentExecuter"/> and <see cref="P:GraphQL.Execution.IExecutionContext.ExecutionStrategy"/> capture unhandled
            exceptions and store them within <see cref="P:GraphQL.Execution.IExecutionContext.Errors">Errors</see>.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.UnhandledExceptionDelegate">
            <summary>
            A delegate that can override, hide, modify, or log unhandled exceptions before they are stored.
            within <see cref="P:GraphQL.Execution.IExecutionContext.Errors"/> as an <see cref="T:GraphQL.ExecutionError"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.Variables">
            <summary>
            Input variables to the GraphQL request.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.InputExtensions">
            <summary>
            A dictionary of extra information supplied with the GraphQL request.
            This is reserved for implementors to extend the protocol however they see fit, and
            hence there are no additional restrictions on its contents.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.OutputExtensions">
            <summary>
            The response map may also contain an entry with key extensions. This entry is
            reserved for implementors to extend the protocol however they see fit, and
            hence there are no additional restrictions on its contents.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.RequestServices">
            <summary>
            The service provider for the executing request. Typically this is a scoped service provider
            from your dependency injection framework.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IExecutionContext.User">
            <summary>
            Gets security information for the executing request.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.IExecutionStrategy">
            <summary>
            Processes a parsed GraphQL request, resolving all the nodes and returning the result; exceptions
            are unhandled. Should not run any <see cref="T:GraphQL.Execution.IDocumentExecutionListener">IDocumentExecutionListener</see>s.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.IExecutionStrategy.ExecuteAsync(GraphQL.Execution.ExecutionContext)">
            <summary>
            Executes a GraphQL request and returns the result
            </summary>
            <param name="context">The execution parameters</param>
        </member>
        <member name="M:GraphQL.Execution.IExecutionStrategy.ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)">
            <summary>
            Executes an execution node and all of its child nodes. This is typically only executed upon
            the root execution node.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.IExecutionStrategy.GetSubFields(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)">
            <summary>
            Returns the children fields for a specified node. Note that this set will be completely defined only for
            fields of a concrete type (i.e. not interface or union field) or when <paramref name="executionNode"/>
            result was set. For interface field this method returns requested fields in terms of this interface. For
            union field this method returns empty set since we don't know the concrete union member if <see cref="P:GraphQL.Execution.ExecutionNode.Result"/>
            was not set yet.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.IExecutionStrategySelector">
            <summary>
            Returns an instance of an <see cref="T:GraphQL.Execution.IExecutionStrategy"/> for a specified <see cref="T:GraphQL.Execution.ExecutionContext"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.IExecutionStrategySelector.Select(GraphQL.Execution.ExecutionContext)">
            <inheritdoc cref="T:GraphQL.Execution.IExecutionStrategySelector"/>
        </member>
        <member name="T:GraphQL.Execution.IProvideUserContext">
            <summary>
            Provides access to a mutable user-defined context for the duration of the query
            </summary>
        </member>
        <member name="P:GraphQL.Execution.IProvideUserContext.UserContext">
            <summary>
            Mutable user-defined context to be passed to and shared by all field resolvers.
            <br/><br/>
            A custom implementation of <see cref="T:System.Collections.Generic.IDictionary`2">IDictionary</see> may be
            used in place of the default <see cref="T:System.Collections.Generic.Dictionary`2">Dictionary</see>.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.ArrayExecutionNode">
            <summary>
            Represents an execution node of a <see cref="T:GraphQL.Types.ListGraphType"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ArrayExecutionNode.Items">
            <summary>
            Returns a list of child execution nodes.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ArrayExecutionNode.#ctor(GraphQL.Execution.ExecutionNode,GraphQL.Types.IGraphType,GraphQLParser.AST.GraphQLField,GraphQL.Types.FieldType,System.Nullable{System.Int32})">
            <summary>
            Initializes an <see cref="T:GraphQL.Execution.ArrayExecutionNode"/> instance with the specified values.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ArrayExecutionNode.ToValue">
            <summary>
            Returns an object array containing the results of the child execution nodes.
            <see cref="M:GraphQL.Execution.ArrayExecutionNode.PropagateNull"/> must be called prior to calling this method.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ArrayExecutionNode.PropagateNull">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Execution.ArrayExecutionNode.ApplyToChildren``1(System.Action{GraphQL.Execution.ExecutionNode,``0},``0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Execution.ExecutionNode">
            <summary>
            Represents a node to be executed.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.Parent">
            <summary>
            Returns the parent node, or <see langword="null"/> if this is the root node.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.GraphType">
            <summary>
            Returns the graph type of this node, unwrapped if it is a <see cref="T:GraphQL.Types.NonNullGraphType"/>.
            Array nodes will be a <see cref="T:GraphQL.Types.ListGraphType"/> instance.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.Field">
            <summary>
            Returns the AST field of this node.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.FieldDefinition">
            <summary>
            Returns the graph's field type of this node.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.IndexInParentNode">
            <summary>
            For child array item nodes of a <see cref="T:GraphQL.Types.ListGraphType"/>, returns the index of this array item within the field; otherwise, <see langword="null"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.ResolvedType">
            <summary>
            Returns the underlying graph type of this node, retaining the <see cref="T:GraphQL.Types.NonNullGraphType"/> wrapping if applicable.
            For child nodes of an array execution node, this property unwraps the <see cref="T:GraphQL.Types.ListGraphType"/> instance and returns
            the underlying graph type, retaining the <see cref="T:GraphQL.Types.NonNullGraphType"/> wrapping if applicable.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.Name">
            <summary>
            Returns the AST field alias, if specified, or AST field name otherwise.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.Result">
            <summary>
            Sets or returns the result of the execution node. May return a <see cref="T:GraphQL.DataLoader.IDataLoaderResult"/> if a node returns a data loader
            result that has not yet finished executing.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.Source">
            <summary>
            Returns the parent node's result.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionNode.#ctor(GraphQL.Execution.ExecutionNode,GraphQL.Types.IGraphType,GraphQLParser.AST.GraphQLField,GraphQL.Types.FieldType,System.Nullable{System.Int32})">
            <summary>
            Initializes an instance of <see cref="T:GraphQL.Execution.ExecutionNode"/> with the specified values
            </summary>
            <param name="parent">The parent node, or <see langword="null"/> if this is the root node</param>
            <param name="graphType">The graph type of this node, unwrapped if it is a <see cref="T:GraphQL.Types.NonNullGraphType"/>. Array nodes will be a <see cref="T:GraphQL.Types.ListGraphType"/> instance.</param>
            <param name="field">The AST field of this node</param>
            <param name="fieldDefinition">The graph's field type of this node</param>
            <param name="indexInParentNode">For child array item nodes of a <see cref="T:GraphQL.Types.ListGraphType"/>, the index of this array item within the field; otherwise, <see langword="null"/></param>
        </member>
        <member name="M:GraphQL.Execution.ExecutionNode.ToValue">
            <summary>
            Returns an object that represents the result of this node.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionNode.PropagateNull">
            <summary>
            Prepares this node and children nodes for serialization. Returns <see langword="true"/> if this node should return <see langword="null"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ExecutionNode.GetParentType(GraphQL.Types.ISchema)">
            <summary>
            Returns the parent graph type of this node.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.Path">
            <summary>
            The path for the current node within the query.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ExecutionNode.ResponsePath">
            <summary>
            The path for the current node within the response.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.IParentExecutionNode">
            <summary>
            Represents an execution node with child nodes.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.IParentExecutionNode.GetChildNodes">
            <summary>
            Returns a list of child execution nodes.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.IParentExecutionNode.ApplyToChildren``1(System.Action{GraphQL.Execution.ExecutionNode,``0},``0,System.Boolean)">
            <summary>
            Applies the specified delegate to child execution nodes.
            </summary>
            <typeparam name="TState">Type of the provided state.</typeparam>
            <param name="action">Delegate to execute on every child node of this node.</param>
            <param name="state">An arbitrary state passed by the caller.</param>
            <param name="reverse">Specifies the direct or reverse direction of child nodes traversal.</param>
        </member>
        <member name="T:GraphQL.Execution.NullExecutionNode">
            <summary>
            Represents an execution node which always returns <see langword="null"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.NullExecutionNode.#ctor(GraphQL.Execution.ExecutionNode,GraphQL.Types.IGraphType,GraphQLParser.AST.GraphQLField,GraphQL.Types.FieldType,System.Nullable{System.Int32})">
            <summary>
            Initializes an instance of <see cref="T:GraphQL.Execution.NullExecutionNode"/> with the specified values.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.NullExecutionNode.ToValue">
            <summary>
            Returns <see langword="null"/>.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.ObjectExecutionNode">
            <summary>
            Represents an object execution node, which will contain child execution nodes.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ObjectExecutionNode.SubFields">
            <summary>
            Returns an array of child execution nodes.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ObjectExecutionNode.#ctor(GraphQL.Execution.ExecutionNode,GraphQL.Types.IGraphType,GraphQLParser.AST.GraphQLField,GraphQL.Types.FieldType,System.Nullable{System.Int32})">
            <summary>
            Initializes an instance of <see cref="T:GraphQL.Execution.ObjectExecutionNode"/> with the specified values.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ObjectExecutionNode.GetObjectGraphType(GraphQL.Types.ISchema)">
            <summary>
            For execution nodes that represent a field that is an <see cref="T:GraphQL.Types.IAbstractGraphType"/>, returns the
            proper <see cref="T:GraphQL.Types.IObjectGraphType"/> based on the set <see cref="P:GraphQL.Execution.ExecutionNode.Result"/>.
            Otherwise returns the value of <see cref="P:GraphQL.Execution.ExecutionNode.GraphType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ObjectExecutionNode.ToValue">
            <summary>
            Returns a representation of the result of this execution node and its children
            within a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            <see cref="M:GraphQL.Execution.ObjectExecutionNode.PropagateNull"/> must be called prior to calling this method.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ObjectExecutionNode.PropagateNull">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Execution.ObjectExecutionNode.SelectionSet">
            <summary>
            Returns the selection set from <see cref="P:GraphQL.Execution.ExecutionNode.Field"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ObjectExecutionNode.ApplyToChildren``1(System.Action{GraphQL.Execution.ExecutionNode,``0},``0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Execution.RootExecutionNode">
            <summary>
            Represents a root execution node.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.RootExecutionNode.#ctor(GraphQL.Types.IObjectGraphType,GraphQLParser.AST.GraphQLSelectionSet)">
            <summary>
            Initializes a new instance for the specified root graph type.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.RootExecutionNode.SelectionSet">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Execution.SubscriptionArrayExecutionNode">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Execution.SubscriptionArrayExecutionNode.#ctor(GraphQL.Execution.ExecutionNode,GraphQL.Types.IGraphType,GraphQLParser.AST.GraphQLField,GraphQL.Types.FieldType,System.Nullable{System.Int32},System.Object)">
            <summary>
            Initializes an <see cref="T:GraphQL.Execution.SubscriptionArrayExecutionNode"/> instance with the specified values.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.SubscriptionArrayExecutionNode.Source">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Execution.SubscriptionObjectExecutionNode">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Execution.SubscriptionObjectExecutionNode.#ctor(GraphQL.Execution.ExecutionNode,GraphQL.Types.IGraphType,GraphQLParser.AST.GraphQLField,GraphQL.Types.FieldType,System.Nullable{System.Int32},System.Object)">
            <summary>
            Initializes an instance of <see cref="T:GraphQL.Execution.SubscriptionObjectExecutionNode"/> with the specified values.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.SubscriptionObjectExecutionNode.Source">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Execution.SubscriptionValueExecutionNode">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Execution.SubscriptionValueExecutionNode.#ctor(GraphQL.Execution.ExecutionNode,GraphQL.Types.ScalarGraphType,GraphQLParser.AST.GraphQLField,GraphQL.Types.FieldType,System.Nullable{System.Int32},System.Object)">
            <summary>
            Initializes an <see cref="T:GraphQL.Execution.SubscriptionValueExecutionNode"/> instance with the specified values.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.SubscriptionValueExecutionNode.Source">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Execution.ValueExecutionNode">
            <summary>
            Represents a execution node of a <see cref="T:GraphQL.Types.ScalarGraphType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ValueExecutionNode.#ctor(GraphQL.Execution.ExecutionNode,GraphQL.Types.ScalarGraphType,GraphQLParser.AST.GraphQLField,GraphQL.Types.FieldType,System.Nullable{System.Int32})">
            <summary>
            Initializes an instance of <see cref="T:GraphQL.Execution.ValueExecutionNode"/> with the specified values.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ValueExecutionNode.ToValue">
            <summary>
            Returns <see cref="P:GraphQL.Execution.ExecutionNode.Result"/>, which has already been serialized by <see cref="M:GraphQL.Types.ScalarGraphType.Serialize(System.Object)"/>
            within <see cref="M:GraphQL.Execution.ExecutionStrategy.CompleteNodeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)"/> or
            <see cref="M:GraphQL.Execution.ExecutionStrategy.SetArrayItemNodesAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ArrayExecutionNode)"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.ValueExecutionNode.GraphType">
            <inheritdoc cref="P:GraphQL.Execution.ExecutionNode.GraphType"/>
        </member>
        <member name="T:GraphQL.Execution.ParallelExecutionStrategy">
            <inheritdoc cref="M:GraphQL.Execution.ParallelExecutionStrategy.ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)"/>
        </member>
        <member name="P:GraphQL.Execution.ParallelExecutionStrategy.Instance">
            <summary>
            Gets a static instance of <see cref="T:GraphQL.Execution.ParallelExecutionStrategy"/> strategy.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.ParallelExecutionStrategy.ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)">
            <summary>
            Executes document nodes in parallel. Field resolvers must be designed for multi-threaded use.
            Nodes that return a <see cref="T:GraphQL.DataLoader.IDataLoaderResult"/> will execute once all other pending nodes
            have been completed.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.SerialExecutionStrategy">
            <inheritdoc cref="M:GraphQL.Execution.SerialExecutionStrategy.ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)"/>
        </member>
        <member name="P:GraphQL.Execution.SerialExecutionStrategy.Instance">
            <summary>
            Gets a static instance of <see cref="T:GraphQL.Execution.SerialExecutionStrategy"/> strategy.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.SerialExecutionStrategy.ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)">
            <summary>
            Executes document nodes serially. Nodes that return a <see cref="T:GraphQL.DataLoader.IDataLoaderResult"/> will
            execute once all other pending nodes have been completed.
            </summary>
        </member>
        <member name="T:GraphQL.Execution.SubscriptionExecutionStrategy">
            <summary>
            Executes a subscription.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.SubscriptionExecutionStrategy.#ctor">
            <summary>
            Initializes a new instance with a parallel execution strategy for child nodes.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.SubscriptionExecutionStrategy.#ctor(GraphQL.Execution.IExecutionStrategy)">
            <summary>
            Initializes a new instance with the specified execution strategy for child nodes.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.SubscriptionExecutionStrategy.Instance">
            <summary>
            Gets a static instance of <see cref="T:GraphQL.Execution.SubscriptionExecutionStrategy"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.SubscriptionExecutionStrategy.ExecuteAsync(GraphQL.Execution.ExecutionContext)">
            <summary>
            Executes a GraphQL subscription request and returns the result. The result consists
            of one or more streams of GraphQL responses, returned within <see cref="P:GraphQL.ExecutionResult.Streams"/>.
            No serializable <see cref="T:GraphQL.ExecutionResult"/> is directly returned unless an error has occurred.
            This relates more to the protocol in use (defined in the transport layer) than the response here.
            <br/><br/>
            Keep in mind that if a scoped context is passed into <see cref="P:GraphQL.Execution.ExecutionContext.RequestServices"/>,
            and if it is disposed after the initial execution, node executions of subsequent data events will contain
            the disposed <see cref="P:GraphQL.Execution.ExecutionContext.RequestServices"/> instance and hence be unusable.
            <br/><br/>
            If scoped services are needed, it is recommended to utilize the ScopedSubscriptionExecutionStrategy
            class from the GraphQL.MicrosoftDI package, which will create a service scope during processing of data events.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.SubscriptionExecutionStrategy.ResolveResponseStreamAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)">
            <summary>
            Asynchronously returns a stream of <see cref="T:GraphQL.ExecutionResult"/> responses for the
            specified <see cref="T:GraphQL.Execution.ExecutionNode"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.SubscriptionExecutionStrategy.CloneExecutionContext(GraphQL.Execution.ExecutionContext,System.Threading.CancellationToken)">
            <summary>
            Clones an execution context without stateful information -- errors, metrics, and output extensions.
            Sets the cancellation token on the cloned context to the specified value.
            <br/><br/>
            Override to clear a stored service provider from being preserved within a cloned execution context.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.SubscriptionExecutionStrategy.ProcessDataAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode,System.Object)">
            <summary>
            Processes data from the source stream via <see cref="M:System.IObserver`1.OnNext(`0)"/> and
            returns an <see cref="T:GraphQL.ExecutionResult"/>.
            <br/><br/>
            Override this method to mutate <see cref="T:GraphQL.Execution.ExecutionContext"/> as necessary, such
            as changing the <see cref="P:GraphQL.Execution.ExecutionContext.RequestServices"/> property to a scoped instance.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.SubscriptionExecutionStrategy.ProcessErrorAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode,System.Exception)">
            <summary>
            Encapsulates an error within an <see cref="T:GraphQL.ExecutionResult"/> for errors generated
            by the event stream via <see cref="M:System.IObserver`1.OnError(System.Exception)"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.SubscriptionExecutionStrategy.HandleExceptionInternalAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode,System.Exception,System.String)">
            <summary>
            Generates an <see cref="T:GraphQL.ExecutionError"/> for the specified <see cref="T:System.Exception"/>
            and sets the <see cref="P:GraphQL.ExecutionError.Path"/> and <see cref="P:GraphQL.ExecutionError.Locations"/> properties.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.SubscriptionExecutionStrategy.HandleExceptionAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode,System.Exception,System.String)">
            <summary>
            Generates an <see cref="T:GraphQL.ExecutionError"/> for the specified <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.SubscriptionExecutionStrategy.BuildSubscriptionExecutionNode(GraphQL.Execution.ExecutionNode,GraphQL.Types.IGraphType,GraphQLParser.AST.GraphQLField,GraphQL.Types.FieldType,System.Nullable{System.Int32},System.Object)">
            <summary>
            Builds an execution node with the specified parameters.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.SubscriptionExecutionStrategy.ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext,GraphQL.Execution.ExecutionNode)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Execution.UnhandledExceptionContext">
            <summary>
            Provides contextual information for the unhandled exception delegate, <see cref="P:GraphQL.Execution.ExecutionContext.UnhandledExceptionDelegate"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Execution.UnhandledExceptionContext.#ctor(GraphQL.Execution.IExecutionContext,GraphQL.IResolveFieldContext,System.Exception)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.UnhandledExceptionContext.Context">
            <summary>
            Returns the execution context.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.UnhandledExceptionContext.FieldContext">
            <summary>
            Field context whose resolver generated an error. Will be <see langword="null"/> if the error came from
            <see cref="M:GraphQL.DocumentExecuter.ExecuteAsync(GraphQL.ExecutionOptions)"/>, for example, validation stage.
            Also will be <see langword="null"/> between resolvers execution if <c>cancellationToken</c> is canceled.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.UnhandledExceptionContext.OriginalException">
            <summary>
            Original exception from field resolver or <see cref="T:GraphQL.DocumentExecuter"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.UnhandledExceptionContext.Exception">
            <summary>
            Allows to change resulting exception keeping original exception unmodified.
            </summary>
        </member>
        <member name="P:GraphQL.Execution.UnhandledExceptionContext.ErrorMessage">
            <summary>
            Allows to change resulting error message from default one.
            </summary>
        </member>
        <member name="T:GraphQL.DocumentExecuter">
            <summary>
            <inheritdoc cref="T:GraphQL.IDocumentExecuter"/>
            <br/><br/>
            Default implementation for <see cref="T:GraphQL.IDocumentExecuter"/>.
            </summary>
        </member>
        <member name="M:GraphQL.DocumentExecuter.#ctor">
            <summary>
            Initializes a new instance with default <see cref="T:GraphQL.Execution.IDocumentBuilder"/> and
            <see cref="T:GraphQL.Validation.IDocumentValidator"/> instances, and without document caching.
            </summary>
        </member>
        <member name="M:GraphQL.DocumentExecuter.#ctor(GraphQL.Execution.IDocumentBuilder,GraphQL.Validation.IDocumentValidator)">
            <summary>
            Initializes a new instance with specified <see cref="T:GraphQL.Execution.IDocumentBuilder"/> and
            <see cref="T:GraphQL.Validation.IDocumentValidator"/>.
            </summary>
        </member>
        <member name="M:GraphQL.DocumentExecuter.#ctor(GraphQL.Execution.IDocumentBuilder,GraphQL.Validation.IDocumentValidator,GraphQL.Execution.IExecutionStrategySelector,System.Collections.Generic.IEnumerable{GraphQL.DI.IConfigureExecution})">
            <summary>
            Initializes a new instance with the specified <see cref="T:GraphQL.Execution.IDocumentBuilder"/>,
            <see cref="T:GraphQL.Validation.IDocumentValidator"/>, <see cref="T:GraphQL.Execution.IExecutionStrategySelector"/> and
            a set of <see cref="T:GraphQL.DI.IConfigureExecution"/> instances.
            </summary>
        </member>
        <member name="M:GraphQL.DocumentExecuter.ExecuteAsync(GraphQL.ExecutionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.DocumentExecuter.BuildExecutionContext(GraphQL.ExecutionOptions,GraphQLParser.AST.GraphQLDocument,GraphQLParser.AST.GraphQLOperationDefinition,GraphQL.Validation.Variables,GraphQL.Instrumentation.Metrics)">
            <summary>
            Builds a <see cref="T:GraphQL.Execution.ExecutionContext"/> instance from the provided values.
            </summary>
        </member>
        <member name="M:GraphQL.DocumentExecuter.GetOperation(System.String,GraphQLParser.AST.GraphQLDocument)">
            <summary>
            Returns the selected <see cref="T:GraphQLParser.AST.GraphQLOperationDefinition"/> given a specified <see cref="T:GraphQLParser.AST.GraphQLDocument"/> and operation name.
            <br/><br/>
            Returns <see langword="null"/> if an operation cannot be found that matches the given criteria.
            Returns the first operation from the document if no operation name was specified.
            </summary>
        </member>
        <member name="M:GraphQL.DocumentExecuter.SelectExecutionStrategy(GraphQL.Execution.ExecutionContext)">
            <summary>
            Returns an instance of an <see cref="T:GraphQL.Execution.IExecutionStrategy"/> given specified execution parameters.
            <br/><br/>
            Typically the strategy is selected based on the type of operation.
            <br/><br/>
            By default, the selection is handled by the <see cref="T:GraphQL.Execution.IExecutionStrategySelector"/> implementation passed to the
            constructor, which will select an execution strategy based on a set of <see cref="T:GraphQL.Execution.ExecutionStrategyRegistration"/>
            instances passed to it.
            <br/><br/>
            For the <see cref="T:GraphQL.Execution.DefaultExecutionStrategySelector"/> without any registrations,
            query operations will return a <see cref="T:GraphQL.Execution.ParallelExecutionStrategy"/> while mutation operations return a
            <see cref="T:GraphQL.Execution.SerialExecutionStrategy"/>. Subscription operations return a <see cref="T:GraphQL.Execution.SubscriptionExecutionStrategy"/>.
            </summary>
        </member>
        <member name="T:GraphQL.ExecutionError">
            <summary>
            Represents an error generated while processing a document and
            intended to be returned within an <see cref="T:GraphQL.ExecutionResult"/>.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.ExecutionError"/> class with a specified error message.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionError.#ctor(System.String,System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.ExecutionError"/>
            class with a specified error message and exception data.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionError.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.ExecutionError"/> class with a specified
            error message and inner exception. Sets the <see cref="P:GraphQL.ExecutionError.Code"/> property based on the
            inner exception. Loads any exception data from the inner exception into this instance.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionError.Locations">
            <summary>
            Returns a list of locations (if any) within the document that this error applies to.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionError.Code">
            <summary>
            Gets or sets a code for this error. Code is typically used to write the 'code'
            property to the execution result 'extensions' property.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionError.Path">
            <summary>
            Gets or sets the path within the GraphQL document where this error applies to.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionError.Extensions">
            <summary>
            Gets or sets additional information about error.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionError.AddLocation(GraphQLParser.Location)">
            <summary>
            Adds a location to the list of locations that this error applies to.
            </summary>
        </member>
        <member name="T:GraphQL.ExecutionErrorExtensions">
            <summary>
            Provides extension methods for <see cref="T:GraphQL.ExecutionError"/> instances.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionErrorExtensions.AddLocation``1(``0,GraphQLParser.AST.ASTNode,GraphQLParser.AST.GraphQLDocument)">
            <summary>
            Adds a location to an <see cref="T:GraphQL.ExecutionError"/> based on a <see cref="T:GraphQLParser.AST.ASTNode"/> within a <see cref="T:GraphQLParser.AST.GraphQLDocument"/>.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionErrorExtensions.AddExtension``1(``0,System.String,System.Object)">
            <summary>
            Adds an extension to <see cref="P:GraphQL.ExecutionError.Extensions"/>.
            </summary>
        </member>
        <member name="T:GraphQL.ExecutionErrors">
            <summary>
            Contains a list of execution errors. Thread safe except <see cref="T:System.Collections.Generic.IEnumerable`1"/> methods.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionErrors.#ctor">
            <summary>
            Creates an instance of <see cref="T:GraphQL.ExecutionErrors"/>.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionErrors.Add(GraphQL.ExecutionError)">
            <summary>
            Adds an execution error to the list.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionErrors.AddRange(System.Collections.Generic.IEnumerable{GraphQL.ExecutionError})">
            <summary>
            Adds a list of execution errors to the list.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionErrors.Count">
            <summary>
            Returns the number of execution errors in the list.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionErrors.Item(System.Int32)">
            <summary>
            Returns the execution error at the specified index.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionErrors.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.EmptyExecutionErrors">
            <summary>
            Optimization for validation "green path" - does not allocate memory in managed heap.
            </summary>
        </member>
        <member name="T:GraphQL.ExecutionOptions">
            <summary>Configuration options to be passed to <see cref="T:GraphQL.IDocumentExecuter"/> to execute a query</summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.Schema">
            <summary>
            Schema of graph to use; required
            <br/><br/>
            Schema will be initialized if it has not yet been initialized.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.Root">
            <summary>Object to pass to the <see cref="P:GraphQL.IResolveFieldContext.Source"/> property of first-level resolvers</summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.Query">
            <summary>GraphQL query to parse and execute; required</summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.OperationName">
            <summary>GraphQL query operation name; optional, defaults to first (if any) operation defined in query</summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.Document">
            <summary>
            Parsed GraphQL request; can be used to increase performance when implementing a cache of parsed
            GraphQL requests (a <see cref="T:GraphQLParser.AST.GraphQLDocument"/>). If not set, it will be parsed from <see cref="P:GraphQL.ExecutionOptions.Query"/>.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.Variables">
            <summary>Input variables to GraphQL request</summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.Extensions">
            <summary>Input extensions to GraphQL request</summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.CancellationToken">
            <summary><see cref="T:System.Threading.CancellationToken">CancellationToken</see> to cancel the request at any stage of its execution; defaults to <see cref="P:System.Threading.CancellationToken.None"/></summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.CachedDocumentValidationRules">
            <summary>Validation rules to be used by the <see cref="T:GraphQL.Validation.IDocumentValidator"/> when a cached document is used. Since documents are only cached after they are validated, this defaults to an empty set so no validation is performed.</summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.ValidationRules">
            <summary>Validation rules to be used by the <see cref="T:GraphQL.Validation.IDocumentValidator"/>; defaults to standard list of validation rules - see <see cref="F:GraphQL.Validation.DocumentValidator.CoreRules"/></summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.UserContext">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ExecutionOptions.Listeners">
            <summary>A list of <see cref="T:GraphQL.Execution.IDocumentExecutionListener"/>s, enabling code to be executed at various points during the processing of the GraphQL query</summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.EnableMetrics">
            <summary>This setting essentially allows Apollo Tracing. Disabling will increase performance.</summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.ThrowOnUnhandledException">
            <summary>When <see langword="false"/>, captures unhandled exceptions and returns them within <see cref="P:GraphQL.ExecutionResult.Errors">ExecutionResult.Errors</see></summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.UnhandledExceptionDelegate">
            <summary>
            A delegate that can override, hide, modify, or log unhandled exceptions before they are stored
            within <see cref="P:GraphQL.ExecutionResult.Errors"/> as an <see cref="T:GraphQL.ExecutionError"/>.
            This can be useful for hiding error messages that reveal server implementation details.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.MaxParallelExecutionCount">
            <summary>If set, limits the maximum number of nodes executed in parallel</summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.RequestServices">
            <summary>
            The service provider for the executing request. Typically this is set to a scoped service provider
            from your dependency injection framework.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionOptions.User">
            <summary>
            Gets or sets security information for the executing request.
            </summary>
        </member>
        <member name="T:GraphQL.ExecutionResult">
            <summary>
            Represents the result of an execution.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionResult.Executed">
            <summary>
            Indicates if the operation included execution. If an error was encountered BEFORE execution begins,
            the data entry SHOULD NOT be present in the result. If an error was encountered DURING the execution
            that prevented a valid response, the data entry in the response SHOULD BE <see langword="null"/>.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionResult.Data">
            <summary>
            Returns the data from the graph resolvers. This property is serialized as part of the GraphQL json response.
            Should be set to <see langword="null"/> for subscription results.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionResult.Streams">
            <summary>
            Gets or sets a dictionary of returned subscription fields along with their
            response streams as <see cref="T:System.IObservable`1"/> implementations.
            Should be set to <see langword="null"/> for query or mutation results.
            According to the GraphQL specification this dictionary should have exactly one item.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionResult.Errors">
            <summary>
            Returns a set of errors that occurred during any stage of processing (parsing, validating, executing, etc.). This property is serialized as part of the GraphQL json response.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionResult.Query">
            <summary>
            Returns the original GraphQL query.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionResult.Document">
            <summary>
            Returns the parsed GraphQL request.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionResult.Operation">
            <summary>
            Returns the GraphQL operation that is being executed.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionResult.Perf">
            <summary>
            Returns the performance metrics (Apollo Tracing) when enabled by <see cref="P:GraphQL.ExecutionOptions.EnableMetrics"/>.
            </summary>
        </member>
        <member name="P:GraphQL.ExecutionResult.Extensions">
            <summary>
            Returns additional user-defined data; see <see cref="P:GraphQL.Execution.IExecutionContext.OutputExtensions"/> and <see cref="P:GraphQL.IResolveFieldContext.OutputExtensions"/>. This property is serialized as part of the GraphQL json response.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionResult.#ctor">
            <summary>
            Initializes a new instance with all properties set to their defaults.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionResult.#ctor(GraphQL.ExecutionResult)">
            <summary>
            Initializes a new instance as a clone of an existing <see cref="T:GraphQL.ExecutionResult"/>.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionResult.#ctor(GraphQL.Execution.ExecutionContext)">
            <summary>
            Initializes a new instance with the <see cref="P:GraphQL.ExecutionResult.Query"/>, <see cref="P:GraphQL.ExecutionResult.Document"/>,
            <see cref="P:GraphQL.ExecutionResult.Operation"/> and <see cref="P:GraphQL.ExecutionResult.Extensions"/> properties set from the
            specified <see cref="T:GraphQL.Execution.ExecutionContext"/>.
            </summary>
        </member>
        <member name="M:GraphQL.ExecutionResult.AddError(GraphQL.ExecutionError)">
            <summary>
            Adds the specified error to <see cref="P:GraphQL.ExecutionResult.Errors"/>.
            </summary>
            <returns>Reference to this.</returns>
        </member>
        <member name="M:GraphQL.ExecutionResult.AddErrors(GraphQL.ExecutionErrors)">
            <summary>
            Adds errors from the specified <see cref="T:GraphQL.ExecutionErrors"/> to <see cref="P:GraphQL.ExecutionResult.Errors"/>.
            </summary>
            <param name="errors">List of execution errors.</param>
            <returns>Reference to this.</returns>
        </member>
        <member name="T:GraphQL.IDocumentExecuter">
            <summary>
            Processes an entire GraphQL request, given an input GraphQL request string. This is intended to
            be called by user code to process a query.
            <br/><br/>
            Typical implementation starts metrics if enabled (see <see cref="T:GraphQL.Instrumentation.Metrics">Metrics</see>),
            relies on <see cref="T:GraphQL.Execution.IDocumentBuilder">IDocumentBuilder</see> to parse the query and
            <see cref="T:GraphQL.Validation.IDocumentValidator">IDocumentValidator</see> to validate it.
            Then it executes document listeners if attached, selects an execution strategy, and executes the query
            via <see cref="T:GraphQL.Execution.IExecutionStrategy">IExecutionStrategy</see>. Unhandled exceptions are handled as appropriate for the selected options.
            </summary>
        </member>
        <member name="M:GraphQL.IDocumentExecuter.ExecuteAsync(GraphQL.ExecutionOptions)">
            <summary>
            Executes a GraphQL request and returns the result
            </summary>
            <param name="options">The options of the execution</param>
        </member>
        <member name="T:GraphQL.IDocumentExecuter`1">
            <summary>
            Process an entire GraphQL request against a specific schema, given an input GraphQL request string.
            This is intended to be called by user code to process a query.
            </summary>
        </member>
        <member name="T:GraphQL.DocumentExecuterExtensions">
            <summary>
            Extension methods for <see cref="T:GraphQL.IDocumentExecuter"/>.
            </summary>
        </member>
        <member name="M:GraphQL.DocumentExecuterExtensions.ExecuteAsync(GraphQL.IDocumentExecuter,System.Action{GraphQL.ExecutionOptions})">
            <summary>
            Executes a GraphQL request and returns the result
            </summary>
            <param name="executer">An instance of <see cref="T:GraphQL.IDocumentExecuter"/> to use to execute the query</param>
            <param name="configure">A delegate which configures the execution options</param>
        </member>
        <member name="T:GraphQL.Inputs">
            <summary>
            Represents a readonly dictionary of variable inputs to a document. Typically this
            contains the deserialized 'variables' property from the GraphQL request. During document execution,
            these inputs will be validated and coerced into a <see cref="T:GraphQL.Validation.Variables"/> dictionary.
            </summary>
        </member>
        <member name="F:GraphQL.Inputs.Empty">
            <summary>
            Returns an empty set of inputs.
            </summary>
        </member>
        <member name="M:GraphQL.Inputs.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance that is a wrapper for the specified dictionary of elements.
            </summary>
        </member>
        <member name="T:GraphQL.InputsExtensions">
            <summary>
            Provides extension methods for converting a dictionary into <see cref="T:GraphQL.Inputs"/>.
            </summary>
        </member>
        <member name="M:GraphQL.InputsExtensions.ToInputs(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Converts a dictionary into an <see cref="T:GraphQL.Inputs"/>.
            </summary>
            <param name="dictionary">A dictionary.</param>
            <returns>Inputs.</returns>
        </member>
        <member name="T:GraphQL.ExperimentalFeatures">
            <summary>
            Options for configuring experimental features.
            </summary>
        </member>
        <member name="P:GraphQL.ExperimentalFeatures.AppliedDirectives">
            <summary>
            Enables ability to expose user-defined meta-information via introspection.
            See https://github.com/graphql/graphql-spec/issues/300 for more information.
            This property must be set before schema initialization.
            <br/><br/>
            This is completely experimental feature that are not in the official specification (yet).
            </summary>
        </member>
        <member name="P:GraphQL.ExperimentalFeatures.RepeatableDirectives">
            <summary>
            Enables ability to expose 'isRepeatable' field for directives via introspection.
            This property must be set before schema initialization.
            <br/><br/>
            This feature is from a working draft of the specification (not experimental, just not released yet).
            </summary>
        </member>
        <member name="P:GraphQL.ExperimentalFeatures.DeprecationOfInputValues">
            <summary>
            Enables deprecation of input values - arguments on a field or input fields on an input type.
            This property must be set before schema initialization.
            <br/><br/>
            This feature is from a working draft of the specification (not experimental, just not released yet).
            </summary>
        </member>
        <member name="F:GraphQL.AssemblyExtensions._typesToRegister">
            <summary>
            Contains a list of types that are scanned for, from which a clr type mapping will be matched
            </summary>
        </member>
        <member name="M:GraphQL.AssemblyExtensions.GetClrTypeMappings(System.Reflection.Assembly)">
            <summary>
            Scans the specified assembly for classes that inherit from <see cref="T:GraphQL.Types.ObjectGraphType`1"/>,
            <see cref="T:GraphQL.Types.InputObjectGraphType`1"/>, or <see cref="T:GraphQL.Types.EnumerationGraphType`1"/>, and
            returns a list of mappings between matched classes and the source type or underlying enum type.
            Skips classes where the source type is <see cref="T:System.Object"/>, or where the class is marked with
            the <see cref="T:GraphQL.DoNotMapClrTypeAttribute"/>.
            </summary>
        </member>
        <member name="T:GraphQL.AuthorizationExtensions">
            <summary>
            Extension methods to configure authorization requirements for GraphQL elements: types, fields, schema.
            </summary>
        </member>
        <member name="F:GraphQL.AuthorizationExtensions.POLICY_KEY">
            <summary>
            Metadata key name for storing authorization policy names. Value of this key
            is a simple list of strings.
            </summary>
        </member>
        <member name="F:GraphQL.AuthorizationExtensions.ROLE_KEY">
            <summary>
            Metadata key name for storing authorization role names. Value of this key
            is a simple list of strings.
            </summary>
        </member>
        <member name="F:GraphQL.AuthorizationExtensions.AUTHORIZE_KEY">
            <summary>
            Metadata key name for indicating that the user must be authorized (strictly speaking, authenticated) to access the resource.
            Value of this key is a boolean value.
            </summary>
        </member>
        <member name="F:GraphQL.AuthorizationExtensions.ANONYMOUS_KEY">
            <summary>
            Metadata key name for typically indicating if anonymous access should be allowed to a field of a graph type
            requiring authorization, providing that no other fields were selected.
            </summary>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.GetPolicies(GraphQL.Types.IProvideMetadata)">
            <summary>
            Gets a list of authorization policy names for the specified metadata provider if any.
            Otherwise returns <see langword="null"/>.
            </summary>
            <param name="provider">
            Metadata provider. This can be an instance of <see cref="T:GraphQL.Types.GraphType"/>,
            <see cref="T:GraphQL.Types.FieldType"/>, <see cref="T:GraphQL.Types.Schema"/> or others.
            </param>
            <returns>List of authorization policy names applied to this metadata provider.</returns>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.GetRoles(GraphQL.Types.IProvideMetadata)">
            <summary>
            Gets a list of authorization roles names for the specified metadata provider if any.
            Otherwise returns <see langword="null"/>.
            </summary>
            <param name="provider">
            Metadata provider. This can be an instance of <see cref="T:GraphQL.Types.GraphType"/>,
            <see cref="T:GraphQL.Types.FieldType"/>, <see cref="T:GraphQL.Types.Schema"/> or others.
            </param>
            <returns>List of authorization role names applied to this metadata provider.</returns>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.IsAnonymousAllowed(GraphQL.Types.IProvideMetadata)">
            <summary>
            Returns a boolean typically indicating if anonymous access should be allowed to a field of a graph type
            requiring authorization, providing that no other fields were selected.
            </summary>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.AllowAnonymous``1(``0)">
            <summary>
            Adds metadata to typically indicate that anonymous access should be allowed to a field of a graph type
            requiring authorization, providing that no other fields were selected.
            </summary>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.IsAuthorizationRequired(GraphQL.Types.IProvideMetadata)">
            <summary>
            Gets a boolean value that determines whether any authorization policy is applied to this metadata provider.
            </summary>
            <param name="provider">
            Metadata provider. This can be an instance of <see cref="T:GraphQL.Types.GraphType"/>,
            <see cref="T:GraphQL.Types.FieldType"/>, <see cref="T:GraphQL.Types.Schema"/> or others.
            </param>
            <returns><see langword="true"/>if any authorization policy is applied, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.Authorize``1(``0)">
            <summary>
            Adds metadata to indicate that the resource requires that the user has successfully authenticated.
            </summary>
            <param name="provider">
            Metadata provider. This can be an instance of <see cref="T:GraphQL.Types.GraphType"/>,
            <see cref="T:GraphQL.Types.FieldType"/>, <see cref="T:GraphQL.Types.Schema"/> or others.
            </param>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.AuthorizeWithPolicy``1(``0,System.String)">
            <summary>
            Adds authorization policy to the specified metadata provider. If the provider already contains
            a policy with the same name, then it will not be added twice.
            </summary>
            <typeparam name="TMetadataProvider"> The type of metadata provider. Generics are used here to
            let compiler infer the returning type to allow methods chaining.
            </typeparam>
            <param name="provider">
            Metadata provider. This can be an instance of <see cref="T:GraphQL.Types.GraphType"/>,
            <see cref="T:GraphQL.Types.FieldType"/>, <see cref="T:GraphQL.Types.Schema"/> or others.
            </param>
            <param name="policy">Authorization policy name.</param>
            <returns>The reference to the specified <paramref name="provider"/>.</returns>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.AuthorizeWithRoles``1(``0,System.String)">
            <summary>
            Adds authorization role(s) to the specified metadata provider. Roles should
            be comma-separated and role names will be trimmed. If the underlying field already
            contains a role with the same name, then it will not be added twice.
            </summary>
            <typeparam name="TMetadataProvider"> The type of metadata provider. Generics are used here to
            let compiler infer the returning type to allow methods chaining.
            </typeparam>
            <param name="provider">
            Metadata provider. This can be an instance of <see cref="T:GraphQL.Types.GraphType"/>,
            <see cref="T:GraphQL.Types.FieldType"/>, <see cref="T:GraphQL.Types.Schema"/> or others.
            </param>
            <param name="roles">Comma-separated list of authorization role name(s).</param>
            <returns>The reference to the specified <paramref name="provider"/>.</returns>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.AuthorizeWithRoles``1(``0,System.String[])">
            <summary>
            Adds authorization role(s) to the specified metadata provider.  If the underlying field already
            contains a role with the same name, then it will not be added twice.
            </summary>
            <typeparam name="TMetadataProvider"> The type of metadata provider. Generics are used here to
            let compiler infer the returning type to allow methods chaining.
            </typeparam>
            <param name="provider">
            Metadata provider. This can be an instance of <see cref="T:GraphQL.Types.GraphType"/>,
            <see cref="T:GraphQL.Types.FieldType"/>, <see cref="T:GraphQL.Types.Schema"/> or others.
            </param>
            <param name="roles">List of authorization role name(s).</param>
            <returns>The reference to the specified <paramref name="provider"/>.</returns>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.AuthorizeWithPolicy``2(GraphQL.Builders.FieldBuilder{``0,``1},System.String)">
            <summary>
            Adds authorization policy to the specified field builder. If the underlying field already contains
            a policy with the same name, then it will not be added twice.
            </summary>
            <typeparam name="TSourceType"></typeparam>
            <typeparam name="TReturnType"></typeparam>
            <param name="builder"></param>
            <param name="policy">Authorization policy name.</param>
            <returns>The reference to the specified <paramref name="builder"/>.</returns>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.AuthorizeWithRoles``2(GraphQL.Builders.FieldBuilder{``0,``1},System.String)">
            <summary>
            Adds authorization role(s) to the specified field builder. Roles should
            be comma-separated and role names will be trimmed. If the underlying field already
            contains a role with the same name, then it will not be added twice.
            </summary>
            <param name="builder"></param>
            <param name="roles">Comma-separated list of authorization role name(s).</param>
            <returns>The reference to the specified <paramref name="builder"/>.</returns>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.AuthorizeWithRoles``2(GraphQL.Builders.FieldBuilder{``0,``1},System.String[])">
            <summary>
            Adds authorization role(s) to the specified field builder. If the underlying field already
            contains a role with the same name, then it will not be added twice.
            </summary>
            <param name="builder"></param>
            <param name="roles">List of authorization role name(s).</param>
            <returns>The reference to the specified <paramref name="builder"/>.</returns>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.Authorize``2(GraphQL.Builders.FieldBuilder{``0,``1})">
            <inheritdoc cref="M:GraphQL.AuthorizationExtensions.Authorize``1(``0)"/>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.AllowAnonymous``2(GraphQL.Builders.FieldBuilder{``0,``1})">
            <inheritdoc cref="M:GraphQL.AuthorizationExtensions.AllowAnonymous``1(``0)"/>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.AuthorizeWithPolicy``1(GraphQL.Builders.ConnectionBuilder{``0},System.String)">
            <summary>
            Adds authorization policy to the specified connection builder. If the underlying field already
            contains a policy with the same name, then it will not be added twice.
            </summary>
            <typeparam name="TSourceType"></typeparam>
            <param name="builder"></param>
            <param name="policy">Authorization policy name.</param>
            <returns>The reference to the specified <paramref name="builder"/>.</returns>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.AuthorizeWithRoles``1(GraphQL.Builders.ConnectionBuilder{``0},System.String)">
            <summary>
            Adds authorization role(s) to the specified connection builder. Roles should
            be comma-separated and role names will be trimmed. If the underlying field already
            contains a role with the same name, then it will not be added twice.
            </summary>
            <param name="builder"></param>
            <param name="roles">Comma-separated list of authorization role name(s).</param>
            <returns>The reference to the specified <paramref name="builder"/>.</returns>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.AuthorizeWithRoles``1(GraphQL.Builders.ConnectionBuilder{``0},System.String[])">
            <summary>
            Adds authorization role(s) to the specified connection builder. If the underlying field already
            contains a role with the same name, then it will not be added twice.
            </summary>
            <param name="builder"></param>
            <param name="roles">List of authorization role name(s).</param>
            <returns>The reference to the specified <paramref name="builder"/>.</returns>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.Authorize``1(GraphQL.Builders.ConnectionBuilder{``0})">
            <inheritdoc cref="M:GraphQL.AuthorizationExtensions.Authorize``1(``0)"/>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.AllowAnonymous``1(GraphQL.Builders.ConnectionBuilder{``0})">
            <inheritdoc cref="M:GraphQL.AuthorizationExtensions.AllowAnonymous``1(``0)"/>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.AuthorizeWithPolicy``2(GraphQL.Builders.ConnectionBuilder{``0,``1},System.String)">
            <inheritdoc cref="M:GraphQL.AuthorizationExtensions.AuthorizeWithPolicy``1(GraphQL.Builders.ConnectionBuilder{``0},System.String)"/>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.AuthorizeWithRoles``2(GraphQL.Builders.ConnectionBuilder{``0,``1},System.String)">
            <inheritdoc cref="M:GraphQL.AuthorizationExtensions.AuthorizeWithRoles``1(GraphQL.Builders.ConnectionBuilder{``0},System.String)"/>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.AuthorizeWithRoles``2(GraphQL.Builders.ConnectionBuilder{``0,``1},System.String[])">
            <inheritdoc cref="M:GraphQL.AuthorizationExtensions.AuthorizeWithRoles``1(GraphQL.Builders.ConnectionBuilder{``0},System.String)"/>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.Authorize``2(GraphQL.Builders.ConnectionBuilder{``0,``1})">
            <inheritdoc cref="M:GraphQL.AuthorizationExtensions.Authorize``1(``0)"/>
        </member>
        <member name="M:GraphQL.AuthorizationExtensions.AllowAnonymous``2(GraphQL.Builders.ConnectionBuilder{``0,``1})">
            <inheritdoc cref="M:GraphQL.AuthorizationExtensions.AllowAnonymous``1(``0)"/>
        </member>
        <member name="T:GraphQL.DIExtensions">
            <summary>
            Provides extension methods for dependency injection services.
            </summary>
        </member>
        <member name="M:GraphQL.DIExtensions.RequestServicesOrThrow(GraphQL.ExecutionOptions)">
            <summary>
            Returns <see cref="P:GraphQL.ExecutionOptions.RequestServices"/> if specified or throws <see cref="T:GraphQL.MissingRequestServicesException"/>.
            </summary>
        </member>
        <member name="M:GraphQL.DIExtensions.RequestServicesOrThrow(GraphQL.Execution.IExecutionContext)">
            <summary>
            Returns <see cref="P:GraphQL.Execution.IExecutionContext.RequestServices"/> if specified or throws <see cref="T:GraphQL.MissingRequestServicesException"/>.
            </summary>
        </member>
        <member name="M:GraphQL.DIExtensions.RequestServicesOrThrow(GraphQL.Validation.ValidationContext)">
            <summary>
            Returns <see cref="P:GraphQL.Validation.ValidationContext.RequestServices"/> if specified or throws <see cref="T:GraphQL.MissingRequestServicesException"/>.
            </summary>
        </member>
        <member name="M:GraphQL.DIExtensions.RequestServicesOrThrow(GraphQL.IResolveFieldContext)">
            <summary>
            Returns <see cref="P:GraphQL.IResolveFieldContext.RequestServices"/> if specified or throws <see cref="T:GraphQL.MissingRequestServicesException"/>.
            </summary>
        </member>
        <member name="T:GraphQL.DirectivesExtensions">
            <summary>
            Extension methods to configure directives applied to GraphQL elements: types, fields, arguments, etc.
            </summary>
        </member>
        <member name="M:GraphQL.DirectivesExtensions.HasAppliedDirectives(GraphQL.Types.IProvideMetadata)">
            <summary>
            Indicates whether provider has any applied directives.
            Note that built-in @deprecated directive is not taken into account and ignored.
            <param name="provider">
            Metadata provider. This can be an instance of <see cref="T:GraphQL.Types.GraphType"/>,
            <see cref="T:GraphQL.Types.FieldType"/>, <see cref="T:GraphQL.Types.Schema"/> or others.
            </param>
            </summary>
        </member>
        <member name="M:GraphQL.DirectivesExtensions.GetAppliedDirectives(GraphQL.Types.IProvideMetadata)">
            <summary>
            Provides all directives applied to this provider if any. Otherwise returns <see langword="null"/>.
            Note that built-in @deprecated directive is not taken into account and ignored.
            <param name="provider">
            Metadata provider. This can be an instance of <see cref="T:GraphQL.Types.GraphType"/>,
            <see cref="T:GraphQL.Types.FieldType"/>, <see cref="T:GraphQL.Types.Schema"/> or others.
            </param>
            </summary>
        </member>
        <member name="M:GraphQL.DirectivesExtensions.FindAppliedDirective(GraphQL.Types.IProvideMetadata,System.String)">
            <summary>
            Finds applied directive by its name from the specified provider if any. Otherwise returns <see langword="null"/>.
            </summary>
            <param name="provider">
            Metadata provider. This can be an instance of <see cref="T:GraphQL.Types.GraphType"/>,
            <see cref="T:GraphQL.Types.FieldType"/>, <see cref="T:GraphQL.Types.Schema"/> or others.
            </param>
            <param name="name">Directive name.</param>
        </member>
        <member name="M:GraphQL.DirectivesExtensions.ApplyDirective``1(``0,System.String)">
            <summary>
            Apply directive without specifying arguments. If the directive declaration has arguments,
            then their default values (if any) will be used.
            </summary>
            <param name="provider">
            Metadata provider. This can be an instance of <see cref="T:GraphQL.Types.GraphType"/>,
            <see cref="T:GraphQL.Types.FieldType"/>, <see cref="T:GraphQL.Types.Schema"/> or others.
            </param>
            <param name="name">Directive name.</param>
            <returns>The reference to the specified <paramref name="provider"/>.</returns>
        </member>
        <member name="M:GraphQL.DirectivesExtensions.ApplyDirective``1(``0,System.String,System.String,System.Object)">
            <summary>
            Apply directive specifying one argument. If the directive declaration has other arguments,
            then their default values (if any) will be used.
            </summary>
            <param name="provider">
            Metadata provider. This can be an instance of <see cref="T:GraphQL.Types.GraphType"/>,
            <see cref="T:GraphQL.Types.FieldType"/>, <see cref="T:GraphQL.Types.Schema"/> or others.
            </param>
            <param name="name">Directive name.</param>
            <param name="argumentName">Argument name.</param>
            <param name="argumentValue">Argument value.</param>
            <returns>The reference to the specified <paramref name="provider"/>.</returns>
        </member>
        <member name="M:GraphQL.DirectivesExtensions.ApplyDirective``1(``0,System.String,System.String,System.Object,System.String,System.Object)">
            <summary>
            Apply directive specifying two arguments. If the directive declaration has other arguments,
            then their default values (if any) will be used.
            </summary>
            <param name="provider">
            Metadata provider. This can be an instance of <see cref="T:GraphQL.Types.GraphType"/>,
            <see cref="T:GraphQL.Types.FieldType"/>, <see cref="T:GraphQL.Types.Schema"/> or others.
            </param>
            <param name="name">Directive name.</param>
            <param name="argument1Name">First argument name.</param>
            <param name="argument1Value">First argument value.</param>
            <param name="argument2Name">Second argument name.</param>
            <param name="argument2Value">Second argument value.</param>
            <returns>The reference to the specified <paramref name="provider"/>.</returns>
        </member>
        <member name="M:GraphQL.DirectivesExtensions.ApplyDirective``1(``0,System.String,System.Action{GraphQL.Types.AppliedDirective})">
            <summary>
            Apply directive with configuration delegate.
            </summary>
            <param name="provider">
            Metadata provider. This can be an instance of <see cref="T:GraphQL.Types.GraphType"/>,
            <see cref="T:GraphQL.Types.FieldType"/>, <see cref="T:GraphQL.Types.Schema"/> or others.
            </param>
            <param name="name">Directive name.</param>
            <param name="configure">Configuration delegate.</param>
            <returns>The reference to the specified <paramref name="provider"/>.</returns>
        </member>
        <member name="M:GraphQL.DirectivesExtensions.RemoveAppliedDirective``1(``0,System.String)">
            <summary>
            Remove applied directive by its name.
            </summary>
            <param name="provider">
            Metadata provider. This can be an instance of <see cref="T:GraphQL.Types.GraphType"/>,
            <see cref="T:GraphQL.Types.FieldType"/>, <see cref="T:GraphQL.Types.Schema"/> or others.
            </param>
            <param name="name">Directive name.</param>
            <returns>The reference to the specified <paramref name="provider"/>.</returns>
        </member>
        <member name="M:GraphQL.ExpressionExtensions.Replace(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Replaces all occurrences of <paramref name="oldParameter"/> with <paramref name="newBody"/> within <paramref name="expression"/>.
            </summary>
        </member>
        <member name="T:GraphQL.GraphQLBuilderExtensions">
            <summary>
            Provides extension methods to configure GraphQL.NET services within a dependency injection framework.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.Register``1(GraphQL.DI.IServiceRegister,GraphQL.DI.ServiceLifetime,System.Boolean)">
            <inheritdoc cref="M:GraphQL.GraphQLBuilderExtensions.Register``1(GraphQL.DI.IServiceRegister,System.Func{System.IServiceProvider,``0},GraphQL.DI.ServiceLifetime,System.Boolean)"/>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.Register``2(GraphQL.DI.IServiceRegister,GraphQL.DI.ServiceLifetime,System.Boolean)">
            <summary>
            Registers the service of type <typeparamref name="TService"/> with the dependency injection provider.
            An instance of <typeparamref name="TImplementation"/> will be created when an instance is needed.
            Optionally removes any existing implementation of the same service type.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.Register``1(GraphQL.DI.IServiceRegister,System.Func{System.IServiceProvider,``0},GraphQL.DI.ServiceLifetime,System.Boolean)">
            <summary>
            Registers the service of type <typeparamref name="TService"/> with the dependency injection provider.
            Optionally removes any existing implementation of the same service type.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.Register``1(GraphQL.DI.IServiceRegister,``0,System.Boolean)">
            <summary>
            Registers <paramref name="implementationInstance"/> as type <typeparamref name="TService"/> with the dependency injection provider.
            Optionally removes any existing implementation of the same service type.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.TryRegister``1(GraphQL.DI.IServiceRegister,GraphQL.DI.ServiceLifetime)">
            <inheritdoc cref="M:GraphQL.GraphQLBuilderExtensions.TryRegister``1(GraphQL.DI.IServiceRegister,System.Func{System.IServiceProvider,``0},GraphQL.DI.ServiceLifetime)"/>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.TryRegister``2(GraphQL.DI.IServiceRegister,GraphQL.DI.ServiceLifetime,GraphQL.DI.RegistrationCompareMode)">
            <summary>
            Registers the service of type <typeparamref name="TService"/> with the dependency
            injection provider if a service of the same type (and of the same implementation type
            in case of <see cref="F:GraphQL.DI.RegistrationCompareMode.ServiceTypeAndImplementationType"/>)
            has not already been registered. An instance of <typeparamref name="TImplementation"/>
            will be created when an instance is needed.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.TryRegister``2(GraphQL.DI.IServiceRegister,System.Func{System.IServiceProvider,``1},GraphQL.DI.ServiceLifetime,GraphQL.DI.RegistrationCompareMode)">
            <summary>
            Registers the service of type <typeparamref name="TService"/> with the dependency injection provider if a service
            of the same type has not already been registered.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.TryRegister``1(GraphQL.DI.IServiceRegister,System.Func{System.IServiceProvider,``0},GraphQL.DI.ServiceLifetime)">
            <summary>
            Registers the service of type <typeparamref name="TService"/> with the dependency injection provider if a service
            of the same type has not already been registered.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.TryRegister``1(GraphQL.DI.IServiceRegister,``0,GraphQL.DI.RegistrationCompareMode)">
            <summary>
            Registers <paramref name="implementationInstance"/> as type <typeparamref name="TService"/> with the dependency injection provider
            if a service of the same type has not already been registered.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.Configure``1(GraphQL.DI.IServiceRegister,System.Action{``0})">
            <inheritdoc cref="M:GraphQL.DI.IServiceRegister.Configure``1(System.Action{``0,System.IServiceProvider})"/>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.RegisterAsBoth``2(GraphQL.DI.IServiceRegister,GraphQL.DI.ServiceLifetime)">
            <summary>
            Calls Register for both the implementation and service
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.RegisterAsBoth``2(GraphQL.DI.IServiceRegister,System.Func{System.IServiceProvider,``1},GraphQL.DI.ServiceLifetime)">
            <summary>
            Calls Register for both the implementation and service
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.RegisterAsBoth``2(GraphQL.DI.IServiceRegister,``1)">
            <summary>
            Calls Register for both the implementation and service
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.TryRegisterAsBoth``2(GraphQL.DI.IServiceRegister,GraphQL.DI.ServiceLifetime)">
            <summary>
            Calls Register for the implementation and TryRegister for the service
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.TryRegisterAsBoth``2(GraphQL.DI.IServiceRegister,System.Func{System.IServiceProvider,``1},GraphQL.DI.ServiceLifetime)">
            <summary>
            Calls Register for the implementation and TryRegister for the service
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.TryRegisterAsBoth``2(GraphQL.DI.IServiceRegister,``1)">
            <summary>
            Calls Register for the implementation and TryRegister for the service
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddSchema``1(GraphQL.DI.IGraphQLBuilder,GraphQL.DI.ServiceLifetime)">
            <summary>
            Registers <typeparamref name="TSchema"/> within the dependency injection framework. <see cref="T:GraphQL.Types.ISchema"/> is also
            registered if it is not already registered within the dependency injection framework. Singleton and scoped
            lifetimes are supported.
            </summary>
            <remarks>
            Schemas that implement <see cref="T:System.IDisposable"/> of a transient lifetime are not supported, as this will cause a
            memory leak if requested from the root service provider.
            </remarks>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddSchema``1(GraphQL.DI.IGraphQLBuilder,``0)">
            <summary>
            Registers <paramref name="schema"/> within the dependency injection framework as <typeparamref name="TSchema"/>. <see cref="T:GraphQL.Types.ISchema"/> is also
            registered if it is not already registered within the dependency injection framework.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddSchema``1(GraphQL.DI.IGraphQLBuilder,System.Func{System.IServiceProvider,``0},GraphQL.DI.ServiceLifetime)">
            <inheritdoc cref="M:GraphQL.GraphQLBuilderExtensions.AddSchema``1(GraphQL.DI.IGraphQLBuilder,GraphQL.DI.ServiceLifetime)"/>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddGraphTypeMappingProvider``1(GraphQL.DI.IGraphQLBuilder)">
            <summary>
            Registers an instance of <typeparamref name="TGraphTypeMappingProvider"/> with the dependency injection
            framework as a singleton of type <see cref="T:GraphQL.Types.IGraphTypeMappingProvider"/>.
            <br/><br/>
            An <see cref="T:GraphQL.Types.IGraphTypeMappingProvider"/> can be used to map one or more CLR types to graph types.
            For instance, unmapped CLR output types can be mapped to <see cref="T:GraphQL.Types.AutoRegisteringObjectGraphType`1"/>
            types.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddGraphTypeMappingProvider``1(GraphQL.DI.IGraphQLBuilder,System.Func{System.IServiceProvider,``0})">
            <summary>
            Registers an instance of <typeparamref name="TGraphTypeMappingProvider"/> with the dependency injection
            framework as a singleton of type <see cref="T:GraphQL.Types.IGraphTypeMappingProvider"/> using the specified factory delegate.
            <br/><br/>
            An <see cref="T:GraphQL.Types.IGraphTypeMappingProvider"/> can be used to map one or more CLR types to graph types.
            For instance, unmapped CLR output types can be mapped to <see cref="T:GraphQL.Types.AutoRegisteringObjectGraphType`1"/>
            types.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddGraphTypeMappingProvider``1(GraphQL.DI.IGraphQLBuilder,``0)">
            <summary>
            Registers an instance of <typeparamref name="TGraphTypeMappingProvider"/> with the dependency injection
            framework as a singleton of type <see cref="T:GraphQL.Types.IGraphTypeMappingProvider"/> using the specified instance.
            <br/><br/>
            An <see cref="T:GraphQL.Types.IGraphTypeMappingProvider"/> can be used to map one or more CLR types to graph types.
            For instance, unmapped CLR output types can be mapped to <see cref="T:GraphQL.Types.AutoRegisteringObjectGraphType`1"/>
            types.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddAutoSchema``1(GraphQL.DI.IGraphQLBuilder,System.Action{GraphQL.IConfigureAutoSchema})">
            <summary>
            Registers an instance of the <see cref="T:GraphQL.Types.AutoSchema`1"/> class within the dependency injection framework as a singleton.
            <see cref="T:GraphQL.Types.ISchema"/> is also registered if it is not already registered within the dependency injection framework.
            <see cref="P:GraphQL.Types.Schema.Query"/> is set to an instance of <see cref="T:GraphQL.Types.AutoRegisteringObjectGraphType`1"/> with
            <typeparamref name="TQueryClrType"/> as TSourceType.
            <br/><br/>
            Additionally, this method calls <see cref="M:GraphQL.GraphQLBuilderExtensions.AddAutoClrMappings(GraphQL.DI.IGraphQLBuilder,System.Boolean,System.Boolean)">AddAutoClrMappings</see>
            so that unmapped CLR input or output types are mapped to <see cref="T:GraphQL.Types.AutoRegisteringInputObjectGraphType`1"/>
            and <see cref="T:GraphQL.Types.AutoRegisteringObjectGraphType`1"/> respectively.
            <br/><br/>
            To register a mutation or subscription CLR type within the schema, use the <paramref name="configure"/> delegate and
            call <see cref="M:GraphQL.GraphQLBuilderExtensions.WithMutation``1(GraphQL.IConfigureAutoSchema)">WithMutation</see> or
            <see cref="M:GraphQL.GraphQLBuilderExtensions.WithSubscription``1(GraphQL.IConfigureAutoSchema)">WithSubscription</see>, respsectively.
            <br/><br/>
            This allows for a schema that is entirely configured with CLR types.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.WithMutation``1(GraphQL.IConfigureAutoSchema)">
            <summary>
            Configures <see cref="P:GraphQL.Types.Schema.Mutation"/> to an instance of <see cref="T:GraphQL.Types.AutoRegisteringObjectGraphType`1"/>
            with <typeparamref name="TMutationClrType"/> as TSourceType.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.WithSubscription``1(GraphQL.IConfigureAutoSchema)">
            <summary>
            Configures <see cref="P:GraphQL.Types.Schema.Subscription"/> to an instance of <see cref="T:GraphQL.Types.AutoRegisteringObjectGraphType`1"/>
            with <typeparamref name="TSubscriptionClrType"/> as TSourceType.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddDocumentExecuter``1(GraphQL.DI.IGraphQLBuilder)">
            <summary>
            Registers <typeparamref name="TDocumentExecuter"/> as a singleton of type <see cref="T:GraphQL.IDocumentExecuter"/> within the
            dependency injection framework.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddDocumentExecuter``1(GraphQL.DI.IGraphQLBuilder,``0)">
            <summary>
            Registers <paramref name="documentExecuter"/> as a singleton of type <see cref="T:GraphQL.IDocumentExecuter"/> within the
            dependency injection framework.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddDocumentExecuter``1(GraphQL.DI.IGraphQLBuilder,System.Func{System.IServiceProvider,``0})">
            <summary>
            Registers <typeparamref name="TDocumentExecuter"/> as a singleton of type <see cref="T:GraphQL.IDocumentExecuter"/> within the
            dependency injection framework. The supplied factory method is used to create the document executer.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddComplexityAnalyzer(GraphQL.DI.IGraphQLBuilder,System.Action{GraphQL.Validation.Complexity.ComplexityConfiguration})">
            <summary>
            Enables the default complexity analyzer and configures it with the specified configuration delegate.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddComplexityAnalyzer(GraphQL.DI.IGraphQLBuilder,System.Action{GraphQL.Validation.Complexity.ComplexityConfiguration,System.IServiceProvider})">
            <inheritdoc cref="M:GraphQL.GraphQLBuilderExtensions.AddComplexityAnalyzer(GraphQL.DI.IGraphQLBuilder,System.Action{GraphQL.Validation.Complexity.ComplexityConfiguration})"/>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddComplexityAnalyzer``1(GraphQL.DI.IGraphQLBuilder,System.Action{GraphQL.Validation.Complexity.ComplexityConfiguration})">
            <summary>
            Registers <typeparamref name="TAnalyzer"/> as a singleton of type <see cref="T:GraphQL.Validation.Complexity.IComplexityAnalyzer"/> within the
            dependency injection framework, then enables and configures it with the specified configuration delegate.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddComplexityAnalyzer``1(GraphQL.DI.IGraphQLBuilder,System.Action{GraphQL.Validation.Complexity.ComplexityConfiguration,System.IServiceProvider})">
            <inheritdoc cref="M:GraphQL.GraphQLBuilderExtensions.AddComplexityAnalyzer``1(GraphQL.DI.IGraphQLBuilder,System.Action{GraphQL.Validation.Complexity.ComplexityConfiguration})"/>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddComplexityAnalyzer``1(GraphQL.DI.IGraphQLBuilder,``0,System.Action{GraphQL.Validation.Complexity.ComplexityConfiguration})">
            <summary>
            Registers <paramref name="analyzer"/> as a singleton of type <see cref="T:GraphQL.Validation.Complexity.IComplexityAnalyzer"/> within the
            dependency injection framework, then enables and configures it with the specified configuration delegate.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddComplexityAnalyzer``1(GraphQL.DI.IGraphQLBuilder,``0,System.Action{GraphQL.Validation.Complexity.ComplexityConfiguration,System.IServiceProvider})">
            <inheritdoc cref="M:GraphQL.GraphQLBuilderExtensions.AddComplexityAnalyzer``1(GraphQL.DI.IGraphQLBuilder,``0,System.Action{GraphQL.Validation.Complexity.ComplexityConfiguration})"/>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddComplexityAnalyzer``1(GraphQL.DI.IGraphQLBuilder,System.Func{System.IServiceProvider,``0},System.Action{GraphQL.Validation.Complexity.ComplexityConfiguration})">
            <summary>
            Registers a singleton of type <see cref="T:GraphQL.Validation.Complexity.IComplexityAnalyzer"/> within the dependency injection framework
            using the specified factory delegate, then enables and configures it with the specified configuration delegate.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddComplexityAnalyzer``1(GraphQL.DI.IGraphQLBuilder,System.Func{System.IServiceProvider,``0},System.Action{GraphQL.Validation.Complexity.ComplexityConfiguration,System.IServiceProvider})">
            <inheritdoc cref="M:GraphQL.GraphQLBuilderExtensions.AddComplexityAnalyzer``1(GraphQL.DI.IGraphQLBuilder,System.Func{System.IServiceProvider,``0},System.Action{GraphQL.Validation.Complexity.ComplexityConfiguration})"/>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddErrorInfoProvider(GraphQL.DI.IGraphQLBuilder,System.Action{GraphQL.Execution.ErrorInfoProviderOptions})">
            <summary>
            Configures the default error info provider with the specified configuration delegate.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddErrorInfoProvider(GraphQL.DI.IGraphQLBuilder,System.Action{GraphQL.Execution.ErrorInfoProviderOptions,System.IServiceProvider})">
            <inheritdoc cref="M:GraphQL.GraphQLBuilderExtensions.AddErrorInfoProvider(GraphQL.DI.IGraphQLBuilder,System.Action{GraphQL.Execution.ErrorInfoProviderOptions})"/>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddErrorInfoProvider``1(GraphQL.DI.IGraphQLBuilder)">
            <summary>
            Registers <typeparamref name="TProvider"/> as a singleton of type <see cref="T:GraphQL.Execution.IErrorInfoProvider"/> within the
            dependency injection framework.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddErrorInfoProvider``1(GraphQL.DI.IGraphQLBuilder,``0)">
            <summary>
            Registers <paramref name="errorInfoProvider"/> as a singleton of type <see cref="T:GraphQL.Execution.IErrorInfoProvider"/> within the
            dependency injection framework.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddErrorInfoProvider``1(GraphQL.DI.IGraphQLBuilder,System.Func{System.IServiceProvider,``0})">
            <summary>
            Registers <see cref="T:GraphQL.Execution.IErrorInfoProvider"/> within the dependency injection framework using the supplied
            factory delegate.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddGraphTypes(GraphQL.DI.IGraphQLBuilder)">
            <summary>
            Scans the calling assembly for classes that implement <see cref="T:GraphQL.Types.IGraphType"/> and registers
            them as transients within the dependency injection framework. A transient lifetime ensures
            they are only instantiated once each time the schema is built. If the schema is a scoped schema,
            the graph types will effectively be scoped graph types. If the schema is a singleton schema,
            the graph types will effectively be singleton graph types.
            <br/><br/>
            Also registers <see cref="T:GraphQL.Types.EnumerationGraphType`1"/>, <see cref="T:GraphQL.Types.Relay.ConnectionType`1"/>,
            <see cref="T:GraphQL.Types.Relay.ConnectionType`2"/>, <see cref="T:GraphQL.Types.Relay.EdgeType`1"/>,
            <see cref="T:GraphQL.Types.InputObjectGraphType`1"/>, <see cref="T:GraphQL.Types.AutoRegisteringInputObjectGraphType`1"/>, and
            <see cref="T:GraphQL.Types.AutoRegisteringObjectGraphType`1"/> as generic types.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddGraphTypes(GraphQL.DI.IGraphQLBuilder,System.Reflection.Assembly)">
            <summary>
            Scans the supplied assembly for classes that implement <see cref="T:GraphQL.Types.IGraphType"/> and registers
            them as transients within the dependency injection framework. A transient lifetime ensures
            they are only instantiated once each time the schema is built. If the schema is a scoped schema,
            the graph types will effectively be scoped graph types. If the schema is a singleton schema,
            the graph types will effectively be singleton graph types.
            <br/><br/>
            Skips classes where the class is marked with the <see cref="T:GraphQL.DoNotRegisterAttribute"/>.
            <br/><br/>
            Also registers <see cref="T:GraphQL.Types.EnumerationGraphType`1"/>, <see cref="T:GraphQL.Types.Relay.ConnectionType`1"/>,
            <see cref="T:GraphQL.Types.Relay.ConnectionType`2"/>, <see cref="T:GraphQL.Types.Relay.EdgeType`1"/>,
            <see cref="T:GraphQL.Types.InputObjectGraphType`1"/>, <see cref="T:GraphQL.Types.AutoRegisteringInputObjectGraphType`1"/>, and
            <see cref="T:GraphQL.Types.AutoRegisteringObjectGraphType`1"/> as generic types.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddClrTypeMappings(GraphQL.DI.IGraphQLBuilder)">
            <summary>
            Scans the calling assembly for classes that inherit from <see cref="T:GraphQL.Types.ObjectGraphType`1"/>,
            <see cref="T:GraphQL.Types.InputObjectGraphType`1"/>, or <see cref="T:GraphQL.Types.EnumerationGraphType`1"/>, and
            registers clr type mappings on the schema between that class and the source type or underlying enum type.
            Skips classes where the source type is <see cref="T:System.Object"/>, or where the class is marked with
            the <see cref="T:GraphQL.DoNotMapClrTypeAttribute"/>.
            </summary>
            <remarks>
            This is equivalent to calling <see cref="M:GraphQL.SchemaExtensions.RegisterTypeMappings(GraphQL.Types.ISchema)"/>
            within the schema constructor.
            </remarks>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddClrTypeMappings(GraphQL.DI.IGraphQLBuilder,System.Reflection.Assembly)">
            <summary>
            Scans the specified assembly for classes that inherit from <see cref="T:GraphQL.Types.ObjectGraphType`1"/>,
            <see cref="T:GraphQL.Types.InputObjectGraphType`1"/>, or <see cref="T:GraphQL.Types.EnumerationGraphType`1"/>, and
            registers clr type mappings on the schema between that class and the source type or underlying enum type.
            Skips classes where the source type is <see cref="T:System.Object"/>, or where the class is marked with
            the <see cref="T:GraphQL.DoNotMapClrTypeAttribute"/>.
            </summary>
            <remarks>
            This is equivalent to calling <see cref="M:GraphQL.SchemaExtensions.RegisterTypeMappings(GraphQL.Types.ISchema,System.Reflection.Assembly)"/>
            within the schema constructor.
            </remarks>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddAutoClrMappings(GraphQL.DI.IGraphQLBuilder,System.Boolean,System.Boolean)">
            <summary>
            Registers an instance of <see cref="T:GraphQL.Types.AutoRegisteringGraphTypeMappingProvider"/> with the dependency injection
            framework as a singleton of type <see cref="T:GraphQL.Types.IGraphTypeMappingProvider"/> and configures it to map input
            and/or output types to <see cref="T:GraphQL.Types.AutoRegisteringInputObjectGraphType`1"/> or
            <see cref="T:GraphQL.Types.AutoRegisteringObjectGraphType`1"/> graph types.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddDocumentListener``1(GraphQL.DI.IGraphQLBuilder,GraphQL.DI.ServiceLifetime)">
            <summary>
            Registers <typeparamref name="TDocumentListener"/> with the dependency injection framework as both <typeparamref name="TDocumentListener"/> and
            <see cref="T:GraphQL.Execution.IDocumentExecutionListener"/>. Configures document execution to add an instance of <typeparamref name="TDocumentListener"/> to the
            list of document execution listeners within <see cref="P:GraphQL.ExecutionOptions.Listeners"/>. Singleton, scoped and transient lifetimes are supported.
            </summary>
            <remarks>
            Do not separately add the document listener to your execution code or the document listener may be registered twice for the same execution.
            </remarks>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddDocumentListener``1(GraphQL.DI.IGraphQLBuilder,``0)">
            <summary>
            Registers <paramref name="documentListener"/> with the dependency injection framework as both <typeparamref name="TDocumentListener"/> and
            <see cref="T:GraphQL.Execution.IDocumentExecutionListener"/>. Configures document execution to add <paramref name="documentListener"/> to the
            list of document execution listeners within <see cref="P:GraphQL.ExecutionOptions.Listeners"/>.
            </summary>
            <remarks>
            Do not separately add the document listener to your execution code or the document listener may be registered twice for the same execution.
            </remarks>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddDocumentListener``1(GraphQL.DI.IGraphQLBuilder,System.Func{System.IServiceProvider,``0},GraphQL.DI.ServiceLifetime)">
            <summary>
            Registers <typeparamref name="TDocumentListener"/> with the dependency injection framework as both <typeparamref name="TDocumentListener"/> and
            <see cref="T:GraphQL.Execution.IDocumentExecutionListener"/>, using the supplied factory delegate. Configures document execution to add an instance of
            <typeparamref name="TDocumentListener"/> to the list of document execution listeners within <see cref="P:GraphQL.ExecutionOptions.Listeners"/>.
            Singleton, scoped and transient lifetimes are supported.
            </summary>
            <remarks>
            Do not separately add the document listener to your execution code or the document listener may be registered twice for the same execution.
            </remarks>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddMiddleware``1(GraphQL.DI.IGraphQLBuilder,System.Boolean,GraphQL.DI.ServiceLifetime)">
            <inheritdoc cref="M:GraphQL.GraphQLBuilderExtensions.UseMiddleware``1(GraphQL.DI.IGraphQLBuilder,System.Boolean,GraphQL.DI.ServiceLifetime)"/>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddMiddleware``1(GraphQL.DI.IGraphQLBuilder,System.Func{System.IServiceProvider,GraphQL.Types.ISchema,System.Boolean},GraphQL.DI.ServiceLifetime)">
            <inheritdoc cref="M:GraphQL.GraphQLBuilderExtensions.UseMiddleware``1(GraphQL.DI.IGraphQLBuilder,System.Func{System.IServiceProvider,GraphQL.Types.ISchema,System.Boolean},GraphQL.DI.ServiceLifetime)"/>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddMiddleware``1(GraphQL.DI.IGraphQLBuilder,``0,System.Boolean)">
            <inheritdoc cref="M:GraphQL.GraphQLBuilderExtensions.UseMiddleware``1(GraphQL.DI.IGraphQLBuilder,``0,System.Boolean)"/>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddMiddleware``1(GraphQL.DI.IGraphQLBuilder,``0,System.Func{System.IServiceProvider,GraphQL.Types.ISchema,System.Boolean})">
            <inheritdoc cref="M:GraphQL.GraphQLBuilderExtensions.UseMiddleware``1(GraphQL.DI.IGraphQLBuilder,``0,System.Func{System.IServiceProvider,GraphQL.Types.ISchema,System.Boolean})"/>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.UseMiddleware``1(GraphQL.DI.IGraphQLBuilder,System.Boolean,GraphQL.DI.ServiceLifetime)">
            <summary>
            Registers <typeparamref name="TMiddleware"/> with the dependency injection framework as both <typeparamref name="TMiddleware"/> and
            <see cref="T:GraphQL.Instrumentation.IFieldMiddleware"/>. If <paramref name="install"/> is <see langword="true"/>, installs the middleware by configuring schema
            construction to call <see cref="M:GraphQL.Instrumentation.FieldMiddlewareBuilderExtensions.Use(GraphQL.Instrumentation.IFieldMiddlewareBuilder,GraphQL.Instrumentation.IFieldMiddleware)">Use</see> with an instance
            of the middleware pulled from dependency injection. Transient and singleton lifetimes are supported. Transient is default, and causes the middleware
            lifetime to match that of the schema. This effectively provides singleton middleware if using a singleton schema, and scoped middleware
            if using a scoped schema. Specifying a singleton lifetime is also permissible, providing a benefit if the schema has a scoped lifetime.
            </summary>
            <remarks>
            If <paramref name="install"/> is <see langword="true"/>, do not separately install the middleware within your schema constructor or the
            middleware may be registered twice within the schema.
            </remarks>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.UseMiddleware``1(GraphQL.DI.IGraphQLBuilder,System.Func{System.IServiceProvider,GraphQL.Types.ISchema,System.Boolean},GraphQL.DI.ServiceLifetime)">
            <summary>
            Registers <typeparamref name="TMiddleware"/> with the dependency injection framework as both <typeparamref name="TMiddleware"/> and
            <see cref="T:GraphQL.Instrumentation.IFieldMiddleware"/>. Calls the <paramref name="installPredicate"/> delegate during schema construction, and if
            <see langword="true"/>, installs the middleware by configuring schema construction to call
            <see cref="M:GraphQL.Instrumentation.FieldMiddlewareBuilderExtensions.Use(GraphQL.Instrumentation.IFieldMiddlewareBuilder,GraphQL.Instrumentation.IFieldMiddleware)">Use</see> with an instance of the middleware
            pulled from dependency injection. Transient and singleton lifetimes are supported. Transient is default, and causes the middleware
            lifetime to match that of the schema. This effectively provides singleton middleware if using a singleton schema, and scoped middleware
            if using a scoped schema. Specifying a singleton lifetime is also permissible, providing a benefit if the schema has a scoped lifetime.
            </summary>
            <remarks>
            Do not separately install the middleware within your schema constructor or the middleware may be registered twice within the schema.
            </remarks>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.UseMiddleware``1(GraphQL.DI.IGraphQLBuilder,``0,System.Boolean)">
            <summary>
            Registers <paramref name="middleware"/> with the dependency injection framework as both <typeparamref name="TMiddleware"/> and
            <see cref="T:GraphQL.Instrumentation.IFieldMiddleware"/>. If <paramref name="install"/> is <see langword="true"/>, installs the middleware by configuring schema
            construction to call <see cref="M:GraphQL.Instrumentation.FieldMiddlewareBuilderExtensions.Use(GraphQL.Instrumentation.IFieldMiddlewareBuilder,GraphQL.Instrumentation.IFieldMiddleware)">Use</see> with an instance
            of the middleware pulled from dependency injection. Transient and singleton lifetimes are supported. Transient is default, and causes the middleware
            lifetime to match that of the schema. This effectively provides singleton middleware if using a singleton schema, and scoped middleware
            if using a scoped schema. Specifying a singleton lifetime is also permissible, providing a benefit if the schema has a scoped lifetime.
            </summary>
            <remarks>
            If <paramref name="install"/> is <see langword="true"/>, do not separately install the middleware within your schema constructor or the
            middleware may be registered twice within the schema.
            </remarks>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.UseMiddleware``1(GraphQL.DI.IGraphQLBuilder,``0,System.Func{System.IServiceProvider,GraphQL.Types.ISchema,System.Boolean})">
            <summary>
            Registers <paramref name="middleware"/> with the dependency injection framework as both <typeparamref name="TMiddleware"/> and
            <see cref="T:GraphQL.Instrumentation.IFieldMiddleware"/>. Calls the <paramref name="installPredicate"/> delegate during schema construction, and if
            <see langword="true"/>, installs the middleware by configuring schema construction to call
            <see cref="M:GraphQL.Instrumentation.FieldMiddlewareBuilderExtensions.Use(GraphQL.Instrumentation.IFieldMiddlewareBuilder,GraphQL.Instrumentation.IFieldMiddleware)">Use</see> with an instance of the middleware
            pulled from dependency injection. Transient and singleton lifetimes are supported. Transient is default, and causes the middleware
            lifetime to match that of the schema. This effectively provides singleton middleware if using a singleton schema, and scoped middleware
            if using a scoped schema. Specifying a singleton lifetime is also permissible, providing a benefit if the schema has a scoped lifetime.
            </summary>
            <remarks>
            Do not separately install the middleware within your schema constructor or the middleware may be registered twice within the schema.
            </remarks>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddSerializer``1(GraphQL.DI.IGraphQLBuilder)">
            <summary>
            Registers <typeparamref name="TSerializer"/> as a singleton of type <see cref="T:GraphQL.IGraphQLSerializer"/> within the
            dependency injection framework.
            If supported, the class is also registered as type <see cref="T:GraphQL.IGraphQLTextSerializer"/>.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddSerializer``1(GraphQL.DI.IGraphQLBuilder,``0)">
            <summary>
            Registers <paramref name="serializer"/> as a singleton of type <see cref="T:GraphQL.IGraphQLSerializer"/> within the
            dependency injection framework.
            If supported, the class is also registered as type <see cref="T:GraphQL.IGraphQLTextSerializer"/>.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddSerializer``1(GraphQL.DI.IGraphQLBuilder,System.Func{System.IServiceProvider,``0})">
            <summary>
            Registers <typeparamref name="TSerializer"/> as a singleton of type <see cref="T:GraphQL.IGraphQLSerializer"/> within the
            dependency injection framework. The supplied factory method is used to create the serializer.
            If supported, the class is also registered as type <see cref="T:GraphQL.IGraphQLTextSerializer"/>.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.ConfigureSchema(GraphQL.DI.IGraphQLBuilder,System.Action{GraphQL.Types.ISchema})">
            <summary>
            Configures an action to run prior to the code within the schema's constructor.
            Assumes that the schema derives from <see cref="T:GraphQL.Types.Schema"/>.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.ConfigureSchema(GraphQL.DI.IGraphQLBuilder,System.Action{GraphQL.Types.ISchema,System.IServiceProvider})">
            <inheritdoc cref="M:GraphQL.GraphQLBuilderExtensions.ConfigureSchema(GraphQL.DI.IGraphQLBuilder,System.Action{GraphQL.Types.ISchema})"/>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.ConfigureExecutionOptions(GraphQL.DI.IGraphQLBuilder,System.Action{GraphQL.ExecutionOptions})">
            <summary>
            Configures an action to configure execution options, which run prior to calls to
            <see cref="M:GraphQL.GraphQLBuilderExtensions.ConfigureExecution(GraphQL.DI.IGraphQLBuilder,System.Func{GraphQL.ExecutionOptions,GraphQL.DI.ExecutionDelegate,System.Threading.Tasks.Task{GraphQL.ExecutionResult}})">ConfigureExecution</see>
            and other Use calls such as <see cref="M:GraphQL.GraphQLBuilderExtensions.UseApolloTracing(GraphQL.DI.IGraphQLBuilder,System.Boolean)">UseApolloTracing</see>.
            <br/><br/>
            Assumes that the document executer is <see cref="T:GraphQL.DocumentExecuter"/>, or that it derives from <see cref="T:GraphQL.DocumentExecuter"/> and calls
            <see cref="M:GraphQL.DocumentExecuter.#ctor(GraphQL.Execution.IDocumentBuilder,GraphQL.Validation.IDocumentValidator,GraphQL.Execution.IExecutionStrategySelector,System.Collections.Generic.IEnumerable{GraphQL.DI.IConfigureExecution})"/>
            within the constructor.
            </summary>
            <remarks>
            <see cref="P:GraphQL.ExecutionOptions.RequestServices"/> can be used within the delegate to access the service provider for this execution.
            </remarks>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.ConfigureExecutionOptions(GraphQL.DI.IGraphQLBuilder,System.Func{GraphQL.ExecutionOptions,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:GraphQL.GraphQLBuilderExtensions.ConfigureExecutionOptions(GraphQL.DI.IGraphQLBuilder,System.Action{GraphQL.ExecutionOptions})"/>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.ConfigureExecution(GraphQL.DI.IGraphQLBuilder,System.Func{GraphQL.ExecutionOptions,GraphQL.DI.ExecutionDelegate,System.Threading.Tasks.Task{GraphQL.ExecutionResult}})">
            <summary>
            Configures an action that can modify or replace document execution behavior, which runs after options configuration
            and immediately prior to document execution along with other calls to Use methods such as <see cref="M:GraphQL.GraphQLBuilderExtensions.UseApolloTracing(GraphQL.DI.IGraphQLBuilder,System.Boolean)">UseApolloTracing</see>.
            </summary>
            <remarks>
            <see cref="P:GraphQL.ExecutionOptions.RequestServices"/> can be used within the delegate to access the service provider for this execution.
            </remarks>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.ConfigureExecution``1(GraphQL.DI.IGraphQLBuilder)">
            <summary>
            Configures an action that can modify or replace document execution behavior.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.ConfigureExecution``1(GraphQL.DI.IGraphQLBuilder,``0)">
            <inheritdoc cref="M:GraphQL.GraphQLBuilderExtensions.ConfigureExecution``1(GraphQL.DI.IGraphQLBuilder)"/>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.ConfigureExecution``1(GraphQL.DI.IGraphQLBuilder,System.Func{System.IServiceProvider,``0})">
            <inheritdoc cref="M:GraphQL.GraphQLBuilderExtensions.ConfigureExecution``1(GraphQL.DI.IGraphQLBuilder)"/>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddValidationRule``1(GraphQL.DI.IGraphQLBuilder,System.Boolean)">
            <summary>
            Registers <typeparamref name="TValidationRule"/> as a singleton within the dependency injection framework
            as <typeparamref name="TValidationRule"/> and as <see cref="T:GraphQL.Validation.IValidationRule"/>.
            Configures document execution to add the validation rule within <see cref="P:GraphQL.ExecutionOptions.ValidationRules"/>.
            When <paramref name="useForCachedDocuments"/> is <see langword="true"/>, also configures document execution to
            add the validation rule within <see cref="P:GraphQL.ExecutionOptions.CachedDocumentValidationRules"/>.
            </summary>
            <remarks>
            If <paramref name="useForCachedDocuments"/> is <see langword="true"/>, do not separately install the validation rule within
            your execution code or the validation rule may be run twice for each execution.
            </remarks>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddValidationRule``1(GraphQL.DI.IGraphQLBuilder,``0,System.Boolean)">
            <summary>
            Registers <paramref name="validationRule"/> as a singleton within the dependency injection framework
            as <typeparamref name="TValidationRule"/> and as <see cref="T:GraphQL.Validation.IValidationRule"/>.
            Configures document execution to add the validation rule within <see cref="P:GraphQL.ExecutionOptions.ValidationRules"/>.
            When <paramref name="useForCachedDocuments"/> is <see langword="true"/>, also configures document execution to
            add the validation rule within <see cref="P:GraphQL.ExecutionOptions.CachedDocumentValidationRules"/>.
            </summary>
            <remarks>
            If <paramref name="useForCachedDocuments"/> is <see langword="true"/>, do not separately install the validation rule within
            your execution code or the validation rule may be run twice for each execution.
            </remarks>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddValidationRule``1(GraphQL.DI.IGraphQLBuilder,System.Func{System.IServiceProvider,``0},System.Boolean)">
            <summary>
            Registers <typeparamref name="TValidationRule"/> as a singleton within the dependency injection framework
            as <typeparamref name="TValidationRule"/> and as <see cref="T:GraphQL.Validation.IValidationRule"/> using the specified factory delegate.
            Configures document execution to add the validation rule within <see cref="P:GraphQL.ExecutionOptions.ValidationRules"/>.
            When <paramref name="useForCachedDocuments"/> is <see langword="true"/>, also configures document execution to
            add the validation rule within <see cref="P:GraphQL.ExecutionOptions.CachedDocumentValidationRules"/>.
            </summary>
            <remarks>
            If <paramref name="useForCachedDocuments"/> is <see langword="true"/>, do not separately install the validation rule within
            your execution code or the validation rule may be run twice for each execution.
            </remarks>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddApolloTracing(GraphQL.DI.IGraphQLBuilder,System.Boolean)">
            <inheritdoc cref="M:GraphQL.GraphQLBuilderExtensions.UseApolloTracing(GraphQL.DI.IGraphQLBuilder,System.Boolean)"/>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddApolloTracing(GraphQL.DI.IGraphQLBuilder,System.Func{GraphQL.ExecutionOptions,System.Boolean})">
            <inheritdoc cref="M:GraphQL.GraphQLBuilderExtensions.UseApolloTracing(GraphQL.DI.IGraphQLBuilder,System.Func{GraphQL.ExecutionOptions,System.Boolean})"/>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.UseApolloTracing(GraphQL.DI.IGraphQLBuilder,System.Boolean)">
            <summary>
            Registers <see cref="T:GraphQL.Instrumentation.InstrumentFieldsMiddleware"/> within the dependency injection framework and
            configures it to be installed within the schema, and configures responses to include Apollo
            Tracing data when enabled via <see cref="P:GraphQL.ExecutionOptions.EnableMetrics"/>.
            When <paramref name="enableMetrics"/> is <see langword="true"/>, configures execution to set
            <see cref="P:GraphQL.ExecutionOptions.EnableMetrics"/> to <see langword="true"/>; otherwise leaves it unchanged.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.UseApolloTracing(GraphQL.DI.IGraphQLBuilder,System.Func{GraphQL.ExecutionOptions,System.Boolean})">
            <summary>
            Registers <see cref="T:GraphQL.Instrumentation.InstrumentFieldsMiddleware"/> within the dependency injection framework and
            configures it to be installed within the schema, and configures responses to include Apollo
            Tracing data when enabled via <see cref="P:GraphQL.ExecutionOptions.EnableMetrics"/>.
            Configures execution to run <paramref name="enableMetricsPredicate"/> and when <see langword="true"/>, sets
            <see cref="P:GraphQL.ExecutionOptions.EnableMetrics"/> to <see langword="true"/>; otherwise leaves it unchanged.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddExecutionStrategySelector``1(GraphQL.DI.IGraphQLBuilder)">
            <summary>
            Registers <typeparamref name="TExecutionStrategySelector"/> with the dependency injection framework as
            a singleton of type <see cref="T:GraphQL.Execution.IExecutionStrategySelector"/>.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddExecutionStrategySelector``1(GraphQL.DI.IGraphQLBuilder,``0)">
            <summary>
            Registers <paramref name="executionStrategySelector"/> with the dependency injection framework as
            a singleton of type <see cref="T:GraphQL.Execution.IExecutionStrategySelector"/>.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddExecutionStrategySelector``1(GraphQL.DI.IGraphQLBuilder,System.Func{System.IServiceProvider,``0})">
            <summary>
            Registers <typeparamref name="TExecutionStrategySelector"/> with the dependency injection framework as
            a singleton of type <see cref="T:GraphQL.Execution.IExecutionStrategySelector"/>, using the supplied factory delegate.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddExecutionStrategy``1(GraphQL.DI.IGraphQLBuilder,GraphQLParser.AST.OperationType)">
            <summary>
            Registers <typeparamref name="TExecutionStrategy"/> with the dependency injection framework as
            a singleton, and registers an <see cref="T:GraphQL.Execution.ExecutionStrategyRegistration"/> for this <typeparamref name="TExecutionStrategy"/>
            configured for the selected <paramref name="operationType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddExecutionStrategy``1(GraphQL.DI.IGraphQLBuilder,``0,GraphQLParser.AST.OperationType)">
            <summary>
            Registers a <see cref="T:GraphQL.Execution.ExecutionStrategyRegistration"/> with the dependency injection framework
            for the specified <paramref name="executionStrategy"/> and <paramref name="operationType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLBuilderExtensions.AddExecutionStrategy``1(GraphQL.DI.IGraphQLBuilder,System.Func{System.IServiceProvider,``0},GraphQLParser.AST.OperationType)">
            <summary>
            Registers an <see cref="T:GraphQL.Execution.ExecutionStrategyRegistration"/> with the dependency injection framework
            as a singleton for the specified <typeparamref name="TExecutionStrategy"/> and <paramref name="operationType"/>,
            using the supplied factory delegate.
            </summary>
        </member>
        <member name="T:GraphQL.GraphQLExtensions">
            <summary>
            Provides extension methods for working with graph types.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.IsIntrospectionType(GraphQL.Types.IGraphType)">
            <summary>
            Determines if this graph type is an introspection type.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.IsCompositeType(GraphQL.Types.IGraphType)">
            <summary>
            Indicates if the graph type is a union, interface or object graph type.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.IsLeafType(GraphQL.Types.IGraphType)">
            <summary>
            Indicates if the graph type is a scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.IsInputType(System.Type)">
            <summary>
            Indicates if the type is an input graph type (scalar or input object).
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.IsInputType(GraphQL.Types.IGraphType)">
            <summary>
            Indicates if the graph type is an input graph type (scalar or input object).
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.IsOutputType(System.Type)">
            <summary>
            Indicates if the type is an output graph type (scalar, object, interface or union).
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.IsOutputType(GraphQL.Types.IGraphType)">
            <summary>
            Indicates if the graph type is an output graph type (scalar, object, interface or union).
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.IsInputObjectType(GraphQL.Types.IGraphType)">
            <summary>
            Indicates if the graph type is an input object graph type.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.GetNamedType(GraphQL.Types.IGraphType)">
            <summary>
            Unwraps any list/non-null graph type wrappers from a graph type and returns the base graph type.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.GetNamedType(System.Type)">
            <summary>
            Unwraps any list/non-null graph type wrappers from a graph type and returns the base graph type.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.IsValidInterfaceFor(GraphQL.Types.IInterfaceGraphType,GraphQL.Types.IObjectGraphType,System.Boolean)">
            <summary>
            An Interface defines a list of fields; Object types that implement that interface are guaranteed to implement those fields.
            Whenever the type system claims it will return an interface, it will return a valid implementing type.
            </summary>
            <param name="iface">The interface graph type.</param>
            <param name="type">The object graph type to verify it against.</param>
            <param name="throwError">Set to <see langword="true"/> to generate an error if the type does not match the interface.</param>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.NameOf``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Examines a simple lambda expression and returns the name of the member it references.
            For instance, returns <c>Widget</c> given an expression of <c>x => x.Widget</c>.
            Unable to parse any expressions that are more complex than a simple member access.
            Throws an <see cref="T:System.InvalidCastException"/> if the expression is not a simple member access.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.DescriptionOf``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Examines a simple lambda expression and returns the description of the member it
            references as listed by a <see cref="T:System.ComponentModel.DescriptionAttribute"/>.
            Unable to parse any expressions that are more complex than a simple member access.
            Returns <see langword="null"/> if the expression is not a simple member access.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.DeprecationReasonOf``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Examines a simple lambda expression and returns the deprecation reason of the member it
            references as listed by a <see cref="T:System.ObsoleteAttribute"/>.
            Unable to parse any expressions that are more complex than a simple member access.
            Returns <see langword="null"/> if the expression is not a simple member access.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.DefaultValueOf``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Examines a simple lambda expression and returns the default value of the member it
            references as listed by a <see cref="T:System.ComponentModel.DefaultValueAttribute"/>.
            Unable to parse any expressions that are more complex than a simple member access.
            Returns <see langword="null"/> if the expression is not a simple member access.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.WithMetadata``1(``0,System.String,System.Object)">
            <summary>
            Adds a key-value metadata pair to the specified provider.
            </summary>
            <typeparam name="TMetadataProvider">The type of metadata provider. Generics are used here to let compiler infer the returning type to allow methods chaining.</typeparam>
            <param name="provider">Metadata provider which must implement <see cref="T:GraphQL.Types.IProvideMetadata"/> interface.</param>
            <param name="key">String key.</param>
            <param name="value">Arbitrary value.</param>
            <returns>The reference to the specified <paramref name="provider"/>.</returns>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.IsSubtypeOf(GraphQL.Types.IGraphType,GraphQL.Types.IGraphType)">
            <summary>
            Provided a type and a super type, return <see langword="true"/> if the first type is either
            equal or a subset of the second super type (covariant).
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.DoTypesOverlap(GraphQL.Types.IGraphType,GraphQL.Types.IGraphType)">
             <summary>
             Provided two composite types, determine if they "overlap". Two composite
             types overlap when the Sets of possible concrete types for each intersect.
            
             This is often used to determine if a fragment of a given type could possibly
             be visited in a context of another type.
            
             This function is commutative.
             </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.IsValidDefault(GraphQL.Types.IGraphType,System.Object)">
            <summary>
            Returns a value indicating whether the provided value is a valid default value
            for the specified input graph type.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.ToAST(GraphQL.Types.IGraphType,System.Object)">
            <summary>
            Attempts to serialize a value into an AST representation for a specified graph type.
            May throw exceptions during the serialization process.
            </summary>
        </member>
        <member name="M:GraphQL.GraphQLExtensions.Print(GraphQLParser.AST.ASTNode)">
            <summary>
            Returns a string representation of the specified node.
            </summary>
        </member>
        <member name="T:GraphQL.MemoryExtensions">
            <summary>
            Provides extension methods for working with arrays and pools.
            </summary>
        </member>
        <member name="M:GraphQL.MemoryExtensions.Constrained``1(``0[],System.Int32)">
            <summary>
            Returns an array or array-like object of a given length.
            </summary>
        </member>
        <member name="T:GraphQL.ObjectExtensions">
            <summary>
            Provides extension methods for objects and a method for converting a dictionary into a strongly typed object.
            </summary>
        </member>
        <member name="M:GraphQL.ObjectExtensions.ToObject``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new instance of the indicated type, populating it with the dictionary.
            </summary>
            <typeparam name="T">The type to create.</typeparam>
            <param name="source">The source of values.</param>
            <returns>T.</returns>
        </member>
        <member name="M:GraphQL.ObjectExtensions.ToObject(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,GraphQL.Types.IGraphType)">
            <summary>
            Creates a new instance of the indicated type, populating it with the dictionary.
            Can use any constructor of the indicated type, provided that there are keys in the
            dictionary that correspond (case sensitive) to the names of the constructor parameters.
            </summary>
            <param name="source">The source of values.</param>
            <param name="type">The type to create.</param>
            <param name="mappedType">
            GraphType for matching dictionary keys with <paramref name="type"/> property names.
            GraphType contains information about this matching in Metadata property.
            In case of configuring field as Field(x => x.FName).Name("FirstName") source dictionary
            will have 'FirstName' key but its value should be set to 'FName' property of created object.
            </param>
        </member>
        <member name="M:GraphQL.ObjectExtensions.GetPropertyValue(System.Object,System.Type,GraphQL.Types.IGraphType)">
            <summary>
            Converts the indicated value into a type that is compatible with fieldType.
            </summary>
            <param name="propertyValue">The value to be converted.</param>
            <param name="fieldType">The desired type.</param>
            <param name="mappedType">
            GraphType for matching dictionary keys with <paramref name="fieldType"/> property names.
            GraphType contains information about this matching in Metadata property.
            In case of configuring field as Field(x => x.FName).Name("FirstName") source dictionary
            will have 'FirstName' key but its value should be set to 'FName' property of created object.
            </param>
            <remarks>There is special handling for strings, IEnumerable&lt;T&gt;, Nullable&lt;T&gt;, and Enum.</remarks>
        </member>
        <member name="M:GraphQL.ObjectExtensions.IsDefinedEnumValue(System.Type,System.Object)">
            <summary>
            Returns <see langword="true"/> if the value is <see langword="null"/>, value.ToString equals an empty string, or the value can be converted into a named enum value.
            </summary>
            <param name="type">An enum type.</param>
            <param name="value">The value being tested.</param>
        </member>
        <member name="M:GraphQL.ObservableExtensions.SelectCatchAsync``2(System.IObservable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Func{System.Exception,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{System.Exception}})">
            <summary>
            <para>
            Applies an asynchronous transformation on data events from an <see cref="T:System.IObservable`1"/>.
            Maintains the order of the events produced by the <see cref="T:System.IObservable`1"/>
            whether they are data, error or completion notifications.
            </para>
            <para>
            Ensures that after a subscription has been disposed,
            no more events will be raised (data, error or completion), and signals
            pending asynchronous transformations that a cancellation has been requested.
            </para>
            <para>
            Also preserves the <see cref="T:System.Threading.ExecutionContext"/> of the calling
            method and restores it during the subsequent asynchronous transformations.
            </para>
            <para>
            Exceptions passed by the source through <see cref="M:System.IObserver`1.OnError(System.Exception)"/> or
            generated by <paramref name="transformNext"/> are handled by <paramref name="transformError"/>.
            </para>
            </summary>
        </member>
        <member name="M:GraphQL.ObservableExtensions.SelectCatchAsyncObservable`2.Subscribe(System.IObserver{`1})">
            <summary>
            Subscribes to the underlying <see cref="T:System.IObservable`1"/> with the
            transformation specified by this instance.
            <br/><br/>
            Disconnection requests via the returned <see cref="T:System.IDisposable"/> interface
            are passed to the underlying <see cref="T:System.IObservable`1"/> and also used
            to signal pending asynchronous tasks that cancellation has been requested
            and also used to prevent further event notifications.
            <br/><br/>
            Exceptions during the call to the underlying <see cref="M:System.IObservable`1.Subscribe(System.IObserver{`0})"/>
            method are caught, transformed, and a subscription is created which will immediately produce an error and terminate.
            This allows these errors to be handled by the unhandled exception delegate.
            </summary>
        </member>
        <member name="M:GraphQL.ObservableExtensions.SelectCatchAsyncObservable`2.Observer.Queue(GraphQL.ObservableExtensions.SelectCatchAsyncObservable{`0,`1}.Observer.QueueType,System.Threading.Tasks.ValueTask{`1},System.Threading.Tasks.ValueTask{System.Exception})">
            <summary>
            Queues the specified event and if necessary starts watching for an event to complete.
            </summary>
        </member>
        <member name="M:GraphQL.ObservableExtensions.SelectCatchAsyncObservable`2.Observer.ProcessAllEventsInQueueAsync">
            <summary>
            Processes data from the queue in order (or raises errors or completed notifications);
            executes until the queue is empty.
            </summary>
        </member>
        <member name="M:GraphQL.ObservableExtensions.SelectCatchAsyncObservable`2.Observer.ProcessDataAsync(System.Threading.Tasks.ValueTask{`1})">
            <summary>
            Wait for the transform to complete and push the data (or error) back to the observer.
            If the observer has been disposed, then data and errors are ignored.
            </summary>
        </member>
        <member name="M:GraphQL.ObservableExtensions.SelectCatchAsyncObservable`2.Observer.ProcessErrorAsync(System.Threading.Tasks.ValueTask{System.Exception})">
            <summary>
            Wait for the transform to complete and push the error back to the observer.
            If the observer has been disposed, then errors are ignored.
            </summary>
        </member>
        <member name="M:GraphQL.ObservableExtensions.SelectCatchAsyncObservable`2.Observer.ProcessCompletion">
            <summary>
            Push a completion notice back to the observer.
            If the observer has been disposed, ignore.
            </summary>
        </member>
        <member name="M:GraphQL.ObservableExtensions.SelectCatchAsyncObservable`2.Observer.Dispose">
            <summary>
            Disposes of the underlying observable subscription
            </summary>
        </member>
        <member name="T:GraphQL.ObservableExtensions.SelectCatchAsyncObservable`2.Observer.QueueEvent">
            <summary>
            Represents a single event in the queue.
            </summary>
            <param name="Type">The type of the event.</param>
            <param name="Data">For data events, the <see cref="T:System.Threading.Tasks.Task`1"/> containing a <typeparamref name="TOut"/>.</param>
            <param name="Error">For error events, the <see cref="T:System.Threading.Tasks.Task`1"/> containing an <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="M:GraphQL.ObservableExtensions.SelectCatchAsyncObservable`2.Observer.QueueEvent.#ctor(GraphQL.ObservableExtensions.SelectCatchAsyncObservable{`0,`1}.Observer.QueueType,System.Threading.Tasks.ValueTask{`1},System.Threading.Tasks.ValueTask{System.Exception})">
            <summary>
            Represents a single event in the queue.
            </summary>
            <param name="Type">The type of the event.</param>
            <param name="Data">For data events, the <see cref="T:System.Threading.Tasks.Task`1"/> containing a <typeparamref name="TOut"/>.</param>
            <param name="Error">For error events, the <see cref="T:System.Threading.Tasks.Task`1"/> containing an <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="P:GraphQL.ObservableExtensions.SelectCatchAsyncObservable`2.Observer.QueueEvent.Type">
            <summary>The type of the event.</summary>
        </member>
        <member name="P:GraphQL.ObservableExtensions.SelectCatchAsyncObservable`2.Observer.QueueEvent.Data">
            <summary>For data events, the <see cref="T:System.Threading.Tasks.Task`1"/> containing a <typeparamref name="TOut"/>.</summary>
        </member>
        <member name="P:GraphQL.ObservableExtensions.SelectCatchAsyncObservable`2.Observer.QueueEvent.Error">
            <summary>For error events, the <see cref="T:System.Threading.Tasks.Task`1"/> containing an <see cref="T:System.Exception"/>.</summary>
        </member>
        <member name="T:GraphQL.ObservableExtensions.SelectCatchAsyncObservable`2.Observer.QueueType">
            <summary>
            The type of the event.
            </summary>
        </member>
        <member name="T:GraphQL.SchemaExtensions">
            <summary>
            Provides extension methods for schemas.
            </summary>
        </member>
        <member name="M:GraphQL.SchemaExtensions.RegisterVisitor``1(GraphQL.Types.ISchema)">
            <summary>
            Adds the specified visitor type to the schema. When initializing a schema, all
            registered visitors will be executed on each schema element when it is traversed.
            </summary>
        </member>
        <member name="M:GraphQL.SchemaExtensions.RegisterType``1(GraphQL.Types.ISchema)">
            <summary>
            Adds the specified graph type to the schema.
            <br/><br/>
            Not typically required as schema initialization will scan the <see cref="P:GraphQL.Types.ISchema.Query"/>,
            <see cref="P:GraphQL.Types.ISchema.Mutation"/> and <see cref="P:GraphQL.Types.ISchema.Subscription"/> graphs, creating
            instances of <see cref="T:GraphQL.Types.IGraphType"/>s referenced therein as necessary.
            </summary>
        </member>
        <member name="M:GraphQL.SchemaExtensions.RegisterTypes``1(``0,System.Type[])">
            <summary>
            Adds the specified graph types to the schema. Each type must implement <see cref="T:GraphQL.Types.IGraphType"/>.
            <br/><br/>
            Not typically required as schema initialization will scan the <see cref="P:GraphQL.Types.ISchema.Query"/>,
            <see cref="P:GraphQL.Types.ISchema.Mutation"/> and <see cref="P:GraphQL.Types.ISchema.Subscription"/> graphs, creating
            instances of <see cref="T:GraphQL.Types.IGraphType"/>s referenced therein as necessary.
            </summary>
        </member>
        <member name="M:GraphQL.SchemaExtensions.RegisterTypes``1(``0,GraphQL.Types.IGraphType[])">
            <summary>
            Adds the specified instances of <see cref="T:GraphQL.Types.IGraphType"/>s to the schema.
            <br/><br/>
            Not typically required as schema initialization will scan the <see cref="P:GraphQL.Types.ISchema.Query"/>,
            <see cref="P:GraphQL.Types.ISchema.Mutation"/> and <see cref="P:GraphQL.Types.ISchema.Subscription"/> graphs, creating
            instances of <see cref="T:GraphQL.Types.IGraphType"/>s referenced therein as necessary.
            </summary>
        </member>
        <member name="M:GraphQL.SchemaExtensions.RegisterTypeMapping``2(GraphQL.Types.ISchema)">
            <summary>
            Registers type mapping from CLR type to GraphType.
            <br/>
            These mappings are used for type inference when constructing fields using expressions:
            <br/>
            <c>
            Field(x => x.Filters);
            </c>
            </summary>
            <typeparam name="TClrType">The CLR property type from which to infer the GraphType.</typeparam>
            <typeparam name="TGraphType">Inferred GraphType.</typeparam>
        </member>
        <member name="M:GraphQL.SchemaExtensions.Preserve``1">
            <summary>
            Prevents <typeparamref name="T"/> from being trimmed by the linker.
            </summary>
        </member>
        <member name="M:GraphQL.SchemaExtensions.AutoRegister(GraphQL.Types.ISchema,System.Type,GraphQL.AutoRegisteringMode)">
            <summary>
            Registers type mapping from CLR type to <see cref="T:GraphQL.Types.AutoRegisteringObjectGraphType`1"/> and/or <see cref="T:GraphQL.Types.AutoRegisteringInputObjectGraphType`1"/>.
            <br/>
            These mappings are used for type inference when constructing fields using expressions:
            <br/>
            <c>
            Field(x => x.Filters);
            </c>
            </summary>
            <param name="schema">The schema for which the mapping is registered.</param>
            <param name="clrType">The CLR property type from which to infer the GraphType.</param>
            <param name="mode">Which registering mode to use - input only, output only or both.</param>
        </member>
        <member name="M:GraphQL.SchemaExtensions.AutoRegister``1(GraphQL.Types.ISchema,GraphQL.AutoRegisteringMode)">
            <summary>
            Registers type mapping from CLR type to <see cref="T:GraphQL.Types.AutoRegisteringObjectGraphType`1"/> and/or <see cref="T:GraphQL.Types.AutoRegisteringInputObjectGraphType`1"/>.
            <br/>
            These mappings are used for type inference when constructing fields using expressions:
            <br/>
            <c>
            Field(x => x.Filters);
            </c>
            </summary>
            <param name="schema">The schema for which the mapping is registered.</param>
            <typeparam name="TClrType">The CLR property type from which to infer the GraphType.</typeparam>
            <param name="mode">Which registering mode to use - input only, output only or both.</param>
        </member>
        <member name="M:GraphQL.SchemaExtensions.RegisterTypeMappings(GraphQL.Types.ISchema)">
            <summary>
            Scans the calling assembly for classes that inherit from <see cref="T:GraphQL.Types.ObjectGraphType`1"/>,
            <see cref="T:GraphQL.Types.InputObjectGraphType`1"/>, or <see cref="T:GraphQL.Types.EnumerationGraphType`1"/>, and
            registers clr type mappings on the schema between that class and the source type or underlying enum type.
            Skips classes where the source type is <see cref="T:System.Object"/>, or where the class is marked with
            the <see cref="T:GraphQL.DoNotMapClrTypeAttribute"/>.
            </summary>
            <remarks>
            This method uses reflection and therefor is inheritly slow, especially with a large assembly.
            When using a scoped schema, it is faster to call
            <see cref="M:GraphQL.GraphQLBuilderExtensions.AddClrTypeMappings(GraphQL.DI.IGraphQLBuilder)"/> as it will precompute
            the mappings prior to execution.
            </remarks>
        </member>
        <member name="M:GraphQL.SchemaExtensions.RegisterTypeMappings(GraphQL.Types.ISchema,System.Reflection.Assembly)">
            <summary>
            Scans the specified assembly for classes that inherit from <see cref="T:GraphQL.Types.ObjectGraphType`1"/>,
            <see cref="T:GraphQL.Types.InputObjectGraphType`1"/>, or <see cref="T:GraphQL.Types.EnumerationGraphType`1"/>, and
            registers clr type mappings on the schema between that class and the source type or underlying enum type.
            Skips classes where the source type is <see cref="T:System.Object"/>, or where the class is marked with
            the <see cref="T:GraphQL.DoNotMapClrTypeAttribute"/>.
            </summary>
            <remarks>
            This method uses reflection and therefor is inheritly slow, especially with a large assembly.
            When using a scoped schema, it is faster to call
            <see cref="M:GraphQL.GraphQLBuilderExtensions.AddClrTypeMappings(GraphQL.DI.IGraphQLBuilder,System.Reflection.Assembly)"/> as it will
            precompute the mappings prior to execution.
            </remarks>
        </member>
        <member name="M:GraphQL.SchemaExtensions.EnableExperimentalIntrospectionFeatures``1(``0,GraphQL.ExperimentalIntrospectionFeaturesMode)">
            <summary>
            Enables some experimental features that are not in the official specification, i.e. ability to expose
            user-defined meta-information via introspection. See https://github.com/graphql/graphql-spec/issues/300
            for more information. This method must be called before schema initialization.
            <br/><br/>
            Keep in mind that the implementation of experimental features can change over time, up to their complete
            removal, if the official specification is supplemented with all the missing features.
            </summary>
            <typeparam name="TSchema">Type of the schema.</typeparam>
            <param name="schema">The schema for which the features are enabled.</param>
            <param name="mode">Experimental features mode.</param>
            <returns>Reference to the provided <paramref name="schema"/>.</returns>
        </member>
        <member name="M:GraphQL.SchemaExtensions.ExecuteAsync(GraphQL.Types.ISchema,GraphQL.IGraphQLTextSerializer,System.Action{GraphQL.ExecutionOptions})">
            <summary>
            Executes a GraphQL request with the default <see cref="T:GraphQL.DocumentExecuter"/>, serializes the result using the specified <see cref="T:GraphQL.IGraphQLTextSerializer"/>, and returns the result
            </summary>
            <param name="schema">An instance of <see cref="T:GraphQL.Types.ISchema"/> to use to execute the query</param>
            <param name="serializer">An instance of <see cref="T:GraphQL.IGraphQLTextSerializer"/> to use to serialize the result</param>
            <param name="configure">A delegate which configures the execution options</param>
        </member>
        <member name="M:GraphQL.SchemaExtensions.Run(GraphQL.Utilities.ISchemaNodeVisitor,GraphQL.Types.ISchema)">
            <summary>
            Runs the specified visitor on the specified schema. This method traverses
            all the schema elements and calls the appropriate visitor methods.
            </summary>
        </member>
        <member name="M:GraphQL.SchemaExtensions.ReplaceScalar``1(``0,GraphQL.Types.ScalarGraphType)">
            <summary>
            Replaces one scalar in the schema to another with the same name.
            </summary>
            <typeparam name="TSchema">Type of the schema.</typeparam>
            <param name="schema">The schema for which to replace the scalar.</param>
            <param name="scalar">New scalar. The replacement occurs by its name.</param>
            <returns>Reference to the provided <paramref name="schema"/>.</returns>
        </member>
        <member name="T:GraphQL.ExperimentalIntrospectionFeaturesMode">
            <summary>
            A way to use experimental features.
            </summary>
        </member>
        <member name="F:GraphQL.ExperimentalIntrospectionFeaturesMode.ExecutionOnly">
            <summary>
            Allow experimental features only for client queries but not for standard introspection
            request. This means that the client, in response to a standard introspection request,
            receives a standard response without any new fields and types. However, client CAN
            make requests to the server using the new fields and types. This mode is needed in order
            to bypass the problem of tools such as GraphQL Playground, Voyager, GraphiQL that require
            a standard response to an introspection request and refuse to work correctly if there are
            any unknown fields or types in the response.
            </summary>
        </member>
        <member name="F:GraphQL.ExperimentalIntrospectionFeaturesMode.IntrospectionAndExecution">
            <summary>
            Allow experimental features for both standard introspection query and client queries.
            This means that the client, in response to a standard introspection request, receives
            a response augmented with the new fields and types. Client can make requests to the
            server using the new fields and types.
            </summary>
        </member>
        <member name="T:GraphQL.AutoRegisteringMode">
            <summary>
            Mode used for <see cref="M:GraphQL.SchemaExtensions.AutoRegister(GraphQL.Types.ISchema,System.Type,GraphQL.AutoRegisteringMode)"/> method.
            </summary>
        </member>
        <member name="F:GraphQL.AutoRegisteringMode.Input">
            <summary>
            Register only input type mapping.
            </summary>
        </member>
        <member name="F:GraphQL.AutoRegisteringMode.Output">
            <summary>
            Register only output type mapping.
            </summary>
        </member>
        <member name="F:GraphQL.AutoRegisteringMode.Both">
            <summary>
            Register both input and output type mappings.
            </summary>
        </member>
        <member name="T:GraphQL.StringExtensions">
            <summary>
            Provides extension methods for strings.
            </summary>
        </member>
        <member name="M:GraphQL.StringExtensions.ToFormat(System.String,System.Object[])">
            <summary>
            Equivalent to String.Format.
            </summary>
            <param name="format">The format string in String.Format style.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:GraphQL.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Returns a camel case version of the string.
            </summary>
            <param name="s">The source string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:GraphQL.StringExtensions.ToPascalCase(System.String)">
            <summary>
            Returns a pascal case version of the string.
            </summary>
            <param name="s">The source string.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:GraphQL.StringExtensions.ToConstantCase(System.String)">
            <summary>
            Returns a constant case version of this string. For example, converts 'StringError' into 'STRING_ERROR'.
            </summary>
        </member>
        <member name="M:GraphQL.StringExtensions.TrimGraphQLTypes(System.String)">
            <summary>
            Removes brackets and exclamation points from a GraphQL type name -- for example,
            converts <c>[Int!]</c> to <c>Int</c>
            </summary>
        </member>
        <member name="T:GraphQL.TypeExtensions">
            <summary>
            Provides extension methods for types.
            </summary>
        </member>
        <member name="M:GraphQL.TypeExtensions.IsConcrete(System.Type)">
            <summary>
            Determines whether this instance is a concrete type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
              <see langword="true"/> if the specified type is neither abstract nor an interface; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GraphQL.TypeExtensions.IsGraphType(System.Type)">
            <summary>
            Determines whether the indicated type implements IGraphType.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <see langword="true"/> if the indicated type implements IGraphType; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GraphQL.TypeExtensions.IsNamedType(System.Type)">
            <summary>
            Determines if the specified type represents a named graph type (not a wrapper type such as <see cref="T:GraphQL.Types.ListGraphType"/>).
            </summary>
        </member>
        <member name="M:GraphQL.TypeExtensions.GraphQLName(System.Type)">
            <summary>
            Gets the GraphQL name of the type. This is derived from the type name and can be overridden by the <see cref="T:GraphQL.GraphQLMetadataAttribute"/>.
            </summary>
            <param name="type">The indicated type.</param>
            <returns>A string containing a GraphQL compatible type name.</returns>
        </member>
        <member name="M:GraphQL.TypeExtensions.GetGraphTypeFromType(System.Type,System.Boolean,GraphQL.TypeMappingMode)">
            <summary>
            Gets the graph type for the indicated type.
            </summary>
            <param name="type">The type for which a graph type is desired.</param>
            <param name="isNullable">if set to <see langword="false"/> if the type explicitly non-nullable.</param>
            <param name="mode">Mode to use when mapping CLR type to GraphType.</param>
            <returns>A Type object representing a GraphType that matches the indicated type.</returns>
            <remarks>This can handle arrays, lists and other collections implementing IEnumerable.</remarks>
        </member>
        <member name="M:GraphQL.TypeExtensions.GetFriendlyName(System.Type)">
            <summary>
            Returns the friendly name of a type, using C# angle-bracket syntax for generics.
            </summary>
            <param name="type">The type of which you are inquiring.</param>
            <returns>A string representing the friendly name.</returns>
        </member>
        <member name="M:GraphQL.TypeExtensions.TryGetEnumerableElementType(System.Type,System.Type@)">
            <summary>
            Returns the type of element for a one-dimensional container type.
            </summary>
        </member>
        <member name="M:GraphQL.TypeExtensions.ImplementsGenericType(System.Type,System.Type)">
            <summary>
            Returns whether or not the given <paramref name="type"/> implements <paramref name="genericType"/>
            by testing itself, and then recursively up it's base types hierarchy.
            </summary>
            <param name="type">Type to test.</param>
            <param name="genericType">Type to test for.</param>
            <returns>
              <see langword="true"/> if the indicated type implements <paramref name="genericType"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:GraphQL.TypeExtensions.Description(System.Reflection.MemberInfo)">
            <summary>
            Looks for a <see cref="T:System.ComponentModel.DescriptionAttribute"/> on the specified member and returns
            the <see cref="P:System.ComponentModel.DescriptionAttribute.Description">description</see>, if any. Otherwise
            returns XML documentation on the specified member, if any. Note that behavior of this
            method depends from <see cref="P:GraphQL.GlobalSwitches.EnableReadDescriptionFromAttributes"/>
            and <see cref="P:GraphQL.GlobalSwitches.EnableReadDescriptionFromXmlDocumentation"/> settings.
            </summary>
        </member>
        <member name="M:GraphQL.TypeExtensions.Description(System.Reflection.ParameterInfo)">
            <summary>
            Looks for a <see cref="T:System.ComponentModel.DescriptionAttribute"/> on the specified parameter and returns
            the <see cref="P:System.ComponentModel.DescriptionAttribute.Description">description</see>, if any. Otherwise
            returns XML documentation on the specified member, if any. Note that behavior of this
            method depends from <see cref="P:GraphQL.GlobalSwitches.EnableReadDescriptionFromAttributes"/>
            and <see cref="P:GraphQL.GlobalSwitches.EnableReadDescriptionFromXmlDocumentation"/> settings.
            </summary>
        </member>
        <member name="M:GraphQL.TypeExtensions.ObsoleteMessage(System.Reflection.MemberInfo)">
            <summary>
            Looks for a <see cref="T:System.ObsoleteAttribute"/> on the specified member and returns
            the <see cref="P:System.ObsoleteAttribute.Message">message</see>, if any. Note that behavior of this
            method depends from <see cref="P:GraphQL.GlobalSwitches.EnableReadDeprecationReasonFromAttributes"/> setting.
            </summary>
        </member>
        <member name="M:GraphQL.TypeExtensions.DefaultValue(System.Reflection.MemberInfo)">
            <summary>
            Looks for a <see cref="T:System.ComponentModel.DefaultValueAttribute"/> on the specified member and returns
            the <see cref="P:System.ComponentModel.DefaultValueAttribute.Value">value</see>, if any. Note that behavior of this
            method depends from <see cref="P:GraphQL.GlobalSwitches.EnableReadDefaultValueFromAttributes"/> setting.
            </summary>
        </member>
        <member name="M:GraphQL.TypeExtensions.GetGraphQLAttributes(System.Reflection.MemberInfo)">
            <summary>
            Returns the set of <see cref="T:GraphQL.GraphQLAttribute"/>s applied to the specified member or its
            owning module or assembly, or are listed within <see cref="P:GraphQL.GlobalSwitches.GlobalAttributes"/>.
            Attributes are sorted by <see cref="P:GraphQL.GraphQLAttribute.Priority"/>, lowest first.
            </summary>
        </member>
        <member name="M:GraphQL.TypeExtensions.GetGraphQLAttributes(System.Reflection.ParameterInfo)">
            <summary>
            Returns the set of <see cref="T:GraphQL.GraphQLAttribute"/>s applied to the specified parameter or its
            owning module or assembly, or are listed within <see cref="P:GraphQL.GlobalSwitches.GlobalAttributes"/>.
            Attributes are sorted by <see cref="P:GraphQL.GraphQLAttribute.Priority"/>, lowest first.
            </summary>
        </member>
        <member name="T:GraphQL.TypeMappingMode">
            <summary>
            Mode used when mapping CLR type to GraphType in <see cref="M:GraphQL.TypeExtensions.GetGraphTypeFromType(System.Type,System.Boolean,GraphQL.TypeMappingMode)"/>.
            </summary>
        </member>
        <member name="F:GraphQL.TypeMappingMode.UseBuiltInScalarMappings">
            <summary>
            This mode is left for backward compatibility in cases where you call <see cref="M:GraphQL.TypeExtensions.GetGraphTypeFromType(System.Type,System.Boolean,GraphQL.TypeMappingMode)"/> directly.
            </summary>
        </member>
        <member name="F:GraphQL.TypeMappingMode.InputType">
            <summary>
            Map CLR type as input type.
            </summary>
        </member>
        <member name="F:GraphQL.TypeMappingMode.OutputType">
            <summary>
            Map CLR type as output type.
            </summary>
        </member>
        <member name="T:GraphQL.GlobalSwitches">
            <summary>
            Global options for configuring GraphQL execution.
            </summary>
        </member>
        <member name="P:GraphQL.GlobalSwitches.EnableReadDefaultValueFromAttributes">
            <summary>
            Enables or disables setting default values for 'defaultValue' from <see cref="T:System.ComponentModel.DefaultValueAttribute"/>.
            <br/>
            By default enabled.
            </summary>
        </member>
        <member name="P:GraphQL.GlobalSwitches.EnableReadDeprecationReasonFromAttributes">
            <summary>
            Enables or disables setting default values for 'deprecationReason' from <see cref="T:System.ObsoleteAttribute"/>.
            <br/>
            By default enabled.
            </summary>
        </member>
        <member name="P:GraphQL.GlobalSwitches.EnableReadDescriptionFromAttributes">
            <summary>
            Enables or disables setting default values for 'description' from <see cref="T:System.ComponentModel.DescriptionAttribute"/>.
            <br/>
            By default enabled.
            </summary>
        </member>
        <member name="P:GraphQL.GlobalSwitches.EnableReadDescriptionFromXmlDocumentation">
            <summary>
            Enables or disables setting default values for 'description' from XML documentation.
            <br/>
            By default disabled.
            </summary>
        </member>
        <member name="F:GraphQL.GlobalSwitches.NameValidation">
            <summary>
            Gets or sets current validation delegate. By default this delegate validates all names according
            to the GraphQL <see href="https://spec.graphql.org/October2021/#sec-Names">specification</see>.
            <br/><br/>
            Setting this delegate allows you to use names not conforming to the specification, for example
            'enum-member'. Only change it when absolutely necessary. This is typically only overridden
            when implementing a custom <see cref="T:GraphQL.Conversion.INameConverter"/> that fixes names, making them spec-compliant.
            <br/><br/>
            Keep in mind that regardless of this setting, names are validated upon schema initialization,
            after being processed by the <see cref="T:GraphQL.Conversion.INameConverter"/>. This is due to the fact that the
            parser cannot parse incoming queries with invalid characters in the names, so the resulting
            member would become unusable.
            </summary>
        </member>
        <member name="P:GraphQL.GlobalSwitches.UseDeclaringTypeNames">
            <summary>
            Specifies whether to use the names of parent (declaring) types in case of nested graph types
            when calculating default graph type name.
            <br/>
            By default disabled.
            </summary>
        </member>
        <member name="P:GraphQL.GlobalSwitches.TrackGraphTypeInitialization">
            <summary>
            Enable this switch to see additional debugging information in exception messages during schema initialization.
            <br/>
            By default disabled.
            </summary>
        </member>
        <member name="P:GraphQL.GlobalSwitches.GlobalAttributes">
            <summary>
            A collection of global <see cref="T:GraphQL.GraphQLAttribute"/> instances which are applied while
            <see cref="T:GraphQL.Types.AutoRegisteringObjectGraphType`1">AutoRegisteringObjectGraphType</see>,
            <see cref="T:GraphQL.Types.AutoRegisteringInputObjectGraphType`1">AutoRegisteringInputObjectGraphType</see>,
            <see cref="T:GraphQL.Types.EnumerationGraphType`1">EnumerationGraphType</see>,
            <see cref="M:GraphQL.Builders.FieldBuilder`2.ResolveDelegate(System.Delegate)">ResolveDelegate</see>
            or the schema builder is building graph types, field definitions, arguments, or similar.
            <br/><br/>
            The collection is not thread-safe; instances should be added prior to schema initialization.
            </summary>
        </member>
        <member name="T:GraphQL.IConfigureAutoSchema">
            <summary>
            Provides configuration for an auto-schema.
            See <see cref="M:GraphQL.GraphQLBuilderExtensions.AddAutoSchema``1(GraphQL.DI.IGraphQLBuilder,System.Action{GraphQL.IConfigureAutoSchema})"/>.
            </summary>
        </member>
        <member name="P:GraphQL.IConfigureAutoSchema.Builder">
            <summary>
            Returns a <see cref="T:GraphQL.DI.IGraphQLBuilder"/> reference that can be used to configure the schema or service provider.
            </summary>
        </member>
        <member name="P:GraphQL.IConfigureAutoSchema.SchemaType">
            <summary>
            Returns the type of constructed schema, which can be used to type match prior to additional configurations.
            Usually it is always <see cref="T:GraphQL.Types.AutoSchema`1"/>.
            </summary>
        </member>
        <member name="T:GraphQL.Instrumentation.ApolloTrace">
            <summary>
            Contains Apollo tracing metrics.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.ApolloTrace.#ctor(System.DateTime,System.Double)">
            <summary>
            Initializes a new instance with the specified parameters.
            </summary>
            <param name="start">The date and time that the GraphQL document began execution. If not UTC, this value will be converted to UTC.</param>
            <param name="durationMs">The number of milliseconds that it took to execute the GraphQL document.</param>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.Version">
            <summary>
            Returns the Apollo tracing version number.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.StartTime">
            <summary>
            Returns the UTC date and time when the document began execution. Should be serialized as a RFC 3339 string.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.EndTime">
            <summary>
            Returns the UTC date and time when the document completed execution. Should be serialized as a RFC 3339 string.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.Duration">
            <summary>
            Returns the duration of the document's execution, in nanoseconds.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.Parsing">
            <summary>
            Returns the parsing metrics.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.Validation">
            <summary>
            Returns the validation metrics.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.Execution">
            <summary>
            Returns the execution metrics.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.ApolloTrace.ConvertTime(System.Double)">
            <summary>
            Converts a quantity of milliseconds to nanoseconds.
            </summary>
        </member>
        <member name="T:GraphQL.Instrumentation.ApolloTrace.OperationTrace">
            <summary>
            Represents the start offset and duration of an operation.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.OperationTrace.StartOffset">
            <summary>
            Gets or sets the start offset of the operation, in nanoseconds.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.OperationTrace.Duration">
            <summary>
            Gets or sets the duration of the operation, in nanoseconds.
            </summary>
        </member>
        <member name="T:GraphQL.Instrumentation.ApolloTrace.ExecutionTrace">
            <summary>
            Represents metrics pertaining to the execution of a GraphQL document.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.ExecutionTrace.Resolvers">
            <summary>
            Returns a list of resolvers executed during the execution of a GraphQL document.
            </summary>
        </member>
        <member name="T:GraphQL.Instrumentation.ApolloTrace.ResolverTrace">
            <summary>
            Represents metrics pertaining to the execution of a field resolver.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.ResolverTrace.Path">
            <summary>
            Gets or sets the path of the field.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.ResolverTrace.ParentType">
            <summary>
            Gets or sets the parent graph type name.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.ResolverTrace.FieldName">
            <summary>
            Gets or sets the field name.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ApolloTrace.ResolverTrace.ReturnType">
            <summary>
            Gets or sets the returned graph type name.
            </summary>
        </member>
        <member name="T:GraphQL.Instrumentation.ApolloTracingExtensions">
            <summary>
            Methods to add Apollo tracing metrics to an <see cref="T:GraphQL.ExecutionResult"/> instance.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.ApolloTracingExtensions.EnrichWithApolloTracing(GraphQL.ExecutionResult,System.DateTime)">
            <summary>
            Adds Apollo tracing metrics to an <see cref="T:GraphQL.ExecutionResult"/> instance,
            stored within <see cref="P:GraphQL.ExecutionResult.Extensions"/>["tracing"].
            Requires that the GraphQL document was executed with metrics enabled;
            see <see cref="P:GraphQL.ExecutionOptions.EnableMetrics"/>. With <see cref="T:GraphQL.Instrumentation.InstrumentFieldsMiddleware"/>
            installed, also includes metrics from field resolvers.
            </summary>
            <param name="result">An <see cref="T:GraphQL.ExecutionResult"/> instance.</param>
            <param name="start">The date and time that the GraphQL document began execution. If not UTC, this value will be converted to UTC.</param>
        </member>
        <member name="M:GraphQL.Instrumentation.ApolloTracingExtensions.CreateTrace(GraphQL.Instrumentation.PerfRecord[],System.DateTime)">
            <summary>
            Initializes an <see cref="T:GraphQL.Instrumentation.ApolloTrace"/> instance and populates it with performance
            metrics gathered during the GraphQL document execution.
            </summary>
            <param name="perf">A list of performance records; typically as returned from <see cref="M:GraphQL.Instrumentation.Metrics.Finish"/>.</param>
            <param name="start">The date and time that the GraphQL document began execution. If not UTC, this value will be converted to UTC.</param>
        </member>
        <member name="T:GraphQL.Instrumentation.FieldMiddlewareBuilder">
            <summary>
            Default implementation of <see cref="T:GraphQL.Instrumentation.IFieldMiddlewareBuilder"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.FieldMiddlewareBuilder.Use(System.Func{GraphQL.Instrumentation.FieldMiddlewareDelegate,GraphQL.Instrumentation.FieldMiddlewareDelegate})">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Instrumentation.FieldMiddlewareBuilder.Build">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Instrumentation.FieldMiddlewareBuilderExtensions">
            <summary>
            Extension methods for <see cref="T:GraphQL.Instrumentation.IFieldMiddlewareBuilder"/> to add middlewares.
            These methods are built on top of <see cref="M:GraphQL.Instrumentation.IFieldMiddlewareBuilder.Use(System.Func{GraphQL.Instrumentation.FieldMiddlewareDelegate,GraphQL.Instrumentation.FieldMiddlewareDelegate})"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.FieldMiddlewareBuilderExtensions.Use(GraphQL.Instrumentation.IFieldMiddlewareBuilder,GraphQL.Instrumentation.IFieldMiddleware)">
            <summary>
            Adds middleware to the list of delegates that will be applied to all field resolvers when invoking <see cref="M:GraphQL.Types.SchemaTypes.ApplyMiddleware(GraphQL.Instrumentation.IFieldMiddlewareBuilder)"/>.
            </summary>
            <param name="builder">Interface for connecting middlewares to a schema.</param>
            <param name="middleware">Middleware instance.</param>
            <returns>Reference to the same <see cref="T:GraphQL.Instrumentation.IFieldMiddlewareBuilder"/>.</returns>
        </member>
        <member name="T:GraphQL.Instrumentation.FieldMiddlewareDelegate">
            <summary>
            Encapsulates a method that has a parameter of type <see cref="T:GraphQL.IResolveFieldContext"/> and
            asynchronously returns an object.
            </summary>
        </member>
        <member name="T:GraphQL.Instrumentation.IFieldMiddleware">
            <summary>
            Interface for field middleware.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.IFieldMiddleware.ResolveAsync(GraphQL.IResolveFieldContext,GraphQL.Instrumentation.FieldMiddlewareDelegate)">
            <summary>
            Handles execution of a field.
            </summary>
            <param name="context">Contains parameters pertaining to the currently executing field.</param>
            <param name="next">The delegate representing the remaining middleware and field resolver in the pipeline.</param>
            <returns>Asynchronously returns the result for the field.</returns>
        </member>
        <member name="T:GraphQL.Instrumentation.IFieldMiddlewareBuilder">
            <summary>
            Interface for connecting middlewares to a schema.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.IFieldMiddlewareBuilder.Use(System.Func{GraphQL.Instrumentation.FieldMiddlewareDelegate,GraphQL.Instrumentation.FieldMiddlewareDelegate})">
            <summary>
            Adds the specified delegate to the list of delegates that will be applied to all field resolvers when invoking <see cref="M:GraphQL.Types.SchemaTypes.ApplyMiddleware(GraphQL.Instrumentation.IFieldMiddlewareBuilder)"/>.
            <br/><br/>
            The delegate is used to unify the different ways of specifying middleware. See additional methods in <see cref="T:GraphQL.Instrumentation.FieldMiddlewareBuilderExtensions"/>.
            </summary>
            <param name="middleware">Middleware delegate.</param>
            <returns>Reference to the same <see cref="T:GraphQL.Instrumentation.IFieldMiddlewareBuilder"/>.</returns>
        </member>
        <member name="M:GraphQL.Instrumentation.IFieldMiddlewareBuilder.Build">
            <summary>
            Returns a transform for field resolvers, or <see langword="null"/> if no middleware is defined.
            The transform is a cumulation of all middlewares configured within this builder.
            </summary>
        </member>
        <member name="T:GraphQL.Instrumentation.InstrumentFieldsMiddleware">
            <summary>
            Middleware required for Apollo tracing to record performance metrics of field resolvers.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.InstrumentFieldsMiddleware.ResolveAsync(GraphQL.IResolveFieldContext,GraphQL.Instrumentation.FieldMiddlewareDelegate)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Instrumentation.Metrics">
            <summary>
            Records metrics during execution of a GraphQL document.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.Metrics.None">
            <summary>
            Gets an instance of the metrics for which metrics collection is disabled.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.Metrics.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Instrumentation.Metrics"/> class.
            </summary>
            <param name="enabled">Indicates if metrics should be recorded for this execution.</param>
        </member>
        <member name="P:GraphQL.Instrumentation.Metrics.Enabled">
            <summary>
            Shows whether metrics collection is enabled.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.Metrics.Start(System.String)">
            <summary>
            Logs the start of the execution.
            </summary>
            <param name="operationName">The name of the GraphQL operation.</param>
        </member>
        <member name="M:GraphQL.Instrumentation.Metrics.SetOperationName(GraphQLParser.ROM)">
            <summary>
            Sets the name of the GraphQL operation.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.Metrics.Subject(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Records an performance metric.
            </summary>
            <param name="category">The category name for recorded metric, for example, "document" or "field".</param>
            <param name="subject">The subject for recorded metric, for example, "Initializing schema" or "Building document".</param>
            <param name="metadata">A dictionary of additional metadata for metric.</param>
            <returns><see cref="T:GraphQL.Instrumentation.Metrics.Marker"/></returns>
        </member>
        <member name="M:GraphQL.Instrumentation.Metrics.Finish">
            <summary>
            Returns the collected performance metrics.
            </summary>
        </member>
        <member name="T:GraphQL.Instrumentation.Metrics.Marker">
            <summary>
            An object that, when disposed, records the completion time of a performance metric in an assigned <see cref="T:GraphQL.Instrumentation.PerfRecord"/>.
            </summary>
        </member>
        <member name="F:GraphQL.Instrumentation.Metrics.Marker.Empty">
            <summary>
            Returns an instance that does not perform any action when disposed.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.Metrics.Marker.#ctor(GraphQL.Instrumentation.PerfRecord,GraphQL.Instrumentation.ValueStopwatch)">
            <summary>
            Initializes an instance with the specified performance metric and running stopwatch.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.Metrics.Marker.Dispose">
            <summary>
            Stores the completion time of the assigned performance metric.
            </summary>
        </member>
        <member name="T:GraphQL.Instrumentation.PerfRecord">
            <summary>
            Records a performance metric.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.PerfRecord.#ctor(System.String,System.String,System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.PerfRecord.MarkEnd(System.Double)">
            <summary>
            Sets the completion time, represented as an offset in milliseconds from starting the GraphQL operation's execution.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.PerfRecord.Category">
            <summary>
            Gets or sets the category name.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.PerfRecord.Subject">
            <summary>
            Gets or sets the subject name.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.PerfRecord.Metadata">
            <summary>
            Gets or sets a dictionary of additional metadata.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.PerfRecord.Start">
            <summary>
            Gets or sets the start time, represented as an offset in milliseconds from starting the GraphQL operation's execution.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.PerfRecord.End">
            <summary>
            Gets or sets the completion time, represented as an offset in milliseconds from starting the GraphQL operation's execution.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.PerfRecord.Duration">
            <summary>
            Returns the total number of milliseconds required to execute the operation represented by this performance metric.
            </summary>
        </member>
        <member name="M:GraphQL.Instrumentation.PerfRecord.MetaField``1(System.String)">
            <summary>
            Returns metadata for the specified key. Similar to <see cref="P:GraphQL.Instrumentation.PerfRecord.Metadata"/>[<paramref name="key"/>],
            but returns <c>default</c> if <see cref="P:GraphQL.Instrumentation.PerfRecord.Metadata"/> is <see langword="null"/> or the specified
            key does not exist.
            </summary>
        </member>
        <member name="T:GraphQL.Instrumentation.ValueStopwatch">
            <summary>
            This is already familiar <see cref="T:System.Diagnostics.Stopwatch"/> but as a readonly struct. Doesn't allocate memory on the managed heap.
            </summary>
        </member>
        <member name="P:GraphQL.Instrumentation.ValueStopwatch.IsActive">
            <inheritdoc cref="P:System.Diagnostics.Stopwatch.IsRunning"/>
        </member>
        <member name="M:GraphQL.Instrumentation.ValueStopwatch.StartNew">
            <inheritdoc cref="M:System.Diagnostics.Stopwatch.StartNew"/>
        </member>
        <member name="P:GraphQL.Instrumentation.ValueStopwatch.Elapsed">
            <inheritdoc cref="P:System.Diagnostics.Stopwatch.Elapsed"/>
        </member>
        <member name="T:GraphQL.Introspection.ISchemaComparer">
            <summary>
            Provides the ability to order the schema elements upon introspection or printing.
            </summary>
        </member>
        <member name="P:GraphQL.Introspection.ISchemaComparer.TypeComparer">
            <summary>
            Returns a comparer for GraphQL types.
            If this returns <see langword="null"/> then the original type ordering is preserved.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.ISchemaComparer.FieldComparer(GraphQL.Types.IGraphType)">
            <summary>
            Returns a comparer for fields withing enclosing type.
            If this returns <see langword="null"/> then the original field ordering is preserved.
            </summary>
            <param name="parent">Parent type to which the fields belong.</param>
        </member>
        <member name="M:GraphQL.Introspection.ISchemaComparer.ArgumentComparer(GraphQL.Types.IFieldType)">
            <summary>
            Returns a comparer for field arguments.
            If this returns <see langword="null"/> then the original argument ordering is preserved.
            </summary>
            <param name="field">The field to which the arguments belong.</param>
        </member>
        <member name="M:GraphQL.Introspection.ISchemaComparer.EnumValueComparer(GraphQL.Types.EnumerationGraphType)">
            <summary>
            Returns a comparer for enum values.
            If this returns <see langword="null"/> then the original enum value ordering is preserved.
            </summary>
            <param name="parent">The enumeration to which the enum values belong.</param>
        </member>
        <member name="P:GraphQL.Introspection.ISchemaComparer.DirectiveComparer">
            <summary>
            Returns a comparer for GraphQL directives.
            If this returns <see langword="null"/> then the original directive ordering is preserved.
            </summary>
        </member>
        <member name="T:GraphQL.Introspection.DefaultSchemaComparer">
            <summary>
            Default schema comparer. By default all elements are returned as is, no sorting is applied.
            </summary>
        </member>
        <member name="P:GraphQL.Introspection.DefaultSchemaComparer.TypeComparer">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Introspection.DefaultSchemaComparer.DirectiveComparer">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Introspection.DefaultSchemaComparer.ArgumentComparer(GraphQL.Types.IFieldType)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Introspection.DefaultSchemaComparer.EnumValueComparer(GraphQL.Types.EnumerationGraphType)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Introspection.DefaultSchemaComparer.FieldComparer(GraphQL.Types.IGraphType)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Introspection.AlphabeticalSchemaComparer">
            <summary>
            All elements are sorted in alphabetical order of their names.
            </summary>
        </member>
        <member name="P:GraphQL.Introspection.AlphabeticalSchemaComparer.TypeComparer">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Introspection.AlphabeticalSchemaComparer.DirectiveComparer">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Introspection.AlphabeticalSchemaComparer.ArgumentComparer(GraphQL.Types.IFieldType)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Introspection.AlphabeticalSchemaComparer.EnumValueComparer(GraphQL.Types.EnumerationGraphType)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Introspection.AlphabeticalSchemaComparer.FieldComparer(GraphQL.Types.IGraphType)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Introspection.ISchemaFilter">
            <summary>
            Provides the ability to filter the schema upon introspection to hide types, fields, arguments, enum values, and directives.
            Can be used to hide information, such as graph types, from clients that have an inadequate permission level.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.ISchemaFilter.AllowType(GraphQL.Types.IGraphType)">
            <summary>
            Returns a boolean indicating whether the specified graph type should be returned within the introspection query.
            </summary>
            <param name="type">The graph type to consider.</param>
        </member>
        <member name="M:GraphQL.Introspection.ISchemaFilter.AllowField(GraphQL.Types.IGraphType,GraphQL.Types.IFieldType)">
            <summary>
            Returns a boolean indicating whether the specified field should be returned within the introspection query.
            </summary>
            <param name="parent">The parent type to which the field belongs.</param>
            <param name="field">The field to consider.</param>
        </member>
        <member name="M:GraphQL.Introspection.ISchemaFilter.AllowArgument(GraphQL.Types.IFieldType,GraphQL.Types.QueryArgument)">
            <summary>
            Returns a boolean indicating whether the specified argument should be returned within the introspection query.
            </summary>
            <param name="field">The field to which the argument belongs.</param>
            <param name="argument">The argument to consider.</param>
        </member>
        <member name="M:GraphQL.Introspection.ISchemaFilter.AllowEnumValue(GraphQL.Types.EnumerationGraphType,GraphQL.Types.EnumValueDefinition)">
            <summary>
            Returns a boolean indicating whether the specified enumeration value should be returned within the introspection query.
            </summary>
            <param name="parent">The enumeration to which the enumeration value belongs.</param>
            <param name="enumValue">The enumeration value to consider.</param>
        </member>
        <member name="M:GraphQL.Introspection.ISchemaFilter.AllowDirective(GraphQL.Types.Directive)">
            <summary>
            Returns a boolean indicating whether the specified directive should be returned within the introspection query.
            </summary>
            <param name="directive">The directive to consider.</param>
        </member>
        <member name="T:GraphQL.Introspection.DefaultSchemaFilter">
            <summary>
            The default schema filter. By default nothing is hidden. Please note
            that some features that are not in the official specification may be
            hidden by default. These features can be unlocked using special
            <see cref="T:GraphQL.Introspection.ExperimentalIntrospectionFeaturesSchemaFilter"/> filter.
            </summary>
        </member>
        <member name="F:GraphQL.Introspection.DefaultSchemaFilter.Allowed">
            <summary>
            Cached <c>Task.FromResult(true)</c>.
            </summary>
        </member>
        <member name="F:GraphQL.Introspection.DefaultSchemaFilter.Forbidden">
            <summary>
            Cached <c>Task.FromResult(false)</c>.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.DefaultSchemaFilter.AllowType(GraphQL.Types.IGraphType)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Introspection.DefaultSchemaFilter.AllowField(GraphQL.Types.IGraphType,GraphQL.Types.IFieldType)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Introspection.DefaultSchemaFilter.AllowArgument(GraphQL.Types.IFieldType,GraphQL.Types.QueryArgument)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Introspection.DefaultSchemaFilter.AllowEnumValue(GraphQL.Types.EnumerationGraphType,GraphQL.Types.EnumValueDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Introspection.DefaultSchemaFilter.AllowDirective(GraphQL.Types.Directive)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Introspection.ExperimentalIntrospectionFeaturesSchemaFilter">
            <summary>
            Schema filter that enables some experimental features that are not in the
            official specification, i.e. ability to expose user-defined meta-information
            via introspection. See https://github.com/graphql/graphql-spec/issues/300
            for more information.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.ExperimentalIntrospectionFeaturesSchemaFilter.AllowType(GraphQL.Types.IGraphType)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Introspection.ExperimentalIntrospectionFeaturesSchemaFilter.AllowField(GraphQL.Types.IGraphType,GraphQL.Types.IFieldType)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Introspection.SchemaMetaFieldType">
            <summary>
            The <c>__schema</c> meta-field is available on the root of a query operation and
            returns a <see cref="T:GraphQL.Introspection.__Schema"/> graph type for the schema.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.SchemaMetaFieldType.#ctor">
            <summary>
            Initializes a new instance of the <c>__schema</c> meta-field.
            </summary>
        </member>
        <member name="T:GraphQL.Introspection.TypeKind">
            <summary>
            An enumeration representing a kind of GraphQL type.
            </summary>
        </member>
        <member name="F:GraphQL.Introspection.TypeKind.SCALAR">
            <summary>
            Indicates this type is a scalar.
            </summary>
        </member>
        <member name="F:GraphQL.Introspection.TypeKind.OBJECT">
            <summary>
            Indicates this type is an object. `fields` and `possibleTypes` are valid fields.
            </summary>
        </member>
        <member name="F:GraphQL.Introspection.TypeKind.INTERFACE">
            <summary>
            Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.
            </summary>
        </member>
        <member name="F:GraphQL.Introspection.TypeKind.UNION">
            <summary>
            Indicates this type is a union. `possibleTypes` is a valid field.
            </summary>
        </member>
        <member name="F:GraphQL.Introspection.TypeKind.ENUM">
            <summary>
            Indicates this type is an enum. `enumValues` is a valid field.
            </summary>
        </member>
        <member name="F:GraphQL.Introspection.TypeKind.INPUT_OBJECT">
            <summary>
            Indicates this type is an input object. `inputFields` is a valid field.
            </summary>
        </member>
        <member name="F:GraphQL.Introspection.TypeKind.LIST">
            <summary>
            Indicates this type is a list. `ofType` is a valid field.
            </summary>
        </member>
        <member name="F:GraphQL.Introspection.TypeKind.NON_NULL">
            <summary>
            Indicates this type is a non-null. `ofType` is a valid field.
            </summary>
        </member>
        <member name="T:GraphQL.Introspection.TypeKindBoxed">
            <summary>
            Shared and already boxed instances of <see cref="T:GraphQL.Introspection.TypeKind"/> to avoid further boxing at runtime.
            </summary>
        </member>
        <member name="T:GraphQL.Introspection.TypeMetaFieldType">
            <summary>
            The <c>__type</c> meta-field is available on the root of a query operation and
            returns a <see cref="T:GraphQL.Introspection.__Type"/> graph type for a specified graph type name.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.TypeMetaFieldType.#ctor">
            <summary>
            Initializes a new instance of the <c>__type</c> meta-field.
            </summary>
        </member>
        <member name="T:GraphQL.Introspection.TypeNameMetaFieldType">
            <summary>
            The <c>__typename</c> meta-field is available on every type and
            returns the name of the type on which it was requested.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.TypeNameMetaFieldType.#ctor">
            <summary>
            Initializes a new instance of the <c>__typename</c> meta-field.
            </summary>
        </member>
        <member name="T:GraphQL.Introspection.__AppliedDirective">
            <summary>
            The <see cref="T:GraphQL.Introspection.__AppliedDirective"/> introspection type represents
            a directive applied to a schema element - type, field, argument, etc.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.__AppliedDirective.#ctor">
            <summary>
            Initializes a new instance of this graph type.
            </summary>
        </member>
        <member name="T:GraphQL.Introspection.__Directive">
            <summary>
            The <see cref="T:GraphQL.Introspection.__Directive"/> introspection type represents a directive that a server supports.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.__Directive.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Introspection.__Directive"/> introspection type.
            </summary>
            <param name="allowAppliedDirectives">Allows 'appliedDirectives' field for this type. It is an experimental feature.</param>
            <param name="allowRepeatable">Allows 'isRepeatable' field for this type. This feature is from a working draft of the specification.</param>
        </member>
        <member name="T:GraphQL.Introspection.__DirectiveArgument">
            <summary>
            The <see cref="T:GraphQL.Introspection.__DirectiveArgument"/> introspection type represents an argument of
            a directive applied to a schema element - type, field, argument, etc.
            <br/><br/>
            Note that this class describes only explicitly specified arguments. If the argument in the directive
            definition has default value and this argument was not specified when applying the directive to schema
            element, then such an argument with default value will not be returned.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.__DirectiveArgument.#ctor">
            <summary>
            Initializes a new instance of this graph type.
            </summary>
        </member>
        <member name="T:GraphQL.Introspection.__DirectiveLocation">
            <summary>
            An enumeration representing a location that a directive may be placed.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.__DirectiveLocation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Introspection.__DirectiveLocation"/> graph type.
            </summary>
        </member>
        <member name="T:GraphQL.Introspection.__EnumValue">
            <summary>
            The <see cref="T:GraphQL.Introspection.__EnumValue"/> introspection type represents one of possible values of an enum.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.__EnumValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Introspection.__EnumValue"/> introspection type.
            </summary>
            <param name="allowAppliedDirectives">Allows 'appliedDirectives' field for this type. It is an experimental feature.</param>
        </member>
        <member name="T:GraphQL.Introspection.__Field">
            <summary>
            The <see cref="T:GraphQL.Introspection.__Field"/> introspection type represents each field in an Object or Interface type.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.__Field.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Introspection.__Field"/> introspection type.
            </summary>
            <param name="allowAppliedDirectives">Allows 'appliedDirectives' field for this type. It is an experimental feature.</param>
        </member>
        <member name="M:GraphQL.Introspection.__Field.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Introspection.__Field"/> introspection type.
            </summary>
            <param name="allowAppliedDirectives">Allows 'appliedDirectives' field for this type. It is an experimental feature.</param>
            <param name="deprecationOfInputValues">
            Allows deprecation of input values - arguments on a field or input fields on an input type.
            This feature is from a working draft of the specification.
            </param>
        </member>
        <member name="T:GraphQL.Introspection.__InputValue">
            <summary>
            The <see cref="T:GraphQL.Introspection.__InputValue"/> introspection type represents field and directive arguments as well as the inputFields of an input object.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.__InputValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Introspection.__InputValue"/> introspection type.
            </summary>
            <param name="allowAppliedDirectives">Allows 'appliedDirectives' field for this type. It is an experimental feature.</param>
        </member>
        <member name="M:GraphQL.Introspection.__InputValue.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Introspection.__InputValue"/> introspection type.
            </summary>
            <param name="allowAppliedDirectives">Allows 'appliedDirectives' field for this type. It is an experimental feature.</param>
            <param name="deprecationOfInputValues">
            Allows deprecation of input values - arguments on a field or input fields on an input type.
            This feature is from a working draft of the specification.
            </param>
        </member>
        <member name="T:GraphQL.Introspection.__Schema">
            <summary>
            The <see cref="T:GraphQL.Introspection.__Schema"/> introspection type allows querying the schema for available types and directives.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.__Schema.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Introspection.__Schema"/> introspection type.
            </summary>
            <param name="allowAppliedDirectives">Allows 'appliedDirectives' field for this type. It is an experimental feature.</param>
        </member>
        <member name="T:GraphQL.Introspection.__Type">
            <summary>
            <see cref="T:GraphQL.Introspection.__Type"/> is at the core of the type introspection system.
            It represents scalars, interfaces, object types, unions, enums in the system.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.__Type.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Introspection.__Type"/> introspection type.
            </summary>
            <param name="allowAppliedDirectives">Allows 'appliedDirectives' field for this type. It is an experimental feature.</param>
        </member>
        <member name="M:GraphQL.Introspection.__Type.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Introspection.__Type"/> introspection type.
            </summary>
            <param name="allowAppliedDirectives">Allows 'appliedDirectives' field for this type. It is an experimental feature.</param>
            <param name="deprecationOfInputValues">
            Allows deprecation of input values - arguments on a field or input fields on an input type.
            This feature is from a working draft of the specification.
            </param>
        </member>
        <member name="T:GraphQL.Introspection.__TypeKind">
            <summary>
            An enumeration representing a kind of GraphQL type.
            </summary>
        </member>
        <member name="M:GraphQL.Introspection.__TypeKind.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Introspection.__TypeKind"/> introspection type.
            </summary>
        </member>
        <member name="T:GraphQL.LightweightCache`2">
            <summary>
            A simple cache based on the provided dictionary.
            </summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
            <remarks>https://github.com/JasperFx/baseline/blob/master/src/Baseline/LightweightCache.cs</remarks>
        </member>
        <member name="M:GraphQL.LightweightCache`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.LightweightCache`2"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.LightweightCache`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.LightweightCache`2"/> class.
            </summary>
            <param name="onMissing">Action to perform if the key is missing. Defaults to <see cref="T:System.Collections.Generic.KeyNotFoundException"/></param>
        </member>
        <member name="M:GraphQL.LightweightCache`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.LightweightCache`2"/> class.
            </summary>
            <param name="dictionary">The dictionary implementation to use.</param>
            <param name="onMissing">Action to perform if the key is missing. Defaults to <see cref="T:System.Collections.Generic.KeyNotFoundException"/></param>
            <remarks>This takes a dependency on the provided dictionary. It does not simply copy its values.</remarks>
        </member>
        <member name="M:GraphQL.LightweightCache`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.LightweightCache`2"/> class.
            </summary>
            <param name="dictionary">The dictionary implementation to use.</param>
            <remarks>This takes a dependency on the provided dictionary. It does not simply copy its values.</remarks>
        </member>
        <member name="P:GraphQL.LightweightCache`2.OnMissing">
            <summary>
            Action to perform if the key is missing. Defaults to <see cref="T:System.Collections.Generic.KeyNotFoundException"/>
            </summary>
        </member>
        <member name="P:GraphQL.LightweightCache`2.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:GraphQL.LightweightCache`2.Item(`0)">
            <summary>
            Gets or sets the <typeparamref name="TValue"/> with the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:GraphQL.LightweightCache`2.Keys">
            <summary>
            Gets the keys.
            </summary>
        </member>
        <member name="M:GraphQL.LightweightCache`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the values.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:GraphQL.LightweightCache`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the values.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:GraphQL.LightweightCache`2.FillDefault(`0)">
            <summary>
            Guarantees that the Cache has a value for a given key.
            If it does not already exist, it's created using the OnMissing action.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:GraphQL.LightweightCache`2.Fill(`0,`1)">
            <summary>
            Guarantees that the Cache has a value for a given key.
            If it does not already exist, it's created using provided default value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The default value.</param>
        </member>
        <member name="M:GraphQL.LightweightCache`2.TryRetrieve(`0,`1@)">
            <summary>
            Tries the retrieve a given key.
            </summary>
            <param name="key">The key to retrieve.</param>
            <param name="value">The value for the associated key or <c>default(TValue)</c>.</param>
        </member>
        <member name="M:GraphQL.LightweightCache`2.Each(System.Action{`1})">
            <summary>
            Performs the specified action for each value.
            </summary>
            <param name="action">The action to be performed.</param>
            <remarks>The order of execution is non-deterministic. If an error occurs, the action will not be performed on the remaining values.</remarks>
        </member>
        <member name="M:GraphQL.LightweightCache`2.Each(System.Action{`0,`1})">
            <summary>
            Performs the specified action for each key/value pair.
            </summary>
            <param name="action">The action to be performed.</param>
            <remarks>The order of execution is non-deterministic. If an error occurs, the action will not be performed on the remaining values.</remarks>
        </member>
        <member name="M:GraphQL.LightweightCache`2.Has(`0)">
            <summary>
            Equivalent to ContainsKey
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:GraphQL.LightweightCache`2.Exists(System.Predicate{`1})">
            <summary>
            Determines if a given value exists in the dictionary.
            </summary>
            <param name="predicate">The search predicate.</param>
        </member>
        <member name="M:GraphQL.LightweightCache`2.Find(System.Predicate{`1})">
            <summary>
            Searches for a given value.
            </summary>
            <param name="predicate">The search predicate.</param>
            <returns>The first matching value</returns>
        </member>
        <member name="M:GraphQL.LightweightCache`2.GetAll">
            <summary>
            Returns all values as an array
            </summary>
        </member>
        <member name="M:GraphQL.LightweightCache`2.Remove(`0)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:GraphQL.LightweightCache`2.Clear">
            <summary>
            Clears this instance of all key/value pairs.
            </summary>
        </member>
        <member name="M:GraphQL.LightweightCache`2.WithValue(`0,System.Action{`1})">
            <summary>
            If the dictionary contains the indicated key, performs the action with its value.
            </summary>
            <param name="key">The key.</param>
            <param name="action">The action to be performed.</param>
        </member>
        <member name="M:GraphQL.LightweightCache`2.ClearAll">
            <summary>
            Equivalent to Clear()
            </summary>
        </member>
        <member name="T:GraphQL.MissingRequestServicesException">
            <summary>
            Indicates that <see cref="P:GraphQL.IResolveFieldContext.RequestServices"/> was required but not set.
            </summary>
        </member>
        <member name="M:GraphQL.MissingRequestServicesException.#ctor">
            <inheritdoc cref="T:GraphQL.MissingRequestServicesException"/>
        </member>
        <member name="T:GraphQL.Reflection.IAccessor">
            <summary>
            An abstraction around accessing a property or method on a object instance.
            </summary>
        </member>
        <member name="P:GraphQL.Reflection.IAccessor.FieldName">
            <summary>
            Returns the name of the member that this accessor points to.
            </summary>
        </member>
        <member name="P:GraphQL.Reflection.IAccessor.ReturnType">
            <summary>
            Returns the data type that the member returns.
            </summary>
        </member>
        <member name="P:GraphQL.Reflection.IAccessor.DeclaringType">
            <summary>
            Returns the type where the member is defined.
            </summary>
        </member>
        <member name="P:GraphQL.Reflection.IAccessor.Parameters">
            <summary>
            For methods, returns a list of parameters defined for the method, otherwise <see langword="null"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Reflection.IAccessor.MethodInfo">
            <summary>
            Returns a <see cref="P:GraphQL.Reflection.IAccessor.MethodInfo"/> instance that points to the member.
            For properties, this points to the property getter.
            </summary>
        </member>
        <member name="M:GraphQL.Reflection.IAccessor.GetValue(System.Object,System.Object[])">
            <summary>
            Get return value of method or property.
            </summary>
            <param name="target">Target object.</param>
            <param name="arguments">Arguments for method; not used for property.</param>
            <returns>Return value.</returns>
        </member>
        <member name="M:GraphQL.Reflection.IAccessor.GetAttributes``1">
            <summary>
            Returns a list of attributes of the specified type defined on the member.
            </summary>
            <typeparam name="T">The type of the attribute.</typeparam>
        </member>
        <member name="M:GraphQL.Reflection.ReflectionHelper.ToAccessor(System.Type,System.String,GraphQL.ResolverType)">
            <summary>
            Creates an <see cref="T:GraphQL.Reflection.IAccessor"/> for the indicated GraphQL field
            </summary>
            <param name="type">The type to check.</param>
            <param name="field">The desired field.</param>
            <param name="resolverType">defaults to Resolver</param>
        </member>
        <member name="M:GraphQL.Reflection.ReflectionHelper.MethodForField(System.Type,System.String,GraphQL.ResolverType)">
            <summary>
            Returns the method associated with the indicated GraphQL field
            </summary>
            <param name="type">The type to check.</param>
            <param name="field">The desired field.</param>
            <param name="resolverType">Indicates if a resolver or stream resolver method is requested.</param>
        </member>
        <member name="M:GraphQL.Reflection.ReflectionHelper.PropertyForField(System.Type,System.String)">
            <summary>
            Returns the property associated with the indicated GraphQL field
            </summary>
            <param name="type">The type to check.</param>
            <param name="field">The desired field.</param>
        </member>
        <member name="T:GraphQL.IResolveFieldContext">
            <summary>
            Contains parameters pertaining to the currently executing <see cref="T:GraphQL.Resolvers.IFieldResolver"/>.
            This object is only valid during the execution of the field; it is re-used once the field
            has resolved. Use <see cref="M:GraphQL.ResolveFieldContextExtensions.Copy(GraphQL.IResolveFieldContext)"/>
            if you need to preserve a copy of the context for later use or copy required properties from the context.
            </summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.FieldAst">
            <summary>The <see cref="T:GraphQLParser.AST.GraphQLField"/> AST as derived from the query request.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.FieldDefinition">
            <summary>The <see cref="T:GraphQL.Types.FieldType"/> definition specified in the parent graph type.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.ParentType">
            <summary>The field's parent graph type.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.Parent">
            <summary>
            Provides access to the parent context (up to the root). This may be needed to get the parameters of parent nodes.
            Returns <see langword="null"/> when called on the root.
            </summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.Arguments">
            <summary>
            A dictionary of arguments passed to the field, or <see langword="null"/> if no arguments were defined for the field.
            It is recommended to use the <see cref="M:GraphQL.ResolveFieldContextExtensions.GetArgument``1(GraphQL.IResolveFieldContext,System.String,``0)">GetArgument</see>
            and <see cref="M:GraphQL.ResolveFieldContextExtensions.HasArgument(GraphQL.IResolveFieldContext,System.String)">HasArgument</see> extension
            methods rather than this dictionary, so the names can be converted by the selected <see cref="T:GraphQL.Conversion.INameConverter"/>.
            </summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.Directives">
            <summary>
            A dictionary of directives with their arguments passed to the field, or <see langword="null"/> if no directives were defined for the field.
            It is recommended to use the <see cref="M:GraphQL.ResolveFieldContextExtensions.GetDirective(GraphQL.IResolveFieldContext,System.String)">GetDirective</see>
            and <see cref="M:GraphQL.ResolveFieldContextExtensions.HasDirective(GraphQL.IResolveFieldContext,System.String)">HasDirective</see> extension
            methods rather than this dictionary directly.
            </summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.RootValue">
            <summary>The root value of the graph, as defined by <see cref="P:GraphQL.ExecutionOptions.Root"/>.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.Source">
            <summary>The value of the parent object in the graph.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.Schema">
            <summary>The graph schema.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.Document">
            <summary>The current GraphQL request, parsed into an AST document.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.Operation">
            <summary>The operation type (i.e. query, mutation, or subscription) of the current GraphQL request.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.Variables">
            <summary>The input variables of the current GraphQL request.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.CancellationToken">
            <summary>A <see cref="T:System.Threading.CancellationToken">CancellationToken</see> to indicate if and when the request has been canceled.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.Metrics">
            <summary>Allows logging of performance metrics.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.Errors">
            <summary>Can be used to return specific errors back to the GraphQL request caller.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.Path">
            <summary>The path to the current executing field from the request root as it would appear in the query.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.ResponsePath">
            <summary>The path to the current executing field from the request root as it would appear in the response.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.SubFields">
            <summary>
            Returns a set of child fields requested for the current field. Note that this set will be completely defined
            (when called from field resolver) only for fields of a concrete type (i.e. not interface or union field). For
            interface field this method returns requested fields in terms of this interface. For union field this method
            returns empty set since we don't know the concrete union member until we get a concrete runtime value from
            the resolver.
            </summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.InputExtensions">
            <summary>
            A dictionary of extra information supplied with the GraphQL request.
            This is reserved for implementors to extend the protocol however they see fit,
            and hence there are no additional restrictions on its contents. Also you may use
            <see cref="M:GraphQL.ResolveFieldContextExtensions.GetInputExtension(GraphQL.IResolveFieldContext,System.String)">GetInputExtension</see> method.
            </summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.OutputExtensions">
            <summary>
            The response map may also contain an entry with key extensions. This entry is reserved for implementors to extend the
            protocol however they see fit, and hence there are no additional restrictions on its contents. This dictionary is shared
            by all running resolvers and is not thread safe. Also you may use <see cref="M:GraphQL.ResolveFieldContextExtensions.GetOutputExtension(GraphQL.IResolveFieldContext,System.String)">GetOutputExtension</see>
            and <see cref="M:GraphQL.ResolveFieldContextExtensions.SetOutputExtension(GraphQL.IResolveFieldContext,System.String,System.Object)">SetOutputExtension</see>
            methods.
            </summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.RequestServices">
            <summary>The service provider for the executing request.</summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.ArrayPool">
            <summary>
            Returns a resource pool from which arrays can be rented during the current execution.
            Can be used to return lists of data from field resolvers.
            </summary>
        </member>
        <member name="P:GraphQL.IResolveFieldContext.User">
            <inheritdoc cref="P:GraphQL.Execution.IExecutionContext.User"/>
        </member>
        <member name="T:GraphQL.IResolveFieldContext`1">
            <inheritdoc cref="T:GraphQL.IResolveFieldContext"/>
        </member>
        <member name="P:GraphQL.IResolveFieldContext`1.Source">
            <inheritdoc cref="P:GraphQL.IResolveFieldContext.Source"/>
        </member>
        <member name="T:GraphQL.ReadonlyResolveFieldContext">
            <summary>
            A readonly implementation of <see cref="T:GraphQL.IResolveFieldContext"/>.
            </summary>
        </member>
        <member name="M:GraphQL.ReadonlyResolveFieldContext.#ctor(GraphQL.Execution.ExecutionNode,GraphQL.Execution.ExecutionContext)">
            <summary>
            Initializes an instance with the specified <see cref="T:GraphQL.Execution.ExecutionNode"/> and <see cref="T:GraphQL.Execution.ExecutionContext"/>.
            </summary>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.Source">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.FieldAst">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.FieldDefinition">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.ParentType">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.Parent">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.Arguments">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.Directives">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.RootValue">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.Schema">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.Document">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.Operation">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.Variables">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.CancellationToken">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.Metrics">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.Errors">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.Path">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.ResponsePath">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.SubFields">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.UserContext">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.InputExtensions">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.OutputExtensions">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.RequestServices">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.ArrayPool">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ReadonlyResolveFieldContext.User">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.ResolveFieldContext">
            <summary>
            A mutable implementation of <see cref="T:GraphQL.IResolveFieldContext"/>
            </summary>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.FieldAst">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.FieldDefinition">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.ParentType">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.Parent">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.Arguments">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.Directives">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.RootValue">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.UserContext">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.Source">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.Schema">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.Document">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.Operation">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.Variables">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.CancellationToken">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.Metrics">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.Errors">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.Path">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.ResponsePath">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.SubFields">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.RequestServices">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.InputExtensions">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.OutputExtensions">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.ArrayPool">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContext.User">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.ResolveFieldContext.#ctor">
            <summary>
            Initializes a new instance with all fields set to their default values.
            </summary>
        </member>
        <member name="M:GraphQL.ResolveFieldContext.#ctor(GraphQL.IResolveFieldContext)">
            <summary>
            Clone the specified <see cref="T:GraphQL.IResolveFieldContext"/>.
            </summary>
        </member>
        <member name="T:GraphQL.ResolveFieldContext`1">
            <inheritdoc cref="T:GraphQL.ResolveFieldContext"/>
        </member>
        <member name="M:GraphQL.ResolveFieldContext`1.#ctor">
            <inheritdoc cref="M:GraphQL.ResolveFieldContext.#ctor"/>
        </member>
        <member name="M:GraphQL.ResolveFieldContext`1.#ctor(GraphQL.IResolveFieldContext)">
            <summary>
            Clone the specified <see cref="T:GraphQL.IResolveFieldContext"/>
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the <see cref="P:GraphQL.IResolveFieldContext.Source"/> property cannot be cast to <typeparamref name="TSource"/></exception>
        </member>
        <member name="P:GraphQL.ResolveFieldContext`1.Source">
            <inheritdoc cref="P:GraphQL.ResolveFieldContext.Source"/>
        </member>
        <member name="M:GraphQL.ResolveFieldContextAdapter`1.#ctor(GraphQL.IResolveFieldContext)">
            <summary>
            Creates an instance that maps to the specified base <see cref="T:GraphQL.IResolveFieldContext"/>
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the <see cref="P:GraphQL.IResolveFieldContext.Source"/> property cannot be cast to the specified type</exception>
        </member>
        <member name="P:GraphQL.ResolveFieldContextAdapter`1.ArrayPool">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.ResolveFieldContextAdapter`1.User">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.ResolveFieldContextExtensions">
            <summary>
            Provides extension methods for <see cref="T:GraphQL.IResolveFieldContext"/> instances.
            </summary>
        </member>
        <member name="M:GraphQL.ResolveFieldContextExtensions.HasDirectives(GraphQL.IResolveFieldContext)">
            <summary>
            Determines if currently executed field has any directives provided in the GraphQL query request.
            </summary>
        </member>
        <member name="M:GraphQL.ResolveFieldContextExtensions.HasDirective(GraphQL.IResolveFieldContext,System.String)">
            <summary>
            Determines if the specified directive has been provided in the GraphQL query request for currently executed field.
            </summary>
        </member>
        <member name="M:GraphQL.ResolveFieldContextExtensions.GetDirective(GraphQL.IResolveFieldContext,System.String)">
            <summary>
            Gets directive provided in the GraphQL query request by its name.
            </summary>
        </member>
        <member name="M:GraphQL.ResolveFieldContextExtensions.GetArgument``1(GraphQL.IResolveFieldContext,System.String,``0)">
            <summary>
            Returns the value of the specified field argument, or <paramref name="defaultValue"/> when unspecified or when specified as <see langword="null"/>.
            Field and variable default values take precedence over the <paramref name="defaultValue"/> parameter.
            </summary>
        </member>
        <member name="M:GraphQL.ResolveFieldContextExtensions.GetArgument(GraphQL.IResolveFieldContext,System.Type,System.String,System.Object)">
            <inheritdoc cref="M:GraphQL.ResolveFieldContextExtensions.GetArgument``1(GraphQL.IResolveFieldContext,System.String,``0)"/>
        </member>
        <member name="M:GraphQL.ResolveFieldContextExtensions.HasArgument(GraphQL.IResolveFieldContext,System.String)">
            <summary>Determines if the specified field argument has been provided in the GraphQL query request.</summary>
        </member>
        <member name="M:GraphQL.ResolveFieldContextExtensions.IsIntrospectionField(GraphQL.Types.FieldType)">
            <summary>
            Determines if this field is an introspection field (__schema, __type, __typename) -- but not if it is a field of an introspection type.
            </summary>
        </member>
        <member name="M:GraphQL.ResolveFieldContextExtensions.As``1(GraphQL.IResolveFieldContext)">
            <summary>Returns the <see cref="T:GraphQL.IResolveFieldContext"/> typed as an <see cref="T:GraphQL.IResolveFieldContext`1"/></summary>
            <exception cref="T:System.ArgumentException">Thrown if the <see cref="P:GraphQL.IResolveFieldContext.Source"/> property cannot be cast to the specified type</exception>
        </member>
        <member name="M:GraphQL.ResolveFieldContextExtensions.GetInputExtension(GraphQL.IResolveFieldContext,System.String)">
            <summary>
            Method to get value by path (key1.key2.keyN) from input extensions dictionary.
            </summary>
            <param name="context">Context with dictionary of extra information supplied with the GraphQL request.</param>
            <param name="path">Path to value in key1.key2.keyN format.</param>
            <returns>Value, if any exists on the specified path, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:GraphQL.ResolveFieldContextExtensions.GetOutputExtension(GraphQL.IResolveFieldContext,System.String)">
            <summary>
            Thread safe method to get value by path (key1.key2.keyN) from output extensions dictionary.
            </summary>
            <param name="context">Context with extensions response map.</param>
            <param name="path">Path to value in key1.key2.keyN format.</param>
            <returns>Value, if any exists on the specified path, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:GraphQL.ResolveFieldContextExtensions.SetOutputExtension(GraphQL.IResolveFieldContext,System.String,System.Object)">
            <summary>
            Thread safe method to set value by path (key1.key2.keyN) to output extensions dictionary.
            if the given path or its part contains values, then they will be overwritten.
            </summary>
            <param name="context">Context with extensions response map.</param>
            <param name="path">Path to value in key1.key2.keyN format.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:GraphQL.ResolveFieldContextExtensions.Copy(GraphQL.IResolveFieldContext)">
            <summary>
            Make a copy of the specified <see cref="T:GraphQL.IResolveFieldContext"/> instance so it can be
            accessed at a later time.
            </summary>
        </member>
        <member name="M:GraphQL.ResolveFieldContextExtensions.Copy``1(GraphQL.IResolveFieldContext{``0})">
            <summary>
            Make a copy of the specified <see cref="T:GraphQL.IResolveFieldContext"/> instance so it can be
            accessed at a later time.
            </summary>
        </member>
        <member name="T:GraphQL.Resolvers.ExpressionFieldResolver`2">
            <summary>
            Returns a value from the field's graph type's source object, based on a predefined expression.
            <br/><br/>
            Supports asynchronous return types.
            <br/><br/>
            Note: this class uses dynamic compilation and therefore allocates a relatively large amount of
            memory in managed heap, ~1KB. Do not use this class in cases with limited memory requirements.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.ExpressionFieldResolver`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Initializes a new instance that runs the specified expression when resolving a field.
            <see cref="T:System.Threading.Tasks.Task`1"/> and <see cref="T:System.Threading.Tasks.ValueTask`1"/> return types are also supported.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.ExpressionFieldResolver`2.GraphQL#Resolvers#IFieldResolver#ResolveAsync(GraphQL.IResolveFieldContext)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Resolvers.FuncFieldResolver`1">
            <summary>
            When resolving a field, this implementation calls a predefined <see cref="T:System.Func`2"/> and returns the result
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.FuncFieldResolver`1.#ctor(System.Func{GraphQL.IResolveFieldContext,`0})">
            <summary>
            Initializes a new instance that runs the specified delegate when resolving a field.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.FuncFieldResolver`1.#ctor(System.Func{GraphQL.IResolveFieldContext,System.Threading.Tasks.ValueTask{`0}})">
            <inheritdoc cref="M:GraphQL.Resolvers.FuncFieldResolver`1.#ctor(System.Func{GraphQL.IResolveFieldContext,`0})"/>
        </member>
        <member name="M:GraphQL.Resolvers.FuncFieldResolver`1.ResolveAsync(GraphQL.IResolveFieldContext)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Resolvers.FuncFieldResolver`2">
            <summary>
            <inheritdoc cref="T:GraphQL.Resolvers.FuncFieldResolver`1"/>
            <br/><br/>
            This implementation provides a typed <see cref="T:GraphQL.IResolveFieldContext`1"/> to the resolver function.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.FuncFieldResolver`2.#ctor(System.Func{GraphQL.IResolveFieldContext{`0},`1})">
            <inheritdoc cref="M:GraphQL.Resolvers.FuncFieldResolver`1.#ctor(System.Func{GraphQL.IResolveFieldContext,`0})"/>
        </member>
        <member name="M:GraphQL.Resolvers.FuncFieldResolver`2.#ctor(System.Func{GraphQL.IResolveFieldContext{`0},System.Threading.Tasks.ValueTask{`1}})">
            <inheritdoc cref="M:GraphQL.Resolvers.FuncFieldResolver`1.#ctor(System.Func{GraphQL.IResolveFieldContext,`0})"/>
        </member>
        <member name="M:GraphQL.Resolvers.FuncFieldResolver`2.ResolveAsync(GraphQL.IResolveFieldContext)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Resolvers.IFieldResolver">
            <summary>
            <para>
            A field resolver returns an object for a given field within a graph.
            </para><para>
            The <see cref="P:GraphQL.Types.FieldType.Resolver"/> property defines the field resolver to be used for the field.
            </para><para>
            Typically an instance of <see cref="T:GraphQL.Resolvers.FuncFieldResolver`2">FuncFieldResolver</see>
            is created when code needs to execute within the field resolver - typically by calling
            <see cref="T:GraphQL.Builders.FieldBuilder`2">FieldBuilder</see>.<see cref="M:GraphQL.Builders.FieldBuilder`2.Resolve(System.Func{GraphQL.IResolveFieldContext{`0},`1})">Resolve</see>
            or <see cref="T:GraphQL.Builders.FieldBuilder`2">FieldBuilder</see>.<see cref="M:GraphQL.Builders.FieldBuilder`2.ResolveAsync(System.Func{GraphQL.IResolveFieldContext{`0},System.Threading.Tasks.Task{`1}})">ResolveAsync</see>.
            </para><para>
            When mapping fields to source object properties via
            <see cref="M:GraphQL.Types.ComplexGraphType`1.Field``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Type)">Field(x => x.Name)</see>,
            <see cref="T:GraphQL.Resolvers.ExpressionFieldResolver`2">ExpressionFieldResolver</see> is used.
            </para><para>
            When a field resolver is not defined, such as with <see cref="M:GraphQL.Types.ComplexGraphType`1.Field``2(System.String)">Field("Name")</see>,
            the static instance of <see cref="T:GraphQL.Resolvers.NameFieldResolver"/> is used.
            </para>
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.IFieldResolver.ResolveAsync(GraphQL.IResolveFieldContext)">
            <summary>
            Returns an <see cref="T:System.Threading.Tasks.ValueTask`1"/> wrapping an object or <see langword="null"/> for the specified field.
            </summary>
        </member>
        <member name="T:GraphQL.Resolvers.ISourceStreamResolver">
            <summary>
            Returns an <see cref="T:System.IObservable`1"/> for a field. The <see cref="T:System.IObservable`1"/> provides
            a sequence of event notifications (aka 'an event stream') to the subscription execution engine,
            which will resolve child fields using the event data as the source. Then the resolved graph is
            returned to the client, and the process repeats for further event notifications. 
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.ISourceStreamResolver.ResolveAsync(GraphQL.IResolveFieldContext)">
            <inheritdoc cref="T:GraphQL.Resolvers.ISourceStreamResolver"/>
        </member>
        <member name="T:GraphQL.Resolvers.MemberResolver">
            <summary>
            A precompiled field resolver for a specific <see cref="T:System.Reflection.MethodInfo"/>, <see cref="T:System.Reflection.PropertyInfo"/> or <see cref="T:System.Reflection.FieldInfo"/>.
            Returns the specified field or property, or for methods, calls the specified method (with the specified arguments)
            and returns the value of the method.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.MemberResolver.#ctor(System.Reflection.FieldInfo,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Initializes an instance for the specified field, using the specified instance expression to access the instance of the field.
            <br/><br/>
            An example of an instance expression would be as follows:
            <code>context =&gt; (TSourceType)context.Source</code>
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.MemberResolver.#ctor(System.Reflection.PropertyInfo,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Initializes an instance for the specified property, using the specified instance expression to access the instance of the property.
            <br/><br/>
            An example of an instance expression would be as follows:
            <code>context =&gt; (TSourceType)context.Source</code>
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.MemberResolver.#ctor(System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression,System.Collections.Generic.IList{System.Linq.Expressions.LambdaExpression})">
            <summary>
            Initializes an instance for the specified method, using the specified instance expression to access the instance of the method,
            along with a list of arguments to be passed to the method. The method argument expressions must have return types that match
            those of the method arguments.
            <br/><br/>
            An example of an instance expression would be as follows:
            <code>context =&gt; (TSourceType)context.Source</code>
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.MemberResolver.BuildFieldResolver(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Creates an appropriate resolver function based on the return type of the expression body.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.MemberResolver.BuildFieldResolverInternal(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <inheritdoc cref="M:GraphQL.Resolvers.MemberResolver.BuildFieldResolver(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)"/>
        </member>
        <member name="M:GraphQL.Resolvers.MemberResolver.ResolveAsync(GraphQL.IResolveFieldContext)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Resolvers.NameFieldResolver">
            <summary>
            <para>
            Attempts to return a value for a field from the graph's source object, matching the name of
            the field to a property or a method with the same name on the source object.
            </para><para>
            Call <see cref="P:GraphQL.Resolvers.NameFieldResolver.Instance"/> to retrieve an instance of this class.
            </para>
            </summary>
        </member>
        <member name="P:GraphQL.Resolvers.NameFieldResolver.Instance">
            <summary>
            Returns the static instance of the <see cref="T:GraphQL.Resolvers.NameFieldResolver"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.NameFieldResolver.ResolveAsync(GraphQL.IResolveFieldContext)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Resolvers.NameFieldResolver.CreateResolver(System.Type,System.String)">
            <summary>
            <para>
            Dynamically creates the necessary delegate in runtime to get the property/method value of the specified type.
            </para><para>
            Example:
            </para><code>
            public class Person
            {
                public int Age { get; set; }
            }
            </code>
            <para>
            So resulting Func will be generated as <c>{x => Convert(Convert(x, Person).Age, Object)}</c><br/>
            1. First, the input parameter 'x' is converted from the object to a specific type.<br/>
            2. The required property or method is extracted from casted value.<br/>
            3. Then result is converted again to the object and returned from the method.
            </para>
            </summary>
            <param name="target">The type from which you want to get the value.</param>
            <param name="name">Property/method name.</param>
            <returns>Compiled field resolver.</returns>
        </member>
        <member name="T:GraphQL.Resolvers.ObservableFromAsyncEnumerable`1">
            <inheritdoc cref="M:GraphQL.Resolvers.ObservableFromAsyncEnumerable`1.Create(System.Func{GraphQL.IResolveFieldContext,System.Collections.Generic.IAsyncEnumerable{`0}})"/>
        </member>
        <member name="M:GraphQL.Resolvers.ObservableFromAsyncEnumerable`1.Create(System.Func{GraphQL.IResolveFieldContext,System.Threading.Tasks.ValueTask{System.Collections.Generic.IAsyncEnumerable{`0}}})">
            <summary>
            Returns a source stream resolver delegate (which returns an <see cref="T:System.IObservable`1"/>) from a delegate
            which returns <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>. Each execution will create a new
            <see cref="T:GraphQL.Resolvers.ObservableFromAsyncEnumerable`1"/> instance which can only be used once.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.ObservableFromAsyncEnumerable`1.Create(System.Func{GraphQL.IResolveFieldContext,System.Threading.Tasks.Task{System.Collections.Generic.IAsyncEnumerable{`0}}})">
            <inheritdoc cref="M:GraphQL.Resolvers.ObservableFromAsyncEnumerable`1.Create(System.Func{GraphQL.IResolveFieldContext,System.Threading.Tasks.ValueTask{System.Collections.Generic.IAsyncEnumerable{`0}}})"/>
        </member>
        <member name="M:GraphQL.Resolvers.ObservableFromAsyncEnumerable`1.Create(System.Func{GraphQL.IResolveFieldContext,System.Collections.Generic.IAsyncEnumerable{`0}})">
            <inheritdoc cref="M:GraphQL.Resolvers.ObservableFromAsyncEnumerable`1.Create(System.Func{GraphQL.IResolveFieldContext,System.Threading.Tasks.ValueTask{System.Collections.Generic.IAsyncEnumerable{`0}}})"/>
        </member>
        <member name="M:GraphQL.Resolvers.ObservableFromAsyncEnumerable`1.Subscribe(System.IObserver{System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Resolvers.ObservableFromAsyncEnumerable`1.System#IDisposable#Dispose">
            <summary>
            Signals the iteration task to cancel execution.
            </summary>
        </member>
        <member name="T:GraphQL.Resolvers.ObservableFromAsyncEnumerable`1.OverrideCancellationContext">
            <summary>
            Overrides <see cref="P:GraphQL.IResolveFieldContext.CancellationToken"/> with the specified token.
            This allows the <see cref="T:GraphQL.Resolvers.SourceStreamMethodResolver"/> to utilize existing functionality
            to pass the token along to <see cref="P:GraphQL.Resolvers.ObservableFromAsyncEnumerable`1.OverrideCancellationContext.CancellationToken"/> method arguments even if
            <see cref="T:System.Runtime.CompilerServices.EnumeratorCancellationAttribute"/> was accidentally not set on the method argument.
            It also allows <see cref="P:GraphQL.IResolveFieldContext.CancellationToken"/> to hold the proper token
            indicating when/if the iterator should be canceled.
            </summary>
        </member>
        <member name="T:GraphQL.Resolvers.SourceFieldResolver">
            <summary>
            Returns value of <see cref="P:GraphQL.IResolveFieldContext.Source"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Resolvers.SourceFieldResolver.Instance">
            <summary>
            Returns the static instance of the <see cref="T:GraphQL.Resolvers.SourceFieldResolver"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.SourceFieldResolver.ResolveAsync(GraphQL.IResolveFieldContext)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Resolvers.SourceStreamMethodResolver">
            <summary>
            A precompiled source stream resolver for a specific <see cref="T:System.Reflection.MethodInfo"/>.
            Calls the specified method (with the specified arguments) and returns the value of the method.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.SourceStreamMethodResolver.#ctor(System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression,System.Collections.Generic.IList{System.Linq.Expressions.LambdaExpression})">
            <summary>
            Initializes an instance for the specified method, using the specified instance expression to access the instance of the method,
            along with a list of arguments to be passed to the method. The method argument expressions must have return types that match
            those of the method arguments.
            <br/><br/>
            An example of an instance expression would be as follows:
            <code>context =&gt; (TSourceType)context.Source</code>
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.SourceStreamMethodResolver.BuildFieldResolver(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Resolvers.SourceStreamMethodResolver.BuildSourceStreamResolver(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Creates an appropriate event stream resolver function based on the return type of the expression body.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.SourceStreamMethodResolver.ResolveStreamAsync(GraphQL.IResolveFieldContext)">
            <inheritdoc cref="M:GraphQL.Resolvers.ISourceStreamResolver.ResolveAsync(GraphQL.IResolveFieldContext)" />
        </member>
        <member name="T:GraphQL.Resolvers.SourceStreamMethodResolver.ObservableAdapter`1">
            <summary>
            Converts an <see cref="T:System.IObservable`1"/> for value types into an <see cref="T:System.IObservable`1">IObservable&lt;object?&gt;</see>.
            </summary>
        </member>
        <member name="T:GraphQL.Resolvers.SourceStreamResolver`1">
            <summary>
            When resolving a subscription field, this implementation calls a predefined delegate and returns the result.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.SourceStreamResolver`1.#ctor(System.Func{GraphQL.IResolveFieldContext,System.IObservable{`0}})">
            <summary>
            Initializes a new instance that runs the specified delegate when resolving a subscription field.
            </summary>
        </member>
        <member name="M:GraphQL.Resolvers.SourceStreamResolver`1.#ctor(System.Func{GraphQL.IResolveFieldContext,System.Threading.Tasks.ValueTask{System.IObservable{`0}}})">
            <inheritdoc cref="M:GraphQL.Resolvers.SourceStreamResolver`1.#ctor(System.Func{GraphQL.IResolveFieldContext,System.IObservable{`0}})"/>
        </member>
        <member name="M:GraphQL.Resolvers.SourceStreamResolver`1.ResolveAsync(GraphQL.IResolveFieldContext)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Resolvers.SourceStreamResolver`2">
            <inheritdoc cref="T:GraphQL.Resolvers.SourceStreamResolver`1"/>
        </member>
        <member name="M:GraphQL.Resolvers.SourceStreamResolver`2.#ctor(System.Func{GraphQL.IResolveFieldContext{`0},System.IObservable{`1}})">
            <inheritdoc cref="M:GraphQL.Resolvers.SourceStreamResolver`1.#ctor(System.Func{GraphQL.IResolveFieldContext,System.IObservable{`0}})"/>
        </member>
        <member name="M:GraphQL.Resolvers.SourceStreamResolver`2.#ctor(System.Func{GraphQL.IResolveFieldContext{`0},System.Threading.Tasks.ValueTask{System.IObservable{`1}}})">
            <inheritdoc cref="M:GraphQL.Resolvers.SourceStreamResolver`2.#ctor(System.Func{GraphQL.IResolveFieldContext{`0},System.IObservable{`1}})"/>
        </member>
        <member name="M:GraphQL.Resolvers.SourceStreamResolver`2.ResolveAsync(GraphQL.IResolveFieldContext)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Int">
            <summary>
            Adapter to unify usages of int.[Parse|TryParse](ReadOnlySpan) for netstandard2.0 and netstandard2.1
            </summary>
        </member>
        <member name="T:GraphQL.UInt">
            <summary>
            Adapter to unify usages of uint.[Parse|TryParse](ReadOnlySpan) for netstandard2.0 and netstandard2.1
            </summary>
        </member>
        <member name="T:GraphQL.UShort">
            <summary>
            Adapter to unify usages of ushort.[Parse|TryParse](ReadOnlySpan) for netstandard2.0 and netstandard2.1
            </summary>
        </member>
        <member name="T:GraphQL.Short">
            <summary>
            Adapter to unify usages of short.[Parse|TryParse](ReadOnlySpan) for netstandard2.0 and netstandard2.1
            </summary>
        </member>
        <member name="T:GraphQL.Byte">
            <summary>
            Adapter to unify usages of byte.[Parse|TryParse](ReadOnlySpan) for netstandard2.0 and netstandard2.1
            </summary>
        </member>
        <member name="T:GraphQL.SByte">
            <summary>
            Adapter to unify usages of sbyte.[Parse|TryParse](ReadOnlySpan) for netstandard2.0 and netstandard2.1
            </summary>
        </member>
        <member name="T:GraphQL.Long">
            <summary>
            Adapter to unify usages of long.[Parse|TryParse](ReadOnlySpan) for netstandard2.0 and netstandard2.1
            </summary>
        </member>
        <member name="T:GraphQL.ULong">
            <summary>
            Adapter to unify usages of ulong.[Parse|TryParse](ReadOnlySpan) for netstandard2.0 and netstandard2.1
            </summary>
        </member>
        <member name="T:GraphQL.Decimal">
            <summary>
            Adapter to unify usages of decimal.[Parse|TryParse](ReadOnlySpan) for netstandard2.0 and netstandard2.1
            </summary>
        </member>
        <member name="T:GraphQL.BigInt">
            <summary>
            Adapter to unify usages of BigInteger.[Parse|TryParse](ReadOnlySpan) for netstandard2.0 and netstandard2.1
            </summary>
        </member>
        <member name="T:GraphQL.Double">
            <summary>
            Adapter to unify usages of double.[Parse|TryParse](ReadOnlySpan) for netstandard2.0 and netstandard2.1
            </summary>
        </member>
        <member name="T:GraphQL.Transport.GraphQLRequest">
            <summary>
            Represents data sent by client to GraphQL server.
            See https://github.com/graphql/graphql-over-http/blob/master/spec/GraphQLOverHTTP.md#request
            </summary>
        </member>
        <member name="P:GraphQL.Transport.GraphQLRequest.OperationName">
            <summary>
            The name of the Operation in the Document to execute (optional).
            </summary>
        </member>
        <member name="P:GraphQL.Transport.GraphQLRequest.Query">
            <summary>
            A Document containing GraphQL Operations and Fragments to execute.
            It can be null in case of automatic persisted queries (https://www.apollographql.com/docs/apollo-server/performance/apq/)
            when a client sends only SHA-256 hash of the query in <see cref="P:GraphQL.Transport.GraphQLRequest.Extensions"/> given that corresponding key-value pair has been saved on a server beforehand.
            </summary>
        </member>
        <member name="P:GraphQL.Transport.GraphQLRequest.Variables">
            <summary>
            Values for any Variables defined by the Operation (optional).
            </summary>
        </member>
        <member name="P:GraphQL.Transport.GraphQLRequest.Extensions">
            <summary>
            This entry is reserved for implementors to extend the protocol however they see fit (optional).
            </summary>
        </member>
        <member name="T:GraphQL.Transport.OperationMessage">
            <summary>
            Represents a message typically used by the graphql-ws or graphql-transport-ws WebSockets-based protocols.
            </summary>
        </member>
        <member name="P:GraphQL.Transport.OperationMessage.Id">
            <summary>
            Nullable Id
            </summary>
        </member>
        <member name="P:GraphQL.Transport.OperationMessage.Type">
            <summary>
            Type of operation
            </summary>
        </member>
        <member name="P:GraphQL.Transport.OperationMessage.Payload">
            <summary>
            Nullable payload
            </summary>
        </member>
        <member name="T:GraphQL.IGraphQLSerializer">
            <summary>
            Serializes and deserializes object hierarchies to/from a stream.
            Should include special support for <see cref="T:GraphQL.ExecutionResult"/>, <see cref="T:GraphQL.Inputs"/>
            and transport-specific classes as necessary.
            Typical classes needed by HTTP-based servers are provided within <see cref="N:GraphQL.Transport">GraphQL.Transport</see>.
            </summary>
        </member>
        <member name="M:GraphQL.IGraphQLSerializer.WriteAsync``1(System.IO.Stream,``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously serializes the specified object to the specified stream.
            Typically used to write <see cref="T:GraphQL.ExecutionResult"/> instances to a JSON result.
            </summary>
        </member>
        <member name="M:GraphQL.IGraphQLSerializer.ReadAsync``1(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deserializes the specified stream to the specified object type.
            Typically used to parse <see cref="T:GraphQL.Transport.GraphQLRequest"/> instances from JSON.
            </summary>
        </member>
        <member name="M:GraphQL.IGraphQLSerializer.ReadNode``1(System.Object)">
            <summary>
            Deserializes the specified JSON element (element type depends on the serializer
            implementation) to the specified object type.
            A <paramref name="value"/> of <see langword="null"/> returns <see langword="default"/>.
            </summary>
        </member>
        <member name="P:GraphQL.IGraphQLSerializer.IsNativelyAsync">
            <summary>
            Indicates whether this serializer makes asynchronous calls to the underlying stream
            while serializing or deserializing. This property is auxiliary API in nature and may
            help to avoid an additional/unnecessary buffering at caller side.
            </summary>
        </member>
        <member name="T:GraphQL.IGraphQLTextSerializer">
            <summary>
            Serializes and deserializes object hierarchies to/from a string as well as to/from a stream.
            Should include special support for <see cref="T:GraphQL.ExecutionResult"/>, <see cref="T:GraphQL.Inputs"/>
            and transport-specific classes as necessary.
            Typical classes needed by HTTP-based servers are provided within <see cref="N:GraphQL.Transport">GraphQL.Transport</see>.
            </summary>
        </member>
        <member name="M:GraphQL.IGraphQLTextSerializer.Serialize``1(``0)">
            <summary>
            Serializes the specified object to a string and returns it.
            Typically used to write <see cref="T:GraphQL.ExecutionResult"/> instances to a JSON result.
            </summary>
        </member>
        <member name="M:GraphQL.IGraphQLTextSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes the specified string to the specified object type.
            Typically used to parse <see cref="T:GraphQL.Transport.GraphQLRequest"/> instances from JSON.
            A <paramref name="value"/> of <see langword="null"/> returns <see langword="default"/>.
            </summary>
        </member>
        <member name="T:GraphQL.Types.ArgumentInformation">
            <summary>
            Contains information pertaining to a method parameter in preparation for building an
            expression or query argument for it.
            <br/><br/>
            If <see cref="P:GraphQL.Types.ArgumentInformation.Expression"/> is set, a query argument will not be added
            and the expression will be used to build the method resolver.
            <br/><br/>
            If not, a query argument will be generated and added to the field; the field resolver will
            use the argument's value to populate the method parameter.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ArgumentInformation.#ctor(System.Reflection.ParameterInfo,System.Type,GraphQL.Types.FieldType,GraphQL.Types.TypeInformation,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Initializes a new instance with the specified parameters.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ArgumentInformation.#ctor(System.Reflection.ParameterInfo,System.Type,GraphQL.Types.FieldType,GraphQL.Types.TypeInformation)">
            <summary>
            Initializes a new instance with the specified parameters.
            If the parameter type is <see cref="T:GraphQL.IResolveFieldContext"/> or <see cref="T:System.Threading.CancellationToken"/>,
            an expression is generated for the parameter and set within <see cref="P:GraphQL.Types.ArgumentInformation.Expression"/>; otherwise
            <see cref="P:GraphQL.Types.ArgumentInformation.Expression"/> is set to <see langword="null"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ArgumentInformation.ParameterInfo">
            <summary>
            The method parameter.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ArgumentInformation.SourceType">
            <summary>
            The expected type of <see cref="P:GraphQL.IResolveFieldContext.Source"/>.
            Should equal <c>TSourceType</c> within <see cref="T:GraphQL.Types.AutoRegisteringObjectGraphType`1"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ArgumentInformation.FieldType">
            <summary>
            The <see cref="T:GraphQL.Types.FieldType"/> that the query argument will be added to.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ArgumentInformation.TypeInformation">
            <summary>
            The parsed type information of the method parameter.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ArgumentInformation.Expression">
            <summary>
            Gets or sets a delegate in the form of a <see cref="T:System.Linq.Expressions.LambdaExpression"/> to be used to populate
            this method argument while building the field resolver.
            <br/><br/>
            If not set, a query argument will be added to the field and the argument's value will be used
            to populate the method argument while building the field resolver.
            <br/><br/>
            The delegate must be of the type
            <see cref="T:System.Linq.Expressions.Expression`1">Expression</see>&lt;<see cref="T:System.Func`2">Func</see>&lt;<see cref="T:GraphQL.IResolveFieldContext"/>, TParameterType&gt;&gt;
            where TParameterType matches <see cref="P:GraphQL.Types.ArgumentInformation.ParameterInfo">ParameterInfo</see>.<see cref="P:System.Reflection.ParameterInfo.ParameterType">ParameterType</see>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ArgumentInformation.SetDelegate``1(System.Func{GraphQL.IResolveFieldContext,``0})">
            <summary>
            Sets a delegate to be used to populate this method argument while building the field resolver.
            An expression is generated that calls <paramref name="argumentDelegate"/> and stored within <see cref="P:GraphQL.Types.ArgumentInformation.Expression"/>.
            <br/><br/>
            The delegate must be of the type
            <see cref="T:System.Func`2">Func</see>&lt;<see cref="T:GraphQL.IResolveFieldContext"/>, <typeparamref name="TParameterType"/>&gt;
            where <typeparamref name="TParameterType"/> matches <see cref="P:GraphQL.Types.ArgumentInformation.ParameterInfo">ParameterInfo</see>.<see cref="P:System.Reflection.ParameterInfo.ParameterType">ParameterType</see>.
            <br/><br/>
            As of .NET 7, this method cannot be used in AOT compilation scenarios.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ArgumentInformation.SetDelegateWithCast(System.Func{GraphQL.IResolveFieldContext,System.Object})">
            <summary>
            Sets a delegate to be used to populate this method argument while building the field resolver.
            An expression is generated that calls <paramref name="argumentDelegate"/> and stored within <see cref="P:GraphQL.Types.ArgumentInformation.Expression"/>.
            The result of the delegate is cast to the method parameter type.
            <br/><br/>
            See <see cref="M:GraphQL.Types.ArgumentInformation.SetDelegate``1(System.Func{GraphQL.IResolveFieldContext,``0})"/> for a
            type-safe version of this method, recommended for use with <see cref="M:GraphQL.GraphQLAttribute.Modify``1(GraphQL.Types.ArgumentInformation)"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ArgumentInformation.ApplyAttributes">
            <summary>
            Applies <see cref="T:GraphQL.GraphQLAttribute"/> attributes pulled from the <see cref="P:GraphQL.Types.ArgumentInformation.ParameterInfo">ParameterInfo</see> onto this instance.
            Also scans the parameter's owning module and assembly for globally-applied attributes.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ArgumentInformation.ConstructQueryArgument">
            <summary>
            Builds a query argument or expression from this instance.
            <br/><br/>
            If a query argument is returned, it will be added to the arguments list of the field type.
            <br/><br/>
            If an expression is returned, it will be used to populate the method argument within the field resolver;
            if not, the query argument's value will be used to populate the method argument within the field resolver.
            <br/><br/>
            The default implementation will return either a <see cref="T:GraphQL.Types.QueryArgument"/> or <see cref="T:System.Linq.Expressions.LambdaExpression"/>
            instance; not both. It is possible to return both, in which case the query argument will be added to the
            field and the expression will be used to populate the method argument within the field resolver.
            You cannot return <see langword="null"/> for both the query argument and expression.
            </summary>
        </member>
        <member name="T:GraphQL.Types.AutoSchema`1">
            <summary>
            A schema with a Query type that is initialized to an instance
            of <see cref="T:GraphQL.Types.AutoRegisteringObjectGraphType`1"/>
            with <typeparamref name="TQueryClrType"/> as the query clr type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoSchema`1.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance from the specified service provider.
            </summary>
        </member>
        <member name="T:GraphQL.Types.AppliedDirectives">
            <summary>
            A class that represents a list of directives applied to a schema element (type, field, argument, etc.).
            Note that built-in @deprecated directive is not taken into account and ignored.
            </summary>
        </member>
        <member name="P:GraphQL.Types.AppliedDirectives.Count">
            <summary>
            Gets the count of applied directives.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AppliedDirectives.Add(GraphQL.Types.AppliedDirective)">
            <summary>
            Adds directive to list.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AppliedDirectives.Find(System.String)">
            <summary>
            Finds a directive by its name from the list. If the list contains several
            directives with the given name, then the first one is returned.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AppliedDirectives.Remove(System.String)">
            <summary>
            Removes a directive by its name from the list. If the list contains several
            directives with the given name, then all such directives will be removed.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AppliedDirectives.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:GraphQL.Types.AutoRegisteringGraphTypeMappingProvider">
            <summary>
            Maps unmapped complex types to <see cref="T:GraphQL.Types.AutoRegisteringObjectGraphType`1"/>
            and <see cref="T:GraphQL.Types.AutoRegisteringInputObjectGraphType`1"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringGraphTypeMappingProvider.#ctor">
            <summary>
            Creates an instance that maps both input and output types.
            CLR interface output types will be mapped as GraphQL interfaces.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringGraphTypeMappingProvider.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates an instance that maps input and/or output types, as specified.
            When output types are enabled, <paramref name="mapInterfaceTypes"/> indicates whether CLR
            interface output types are mapped as GraphQL interfaces or GraphQL object types.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringGraphTypeMappingProvider.GetGraphTypeFromClrType(System.Type,System.Boolean,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.IGraphTypeMappingProvider">
            <summary>
            Provides a mapping from CLR types to graph types.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IGraphTypeMappingProvider.GetGraphTypeFromClrType(System.Type,System.Boolean,System.Type)">
            <summary>
            Returns a graph type for a given CLR type, or <see langword="null"/> if no mapping is available.
            Should return <paramref name="preferredGraphType"/> if this instance does not wish to change the mapping.
            </summary>
            <param name="clrType">The CLR type to be mapped.</param>
            <param name="isInputType">Indicates whether the type is an input type.</param>
            <param name="preferredGraphType">The graph type that is suggested for this CLR type.</param>
        </member>
        <member name="T:GraphQL.Types.Interfaces">
            <summary>
            A class that represents a set of instances of supported GraphQL interface types for <see cref="T:GraphQL.Types.IImplementInterfaces"/> i.e <see cref="T:GraphQL.Types.ObjectGraphType`1"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Types.Interfaces.Count">
            <summary>
            Gets the count of supported GraphQL interface types.
            </summary>
        </member>
        <member name="M:GraphQL.Types.Interfaces.Add``1">
            <summary>
            Adds a GraphQL interface graph type to the list of GraphQL interfaces implemented by this graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.Interfaces.Add(System.Type)">
            <summary>
            Adds a GraphQL interface graph type to the list of GraphQL interfaces implemented by this graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.Interfaces.Contains(System.Type)">
            <summary>
            Determines if the specified interface type is in the list.
            </summary>
        </member>
        <member name="M:GraphQL.Types.Interfaces.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:GraphQL.Types.PossibleTypes">
            <summary>
            A class that represents a set of possible types for <see cref="T:GraphQL.Types.IAbstractGraphType"/> i.e. <see cref="T:GraphQL.Types.InterfaceGraphType"/> or <see cref="T:GraphQL.Types.UnionGraphType"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Types.PossibleTypes.Count">
            <summary>
            Gets the count of possible types.
            </summary>
        </member>
        <member name="M:GraphQL.Types.PossibleTypes.Contains(GraphQL.Types.IObjectGraphType)">
            <summary>
            Determines if the specified graph type is in the list.
            </summary>
        </member>
        <member name="M:GraphQL.Types.PossibleTypes.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:GraphQL.Types.QueryArguments">
            <summary>
            Represents a list of arguments to a field or directive.
            </summary>
        </member>
        <member name="M:GraphQL.Types.QueryArguments.#ctor(GraphQL.Types.QueryArgument[])">
            <summary>
            Initializes a new instance containing the specified arguments.
            </summary>
        </member>
        <member name="M:GraphQL.Types.QueryArguments.#ctor(System.Collections.Generic.IEnumerable{GraphQL.Types.QueryArgument})">
            <summary>
            Initializes a new instance containing the specified arguments.
            </summary>
        </member>
        <member name="P:GraphQL.Types.QueryArguments.Item(System.Int32)">
            <summary>
            Gets or sets the argument at the specified index.
            </summary>
        </member>
        <member name="P:GraphQL.Types.QueryArguments.Count">
            <summary>
            Returns the number of arguments in the list.
            </summary>
        </member>
        <member name="M:GraphQL.Types.QueryArguments.Add(GraphQL.Types.QueryArgument)">
            <summary>
            Adds an argument to the list.
            </summary>
        </member>
        <member name="M:GraphQL.Types.QueryArguments.Find(GraphQLParser.ROM)">
            <summary>
            Finds an argument by its name from the list.
            </summary>
        </member>
        <member name="M:GraphQL.Types.QueryArguments.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.ResolvedInterfaces">
            <summary>
            A class that represents a set of instances of supported GraphQL interface types for <see cref="T:GraphQL.Types.IImplementInterfaces"/> i.e <see cref="T:GraphQL.Types.ObjectGraphType`1"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ResolvedInterfaces.Count">
            <summary>
            Gets the count of supported GraphQL interface types.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ResolvedInterfaces.Contains(GraphQL.Types.IInterfaceGraphType)">
            <summary>
            Determines if the specified interface type is in the list.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ResolvedInterfaces.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:GraphQL.Types.SchemaDirectives">
            <summary>
            A class that represents a list of directives supported by the schema.
            </summary>
        </member>
        <member name="P:GraphQL.Types.SchemaDirectives.Include">
            <summary>
            Returns an instance of the predefined 'include' directive.
            </summary>
        </member>
        <member name="P:GraphQL.Types.SchemaDirectives.Skip">
            <summary>
            Returns an instance of the predefined 'skip' directive.
            </summary>
        </member>
        <member name="P:GraphQL.Types.SchemaDirectives.Deprecated">
            <summary>
            Returns an instance of the predefined 'deprecated' directive.
            </summary>
        </member>
        <member name="P:GraphQL.Types.SchemaDirectives.Count">
            <summary>
            Gets the count of directives.
            </summary>
        </member>
        <member name="M:GraphQL.Types.SchemaDirectives.Register(GraphQL.Types.Directive)">
            <summary>
            Register the specified directive to the schema.
            <br/><br/>
            Directives are used by the GraphQL runtime as a way of modifying execution
            behavior. Type system creators do not usually create them directly.
            </summary>
        </member>
        <member name="M:GraphQL.Types.SchemaDirectives.Register(GraphQL.Types.Directive[])">
            <summary>
            Register the specified directives to the schema.
            <br/><br/>
            Directives are used by the GraphQL runtime as a way of modifying execution
            behavior. Type system creators do not usually create them directly.
            </summary>
        </member>
        <member name="M:GraphQL.Types.SchemaDirectives.Find(GraphQLParser.ROM)">
            <summary>
            Searches the directive by its name and returns it.
            </summary>
            <param name="name">Directive name.</param>
        </member>
        <member name="M:GraphQL.Types.SchemaDirectives.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:GraphQL.Types.SchemaTypes">
            <summary>
            A class that represents a list of all the graph types utilized by a schema.
            Also provides lookup for all schema types and has algorithms for discovering them.
            <br/>
            NOTE: After creating an instance of this class, its contents cannot be changed.
            </summary>
        </member>
        <member name="P:GraphQL.Types.SchemaTypes.BuiltInScalarMappings">
            <summary>
            Returns a dictionary of default CLR type to graph type mappings for a set of built-in (primitive) types.
            </summary>
        </member>
        <member name="M:GraphQL.Types.SchemaTypes.#ctor">
            <summary>
            Initializes a new instance with no types registered.
            </summary>
        </member>
        <member name="M:GraphQL.Types.SchemaTypes.#ctor(GraphQL.Types.ISchema,System.IServiceProvider)">
            <summary>
            Initializes a new instance for the specified schema, and with the specified type resolver.
            </summary>
            <param name="schema">A schema for which this instance is created.</param>
            <param name="serviceProvider">A service provider used to resolve graph types.</param>
        </member>
        <member name="M:GraphQL.Types.SchemaTypes.#ctor(GraphQL.Types.ISchema,System.IServiceProvider,System.Collections.Generic.IEnumerable{GraphQL.Types.IGraphTypeMappingProvider})">
            <summary>
            Initializes a new instance for the specified schema, with the specified type resolver,
            with the specified set of <see cref="T:GraphQL.Types.IGraphTypeMappingProvider"/> instances.
            </summary>
            <param name="schema">A schema for which this instance is created.</param>
            <param name="serviceProvider">A service provider used to resolve graph types.</param>
            <param name="graphTypeMappings">A list of <see cref="T:GraphQL.Types.IGraphTypeMappingProvider"/> instances used to map CLR types to graph types.</param>
        </member>
        <member name="M:GraphQL.Types.SchemaTypes.Initialize(GraphQL.Types.ISchema,System.IServiceProvider,System.Collections.Generic.IEnumerable{GraphQL.Types.IGraphTypeMappingProvider})">
            <summary>
            Initializes the instance for the specified schema, and with the specified type resolver.
            </summary>
            <param name="schema">A schema for which this instance is created.</param>
            <param name="serviceProvider">A service provider used to resolve graph types.</param>
            <param name="graphTypeMappings">A service used to map CLR types to graph types.</param>
        </member>
        <member name="P:GraphQL.Types.SchemaTypes.Dictionary">
            <summary>
            Returns a dictionary that relates type names to graph types.
            </summary>
        </member>
        <member name="M:GraphQL.Types.SchemaTypes.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="P:GraphQL.Types.SchemaTypes.Count">
            <summary>
            Gets the count of all the graph types utilized by the schema.
            </summary>
        </member>
        <member name="M:GraphQL.Types.SchemaTypes.BuildGraphQLType(System.Type,System.Func{System.Type,GraphQL.Types.IGraphType})">
            <summary>
            Returns a new instance of the specified graph type, using the specified resolver to
            instantiate a new instance if the required type cannot be found from the lookup table.
            Defaults to <see cref="M:System.Activator.CreateInstance(System.Type)"/> if no <paramref name="resolve"/>
            parameter is specified. List and non-null graph types are instantiated and their
            <see cref="P:GraphQL.Types.IProvideResolvedType.ResolvedType"/> property is set to a new instance of
            the base (wrapped) type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.SchemaTypes.ApplyMiddleware(GraphQL.Instrumentation.IFieldMiddlewareBuilder)">
            <summary>
            Applies all delegates specified by the middleware builder to the schema.
            <br/><br/>
            When applying to the schema, modifies the resolver of each field of each graph type adding required behavior.
            Therefore, as a rule, this method should be called only once - during schema initialization.
            </summary>
        </member>
        <member name="M:GraphQL.Types.SchemaTypes.ApplyMiddleware(System.Func{GraphQL.Instrumentation.FieldMiddlewareDelegate,GraphQL.Instrumentation.FieldMiddlewareDelegate})">
            <summary>
            Applies the specified middleware transform delegate to the schema.
            <br/><br/>
            When applying to the schema, modifies the resolver of each field of each graph type adding required behavior.
            Therefore, as a rule, this method should be called only once - during schema initialization.
            </summary>
        </member>
        <member name="P:GraphQL.Types.SchemaTypes.Item(GraphQLParser.ROM)">
            <summary>
            Returns a graph type instance from the lookup table by its GraphQL type name.
            </summary>
        </member>
        <member name="M:GraphQL.Types.SchemaTypes.FindGraphType(System.Type)">
            <summary>
            Returns a graph type instance from the lookup table by its .NET type.
            </summary>
            <param name="type">The .NET type of the graph type.</param>
        </member>
        <member name="M:GraphQL.Types.SchemaTypes.GetGraphTypeFromClrType(System.Type,System.Boolean,System.Collections.Generic.IEnumerable{GraphQL.Types.IGraphTypeMappingProvider})">
            <summary>
            Returns a graph type for a specified input or output CLR type.
            This method is called when a graph type is specified as a <see cref="T:GraphQL.Types.GraphQLClrInputTypeReference`1"/> or <see cref="T:GraphQL.Types.GraphQLClrOutputTypeReference`1"/>.
            </summary>
            <param name="clrType">The CLR type to be mapped.</param>
            <param name="isInputType">Indicates if the CLR type should be mapped to an input or output graph type.</param>
            <param name="typeMappings">The list of registered type mappings on the schema.</param>
            <returns>The graph type to be used, or <see langword="null"/> if no match can be found.</returns>
            <remarks>
            This method should not return wrapped types such as <see cref="T:GraphQL.Types.ListGraphType"/> or <see cref="T:GraphQL.Types.NonNullGraphType"/>.
            These are handled within <see cref="M:GraphQL.TypeExtensions.GetGraphTypeFromType(System.Type,System.Boolean,GraphQL.TypeMappingMode)"/>,
            and should already have been wrapped around the type reference.
            </remarks>
        </member>
        <member name="P:GraphQL.Types.SchemaTypes.SchemaMetaFieldType">
            <summary>
            Returns the <see cref="T:GraphQL.Types.FieldType"/> instance for the <c>__schema</c> meta-field.
            </summary>
        </member>
        <member name="P:GraphQL.Types.SchemaTypes.TypeMetaFieldType">
            <summary>
            Returns the <see cref="T:GraphQL.Types.FieldType"/> instance for the <c>__type</c> meta-field.
            </summary>
        </member>
        <member name="P:GraphQL.Types.SchemaTypes.TypeNameMetaFieldType">
            <summary>
            Returns the <see cref="T:GraphQL.Types.FieldType"/> instance for the <c>__typename</c> meta-field.
            </summary>
        </member>
        <member name="T:GraphQL.Types.TypeFields">
            <summary>
            A class that represents a set of fields for <see cref="T:GraphQL.Types.IComplexGraphType"/> i.e <see cref="T:GraphQL.Types.ComplexGraphType`1"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Types.TypeFields.Count">
            <summary>
            Gets the count of fields.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TypeFields.Find(System.String)">
            <summary>
            Searches the list for a field specified by its name and returns it.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TypeFields.Contains(GraphQL.Types.FieldType)">
            <summary>
            Determines if the specified field type is in the list.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TypeFields.Contains(GraphQL.Types.IFieldType)">
            <summary>
            Determines if the specified field type is in the list.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TypeFields.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:GraphQL.Types.AutoRegisteringHelper">
            <summary>
            Helper methods for auto-registering graph types, <see cref="M:GraphQL.Builders.FieldBuilder`2.ResolveDelegate(System.Delegate)">Resolve</see>,
            schema builder method builders, and <see cref="T:GraphQL.Resolvers.NameFieldResolver"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringHelper.BuildFieldResolver(System.Reflection.MemberInfo,System.Type,GraphQL.Types.FieldType,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Constructs a field resolver for the specified field, property or method with the specified instance expression.
            Does not build accompanying query arguments for detected method parameters.
            Does not allow overriding build behavior.
            <br/><br/>
            An example of an instance expression would be as follows:
            <code>context =&gt; (TSourceType)context.Source</code>
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringHelper.BuildSourceStreamResolver(System.Reflection.MethodInfo,System.Type,GraphQL.Types.FieldType,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Constructs an event stream resolver for the specified method with the specified instance expression.
            Does not build accompanying query arguments for detected method parameters.
            Does not allow overriding build behavior.
            <br/><br/>
            An example of an instance expression would be as follows:
            <code>context =&gt; (TSourceType)context.Source</code>
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringHelper.BuildInstanceExpressionForSchemaBuilder(System.Type,System.IServiceProvider)">
            <summary>
            Builds the following instance expression:
            <code>context =&gt; context.Source as TSourceType ?? (context.RequestServices ?? serviceProvider).GetService(sourceType) ?? throw new InvalidOperationException(...)</code>
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringHelper.ApplyGraphQLAttributes``1(GraphQL.Types.IGraphType)">
            <summary>
            Scans a specific CLR type for <see cref="T:GraphQL.GraphQLAttribute"/> attributes and applies
            them to the specified <see cref="T:GraphQL.Types.IGraphType"/>.
            Also scans the CLR type's owning module and assembly for globally-applied attributes.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringHelper.ExcludeProperties``1(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Filters an enumeration of <see cref="T:System.Reflection.PropertyInfo"/> values to exclude specified properties.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringHelper.CreateField(System.Reflection.MemberInfo,System.Func{System.Reflection.MemberInfo,GraphQL.Types.TypeInformation},System.Action{GraphQL.Types.FieldType,System.Reflection.MemberInfo},System.Boolean)">
            <summary>
            Creates a <see cref="T:GraphQL.Types.FieldType"/> for the specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringHelper.CreateField(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Creates a <see cref="T:GraphQL.Types.FieldType"/> for the specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringHelper.ApplyFieldAttributes(System.Reflection.MemberInfo,GraphQL.Types.FieldType,System.Boolean)">
            <summary>
            Applies <see cref="T:GraphQL.GraphQLAttribute"/>s defined on <paramref name="memberInfo"/> to <paramref name="fieldType"/>.
            Also scans the member's owning module and assembly for globally-applied attributes.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringHelper.GetParameterExpression(System.Type,GraphQL.Types.QueryArgument)">
            <summary>
            Constructs a lambda expression for a field resolver to return the specified query argument
            from the resolve context. The returned lambda is similar to the following:
            <code>context =&gt; context.GetArgument&lt;T&gt;(queryArgument.Name, queryArgument.DefaultValue)</code>
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringHelper.GetArgumentInternal``1(GraphQL.IResolveFieldContext,GraphQL.Types.QueryArgument)">
            <summary>
            Returns the value for the specified query argument, or the default value of the query argument
            if a value was not specified in the request.
            <br/><br/>
            Unlike <see cref="M:GraphQL.ResolveFieldContextExtensions.GetArgument``1(GraphQL.IResolveFieldContext,System.String,``0)"/>,
            the default value is not returned if <see langword="null"/> was explicitly supplied within the query.
            The default value is only returned if no value was supplied to the query.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringHelper.ProvideFields(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.Func{System.Reflection.MemberInfo,GraphQL.Types.FieldType},System.Boolean)">
            <summary>
            Returns a list of <see cref="T:GraphQL.Types.FieldType"/> instances representing the fields ready to be
            added to the graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringHelper.GetTypeInformation(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Analyzes a member and returns an instance of <see cref="T:GraphQL.Types.TypeInformation"/>
            containing information necessary to select a graph type. Nullable reference annotations
            are read, if they exist, as well as the <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> attribute.
            Then any <see cref="T:GraphQL.GraphQLAttribute"/> attributes marked on the property are applied.
            <br/><br/>
            Override this method to enforce specific graph types for specific CLR types, or to implement custom
            attributes to change graph type selection behavior.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringHelper.GetTypeInformation(System.Reflection.ParameterInfo)">
            <summary>
            Analyzes a method argument and returns an instance of <see cref="T:GraphQL.Types.TypeInformation"/>
            containing information necessary to select a graph type. Nullable reference annotations
            are read, if they exist, as well as the <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> attribute.
            Then any <see cref="T:GraphQL.GraphQLAttribute"/> attributes marked on the property are applied.
            <br/><br/>
            Override this method to enforce specific graph types for specific CLR types, or to implement custom
            attributes to change graph type selection behavior.
            </summary>
        </member>
        <member name="T:GraphQL.Types.AutoRegisteringInputObjectGraphType`1">
            <summary>
            Allows you to automatically register the necessary fields for the specified input type.
            Supports <see cref="T:System.ComponentModel.DescriptionAttribute"/>, <see cref="T:System.ObsoleteAttribute"/>, <see cref="T:System.ComponentModel.DefaultValueAttribute"/> and <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/>.
            Also it can get descriptions for fields from the XML comments.
            Note that now __InputValue has no isDeprecated and deprecationReason fields but in the future they may appear - https://github.com/graphql/graphql-spec/pull/525
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringInputObjectGraphType`1.#ctor">
            <summary>
            Creates a GraphQL type from <typeparamref name="TSourceType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringInputObjectGraphType`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Creates a GraphQL type from <typeparamref name="TSourceType"/> by specifying fields to exclude from registration.
            </summary>
            <param name="excludedProperties">Expressions for excluding fields, for example 'o => o.Age'.</param>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringInputObjectGraphType`1.ConfigureGraph">
            <summary>
            Applies default configuration settings to this graph type along with any <see cref="T:GraphQL.GraphQLAttribute"/> attributes marked on <typeparamref name="TSourceType"/>.
            Allows the ability to override the default naming convention used by this class without affecting attributes applied directly to <typeparamref name="TSourceType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringInputObjectGraphType`1.ProvideFields">
            <inheritdoc cref="M:GraphQL.Types.AutoRegisteringHelper.ProvideFields(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.Func{System.Reflection.MemberInfo,GraphQL.Types.FieldType},System.Boolean)"/>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringInputObjectGraphType`1.CreateField(System.Reflection.MemberInfo)">
            <summary>
            Processes the specified property or field and returns a <see cref="T:GraphQL.Types.FieldType"/>.
            May return <see langword="null"/> to skip a property.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringInputObjectGraphType`1.GetRegisteredMembers">
            <summary>
            Returns a list of properties or fields that should have fields created for them.
            Unless overridden, returns a list of public instance writable properties,
            including properties on inherited classes.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringInputObjectGraphType`1.GetTypeInformation(System.Reflection.MemberInfo)">
            <inheritdoc cref="M:GraphQL.Types.AutoRegisteringHelper.GetTypeInformation(System.Reflection.MemberInfo,System.Boolean)"/>
            <remarks>
            Only properties and fields are supported.
            </remarks>
        </member>
        <member name="T:GraphQL.Types.AutoRegisteringInterfaceGraphType`1">
            <summary>
            Allows you to automatically register the necessary fields for the specified type.
            Supports <see cref="T:System.ComponentModel.DescriptionAttribute"/>, <see cref="T:System.ObsoleteAttribute"/>, <see cref="T:System.ComponentModel.DefaultValueAttribute"/> and <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/>.
            Also it can get descriptions for fields from the XML comments.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringInterfaceGraphType`1.#ctor">
            <summary>
            Creates a GraphQL type from <typeparamref name="TSourceType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringInterfaceGraphType`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Creates a GraphQL type from <typeparamref name="TSourceType"/> by specifying fields to exclude from registration.
            </summary>
            <param name="excludedProperties">Expressions for excluding fields, for example 'o => o.Age'.</param>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringInterfaceGraphType`1.ConfigureGraph">
            <inheritdoc cref="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.ConfigureGraph"/>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringInterfaceGraphType`1.ProvideFields">
            <inheritdoc cref="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.ProvideFields"/>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringInterfaceGraphType`1.CreateField(System.Reflection.MemberInfo)">
            <inheritdoc cref="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.CreateField(System.Reflection.MemberInfo)"/>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringInterfaceGraphType`1.BuildFieldType(GraphQL.Types.FieldType,System.Reflection.MemberInfo)">
            <inheritdoc cref="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.BuildFieldType(GraphQL.Types.FieldType,System.Reflection.MemberInfo)"/>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringInterfaceGraphType`1.BuildMemberInstanceExpression(System.Reflection.MemberInfo)">
            <inheritdoc cref="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.BuildMemberInstanceExpression(System.Reflection.MemberInfo)"/>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringInterfaceGraphType`1.ApplyArgumentAttributes(System.Reflection.ParameterInfo,GraphQL.Types.QueryArgument)">
            <inheritdoc cref="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.ApplyArgumentAttributes(System.Reflection.ParameterInfo,GraphQL.Types.QueryArgument)"/>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringInterfaceGraphType`1.GetArgumentInformation``1(GraphQL.Types.FieldType,System.Reflection.ParameterInfo)">
            <inheritdoc cref="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.GetArgumentInformation``1(GraphQL.Types.FieldType,System.Reflection.ParameterInfo)"/>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringInterfaceGraphType`1.GetRegisteredMembers">
            <inheritdoc cref="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.GetRegisteredMembers"/>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringInterfaceGraphType`1.GetTypeInformation(System.Reflection.MemberInfo)">
            <inheritdoc cref="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.GetTypeInformation(System.Reflection.MemberInfo)"/>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringInterfaceGraphType`1.GetTypeInformation(System.Reflection.ParameterInfo)">
            <inheritdoc cref="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.GetTypeInformation(System.Reflection.ParameterInfo)"/>
        </member>
        <member name="T:GraphQL.Types.AutoRegisteringObjectGraphType`1">
            <summary>
            Allows you to automatically register the necessary fields for the specified type.
            Supports <see cref="T:System.ComponentModel.DescriptionAttribute"/>, <see cref="T:System.ObsoleteAttribute"/>, <see cref="T:System.ComponentModel.DefaultValueAttribute"/> and <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/>.
            Also it can get descriptions for fields from the XML comments.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.#ctor">
            <summary>
            Creates a GraphQL type from <typeparamref name="TSourceType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Creates a GraphQL type from <typeparamref name="TSourceType"/> by specifying fields to exclude from registration.
            </summary>
            <param name="excludedProperties">Expressions for excluding fields, for example 'o => o.Age'.</param>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.ConfigureGraph">
            <summary>
            Applies default configuration settings to this graph type along with any <see cref="T:GraphQL.GraphQLAttribute"/> attributes marked on <typeparamref name="TSourceType"/>.
            Allows the ability to override the default naming convention used by this class without affecting attributes applied directly to <typeparamref name="TSourceType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.ProvideFields">
            <inheritdoc cref="M:GraphQL.Types.AutoRegisteringHelper.ProvideFields(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.Func{System.Reflection.MemberInfo,GraphQL.Types.FieldType},System.Boolean)"/>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.CreateField(System.Reflection.MemberInfo)">
            <summary>
            Processes the specified member and returns a <see cref="T:GraphQL.Types.FieldType"/>.
            May return <see langword="null"/> to skip a member.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.BuildFieldType(GraphQL.Types.FieldType,System.Reflection.MemberInfo)">
            <inheritdoc cref="M:GraphQL.Types.AutoRegisteringOutputHelper.BuildFieldType(System.Reflection.MemberInfo,GraphQL.Types.FieldType,System.Func{System.Reflection.MemberInfo,System.Linq.Expressions.LambdaExpression},System.Func{System.Type,System.Func{GraphQL.Types.FieldType,System.Reflection.ParameterInfo,GraphQL.Types.ArgumentInformation}},System.Action{System.Reflection.ParameterInfo,GraphQL.Types.QueryArgument})"/>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.BuildMemberInstanceExpression(System.Reflection.MemberInfo)">
            <summary>
            Returns a lambda expression that will be used by the field resolver to access the member.
            <br/><br/>
            Typically this is a lambda expression of type <see cref="T:System.Func`2">Func</see>&lt;<see cref="T:GraphQL.IResolveFieldContext"/>, <typeparamref name="TSourceType"/>&gt;.
            <br/><br/>
            By default this returns the <see cref="P:GraphQL.IResolveFieldContext.Source"/> property.
            </summary>
            <param name="memberInfo">The member being called or accessed.</param>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.ApplyArgumentAttributes(System.Reflection.ParameterInfo,GraphQL.Types.QueryArgument)">
            <inheritdoc cref="M:GraphQL.Types.AutoRegisteringOutputHelper.ApplyArgumentAttributes(System.Reflection.ParameterInfo,GraphQL.Types.QueryArgument)"/>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.GetArgumentInformation``1(GraphQL.Types.FieldType,System.Reflection.ParameterInfo)">
            <inheritdoc cref="M:GraphQL.Types.AutoRegisteringOutputHelper.GetArgumentInformation``1(GraphQL.Types.TypeInformation,GraphQL.Types.FieldType,System.Reflection.ParameterInfo)"/>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.GetRegisteredMembers">
            <inheritdoc cref="M:GraphQL.Types.AutoRegisteringOutputHelper.GetRegisteredMembers``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])"/>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.GetTypeInformation(System.Reflection.MemberInfo)">
            <inheritdoc cref="M:GraphQL.Types.AutoRegisteringHelper.GetTypeInformation(System.Reflection.MemberInfo,System.Boolean)"/>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.GetTypeInformation(System.Reflection.ParameterInfo)">
            <inheritdoc cref="M:GraphQL.Types.AutoRegisteringHelper.GetTypeInformation(System.Reflection.ParameterInfo)"/>
        </member>
        <member name="T:GraphQL.Types.AutoRegisteringOutputHelper">
            <summary>
            Helper methods for <see cref="T:GraphQL.Types.AutoRegisteringObjectGraphType`1"/> and <see cref="T:GraphQL.Types.AutoRegisteringInterfaceGraphType`1"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringOutputHelper.BuildFieldType(System.Reflection.MemberInfo,GraphQL.Types.FieldType,System.Func{System.Reflection.MemberInfo,System.Linq.Expressions.LambdaExpression},System.Func{System.Type,System.Func{GraphQL.Types.FieldType,System.Reflection.ParameterInfo,GraphQL.Types.ArgumentInformation}},System.Action{System.Reflection.ParameterInfo,GraphQL.Types.QueryArgument})">
            <summary>
            Configures query arguments and a field resolver for the specified <see cref="T:GraphQL.Types.FieldType"/>, overwriting
            any existing configuration within <see cref="P:GraphQL.Types.FieldType.Arguments"/>, <see cref="P:GraphQL.Types.FieldType.Resolver"/>
            and <see cref="P:GraphQL.Types.FieldType.StreamResolver"/>.
            <br/><br/>
            For fields and properties, no query arguments are added and the field resolver simply pulls the appropriate
            member from <see cref="P:GraphQL.IResolveFieldContext.Source"/>.
            <br/><br/>
            For methods, method arguments are iterated and processed by
            <see cref="M:GraphQL.Types.AutoRegisteringObjectGraphType`1.GetArgumentInformation``1(GraphQL.Types.FieldType,System.Reflection.ParameterInfo)">GetArgumentInformation</see>, building
            a list of query arguments and expressions as necessary. Then a field resolver is built around the method.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringOutputHelper.IsObservableOrAsyncEnumerable(System.Type)">
            <summary>
            Determines if the type is an <see cref="T:System.IObservable`1"/> or task that returns an <see cref="T:System.IObservable`1"/>.
            Also checks for <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> and task that returns an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringOutputHelper.GetRegisteredMembers``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Returns a list of properties, methods or fields that should have fields created for them.
            <br/><br/>
            Unless overridden, returns a list of public instance readable properties and public instance methods
            that do not return <see langword="void"/> or <see cref="T:System.Threading.Tasks.Task"/>
            including properties and methods declared on inherited classes.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringOutputHelper.GetArgumentInformation``1(GraphQL.Types.TypeInformation,GraphQL.Types.FieldType,System.Reflection.ParameterInfo)">
            <summary>
            Analyzes a method parameter and returns an instance of <see cref="T:GraphQL.Types.ArgumentInformation"/>
            containing information necessary to build a <see cref="T:GraphQL.Types.QueryArgument"/> and <see cref="T:GraphQL.Resolvers.IFieldResolver"/>.
            Also applies any <see cref="T:GraphQL.GraphQLAttribute"/> attributes defined on the <see cref="T:System.Reflection.ParameterInfo"/>
            to the returned <see cref="T:GraphQL.Types.ArgumentInformation"/> instance.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AutoRegisteringOutputHelper.ApplyArgumentAttributes(System.Reflection.ParameterInfo,GraphQL.Types.QueryArgument)">
            <summary>
            Applies <see cref="T:GraphQL.GraphQLAttribute"/> attributes defined on the supplied <see cref="T:System.Reflection.ParameterInfo"/>
            to the specified <see cref="T:GraphQL.Types.QueryArgument"/>.
            Also scans the parameter's owning module and assembly for globally-applied attributes.
            </summary>
        </member>
        <member name="T:GraphQL.Types.ComplexGraphType`1">
            <summary>
            Represents a default base class for all complex (that is, having their own properties) input and output graph types.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.#ctor">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.ComplexGraphType`1.Fields">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.HasField(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.GetField(GraphQLParser.ROM)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.AddField(GraphQL.Types.FieldType)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.CreateBuilder``1(System.Type)">
            <summary>
            Creates a field builder used by Field() methods.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.CreateBuilder``1(GraphQL.Types.IGraphType)">
            <summary>
            Creates a field builder used by Field() methods.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Field(System.Type,System.String,System.String,GraphQL.Types.QueryArguments,System.Func{GraphQL.IResolveFieldContext{`0},System.Object},System.String)">
            <summary>
            Adds a field with the specified properties to this graph type.
            </summary>
            <param name="type">The .NET type of the graph type of this field.</param>
            <param name="name">The name of the field.</param>
            <param name="description">The description of the field.</param>
            <param name="arguments">A list of arguments for the field.</param>
            <param name="resolve">A field resolver delegate. Only applicable to fields of output graph types. If not specified, <see cref="T:GraphQL.Resolvers.NameFieldResolver"/> will be used.</param>
            <param name="deprecationReason">The deprecation reason for the field. Applicable only for output graph types.</param>
            <returns>The newly added <see cref="T:GraphQL.Types.FieldType"/> instance.</returns>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Field``1(System.String,System.String,GraphQL.Types.QueryArguments,System.Func{GraphQL.IResolveFieldContext{`0},System.Object},System.String)">
            <summary>
            Adds a field with the specified properties to this graph type.
            </summary>
            <typeparam name="TGraphType">The .NET type of the graph type of this field.</typeparam>
            <param name="name">The name of the field.</param>
            <param name="description">The description of the field.</param>
            <param name="arguments">A list of arguments for the field.</param>
            <param name="resolve">A field resolver delegate. Only applicable to fields of output graph types. If not specified, <see cref="T:GraphQL.Resolvers.NameFieldResolver"/> will be used.</param>
            <param name="deprecationReason">The deprecation reason for the field. Applicable only for output graph types.</param>
            <returns>The newly added <see cref="T:GraphQL.Types.FieldType"/> instance.</returns>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.FieldDelegate``1(System.String,System.String,GraphQL.Types.QueryArguments,System.Delegate,System.String)">
            <summary>
            Adds a field with the specified properties to this graph type.
            </summary>
            <typeparam name="TGraphType">The .NET type of the graph type of this field.</typeparam>
            <param name="name">The name of the field.</param>
            <param name="description">The description of the field.</param>
            <param name="arguments">A list of arguments for the field.</param>
            <param name="resolve">A field resolver delegate. Only applicable to fields of output graph types. If not specified, <see cref="T:GraphQL.Resolvers.NameFieldResolver"/> will be used.</param>
            <param name="deprecationReason">The deprecation reason for the field. Applicable only for output graph types.</param>
            <returns>The newly added <see cref="T:GraphQL.Types.FieldType"/> instance.</returns>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.FieldAsync(System.Type,System.String,System.String,GraphQL.Types.QueryArguments,System.Func{GraphQL.IResolveFieldContext{`0},System.Threading.Tasks.Task{System.Object}},System.String)">
            <summary>
            Adds a field with the specified properties to this graph type.
            </summary>
            <param name="type">The .NET type of the graph type of this field.</param>
            <param name="name">The name of the field.</param>
            <param name="description">The description of the field.</param>
            <param name="arguments">A list of arguments for the field.</param>
            <param name="resolve">A field resolver delegate. Only applicable to fields of output graph types. If not specified, <see cref="T:GraphQL.Resolvers.NameFieldResolver"/> will be used.</param>
            <param name="deprecationReason">The deprecation reason for the field. Applicable only for output graph types.</param>
            <returns>The newly added <see cref="T:GraphQL.Types.FieldType"/> instance.</returns>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.FieldAsync``1(System.String,System.String,GraphQL.Types.QueryArguments,System.Func{GraphQL.IResolveFieldContext{`0},System.Threading.Tasks.Task{System.Object}},System.String)">
            <summary>
            Adds a field with the specified properties to this graph type.
            </summary>
            <typeparam name="TGraphType">The .NET type of the graph type of this field.</typeparam>
            <param name="name">The name of the field.</param>
            <param name="description">The description of the field.</param>
            <param name="arguments">A list of arguments for the field.</param>
            <param name="resolve">A field resolver delegate. Only applicable to fields of output graph types. If not specified, <see cref="T:GraphQL.Resolvers.NameFieldResolver"/> will be used.</param>
            <param name="deprecationReason">The deprecation reason for the field. Applicable only for output graph types.</param>
            <returns>The newly added <see cref="T:GraphQL.Types.FieldType"/> instance.</returns>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.FieldAsync``2(System.String,System.String,GraphQL.Types.QueryArguments,System.Func{GraphQL.IResolveFieldContext{`0},System.Threading.Tasks.Task{``1}},System.String)">
            <summary>
            Adds a field with the specified properties to this graph type.
            </summary>
            <typeparam name="TGraphType">The .NET type of the graph type of this field.</typeparam>
            <typeparam name="TReturnType">The type of the return value of the field resolver delegate.</typeparam>
            <param name="name">The name of the field.</param>
            <param name="description">The description of the field.</param>
            <param name="arguments">A list of arguments for the field.</param>
            <param name="resolve">A field resolver delegate. Only applicable to fields of output graph types. If not specified, <see cref="T:GraphQL.Resolvers.NameFieldResolver"/> will be used.</param>
            <param name="deprecationReason">The deprecation reason for the field. Applicable only for output graph types.</param>
            <returns>The newly added <see cref="T:GraphQL.Types.FieldType"/> instance.</returns>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.FieldSubscribe``1(System.String,System.String,GraphQL.Types.QueryArguments,System.Func{GraphQL.IResolveFieldContext{`0},System.Object},System.Func{GraphQL.IResolveFieldContext,System.IObservable{System.Object}},System.String)">
            <summary>
            Adds a subscription field with the specified properties to this graph type.
            </summary>
            <typeparam name="TGraphType">The .NET type of the graph type of this field.</typeparam>
            <param name="name">The name of the field.</param>
            <param name="description">The description of this field.</param>
            <param name="arguments">A list of arguments for the field.</param>
            <param name="resolve">A field resolver delegate. Data from an event stream is processed by this field resolver as the source before being passed to the field's children as the source. Typically this would be <c>context => context.Source</c>.</param>
            <param name="subscribe">A source stream resolver delegate.</param>
            <param name="deprecationReason">The deprecation reason for the field.</param>
            <returns>The newly added <see cref="T:GraphQL.Types.FieldType"/> instance.</returns>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.FieldSubscribeAsync``1(System.String,System.String,GraphQL.Types.QueryArguments,System.Func{GraphQL.IResolveFieldContext{`0},System.Object},System.Func{GraphQL.IResolveFieldContext,System.Threading.Tasks.Task{System.IObservable{System.Object}}},System.String)">
            <summary>
            Adds a subscription field with the specified properties to this graph type.
            </summary>
            <typeparam name="TGraphType">The .NET type of the graph type of this field.</typeparam>
            <param name="name">The name of the field.</param>
            <param name="description">The description of this field.</param>
            <param name="arguments">A list of arguments for the field.</param>
            <param name="resolve">A field resolver delegate. Data from an event stream is processed by this field resolver as the source before being passed to the field's children as the source. Typically this would be <c>context => context.Source</c>.</param>
            <param name="subscribeAsync">A source stream resolver delegate.</param>
            <param name="deprecationReason">The deprecation reason for the field.</param>
            <returns>The newly added <see cref="T:GraphQL.Types.FieldType"/> instance.</returns>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Field``2(System.String)">
            <summary>
            Adds a new field to the complex graph type and returns a builder for this newly added field.
            </summary>
            <typeparam name="TGraphType">The .NET type of the graph type of this field.</typeparam>
            <typeparam name="TReturnType">The return type of the field resolver.</typeparam>
            <param name="name">The name of the field.</param>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Field``2">
            <inheritdoc cref="M:GraphQL.Types.ComplexGraphType`1.Field``2(System.String)"/>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Field``1">
            <inheritdoc cref="M:GraphQL.Types.ComplexGraphType`1.Field``1(System.String)"/>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Field``1(System.String)">
            <summary>
            Adds a new field to the complex graph type and returns a builder for this newly added field.
            </summary>
            <typeparam name="TGraphType">The .NET type of the graph type of this field.</typeparam>
            <param name="name">The name of the field.</param>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Field``1(System.String,System.Boolean)">
            <summary>
            Adds a new field to the complex graph type and returns a builder for this newly added field.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Field(System.String,System.Type)">
            <summary>
            Adds a new field to the complex graph type and returns a builder for this newly added field.
            </summary>
            <param name="type">The .NET type of the graph type of this field.</param>
            <param name="name">The name of the field.</param>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Field(System.String,GraphQL.Types.IGraphType)">
            <summary>
            Adds a new field to the complex graph type and returns a builder for this newly added field.
            </summary>
            <param name="type">The graph type of this field.</param>
            <param name="name">The name of the field.</param>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Field``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Type)">
            <summary>
            Adds a new field to the complex graph type and returns a builder for this newly added field that is linked to a property of the source object.
            <br/><br/>
            Note: this method uses dynamic compilation and therefore allocates a relatively large amount of
            memory in managed heap, ~1KB. Do not use this method in cases with limited memory requirements.
            </summary>
            <typeparam name="TProperty">The return type of the field.</typeparam>
            <param name="name">The name of this field.</param>
            <param name="expression">The property of the source object represented within an expression.</param>
            <param name="nullable">Indicates if this field should be nullable or not. Ignored when <paramref name="type"/> is specified.</param>
            <param name="type">The graph type of the field; if <see langword="null"/> then will be inferred from the specified expression via registered schema mappings.</param>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Field``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.Type)">
            <summary>
            Adds a new field to the complex graph type and returns a builder for this newly added field that is linked to a property of the source object.
            The default name of this field is inferred by the property represented within the expression.
            <br/><br/>
            Note: this method uses dynamic compilation and therefore allocates a relatively large amount of
            memory in managed heap, ~1KB. Do not use this method in cases with limited memory requirements.
            </summary>
            <typeparam name="TProperty">The return type of the field.</typeparam>
            <param name="expression">The property of the source object represented within an expression.</param>
            <param name="nullable">Indicates if this field should be nullable or not. Ignored when <paramref name="type"/> is specified.</param>
            <param name="type">The graph type of the field; if <see langword="null"/> then will be inferred from the specified expression via registered schema mappings.</param>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Connection``1">
            <inheritdoc cref="M:GraphQL.Builders.ConnectionBuilder`1.Create``1(System.String)"/>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Connection``2">
            <inheritdoc cref="M:GraphQL.Builders.ConnectionBuilder`1.Create``2(System.String)"/>
        </member>
        <member name="M:GraphQL.Types.ComplexGraphType`1.Connection``3">
            <inheritdoc cref="M:GraphQL.Builders.ConnectionBuilder`1.Create``3(System.String)"/>
        </member>
        <member name="T:GraphQL.Types.IAbstractGraphType">
            <summary>
            An interface for such graph types that do not represent concrete graph types, that is, for interfaces and unions.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IAbstractGraphType.ResolveType">
            <summary>
            Gets or sets a delegate that can be used to determine the proper graph type for the specified object value. See
            <see cref="M:GraphQL.Types.AbstractGraphTypeExtensions.GetObjectType(GraphQL.Types.IAbstractGraphType,System.Object,GraphQL.Types.ISchema)"/> for more details.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IAbstractGraphType.PossibleTypes">
            <summary>
            Returns a set of possible types for this abstract graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IAbstractGraphType.AddPossibleType(GraphQL.Types.IObjectGraphType)">
            <summary>
            Adds the specified graph type to a list of possible graph types for this abstract graph type.
            </summary>
        </member>
        <member name="T:GraphQL.Types.AbstractGraphTypeExtensions">
            <summary>
            Provides extension methods for <see cref="T:GraphQL.Types.IAbstractGraphType"/> instances.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AbstractGraphTypeExtensions.IsPossibleType(GraphQL.Types.IAbstractGraphType,GraphQL.Types.IGraphType)">
            <summary>
            Returns true if the specified graph type is one of the possible graph types for this abstract graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AbstractGraphTypeExtensions.GetObjectType(GraphQL.Types.IAbstractGraphType,System.Object,GraphQL.Types.ISchema)">
            <summary>
            Returns the proper graph type for the specified object for this abstract graph type. If the abstract
            graph type implements <see cref="P:GraphQL.Types.IAbstractGraphType.ResolveType"/>, then this method is called to determine
            the best graph type to use. Otherwise, <see cref="P:GraphQL.Types.IObjectGraphType.IsTypeOf"/> is called on each possible
            graph type supported by the abstract graph type to determine if a match can be found.
            </summary>
        </member>
        <member name="T:GraphQL.Types.IComplexGraphType">
            <summary>
            Represents an interface for all complex (that is, having their own properties) input and output graph types.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IComplexGraphType.Fields">
            <summary>
            Returns a list of the fields configured for this graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IComplexGraphType.AddField(GraphQL.Types.FieldType)">
            <summary>
            Adds a field to this graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IComplexGraphType.HasField(System.String)">
            <summary>
            Returns <see langword="true"/> when a field matching the specified name is configured for this graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IComplexGraphType.GetField(GraphQLParser.ROM)">
            <summary>
            Returns the <see cref="T:GraphQL.Types.FieldType"/> for the field matching the specified name that
            is configured for this graph type, or <see langword="null"/> if none is found.
            </summary>
        </member>
        <member name="T:GraphQL.Types.IInputObjectGraphType">
            <summary>
            Represents an input object graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IInputObjectGraphType.ParseDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Converts a supplied dictionary of keys and values to an object.
            Overriding this method allows for customizing the deserialization process of input objects,
            much like a field resolver does for output objects. For example, you can set some 'computed'
            properties for your input object which were not passed in the GraphQL request.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IInputObjectGraphType.IsValidDefault(System.Object)">
            <summary>
            Returns a boolean indicating if the provided value is valid as a default value for a
            field or argument of this type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IInputObjectGraphType.ToAST(System.Object)">
            <summary>
            Converts a value to an AST representation. This is necessary for introspection queries
            to return the default value for fields of this scalar type. This method may throw an exception
            or return <see langword="null"/> for a failed conversion.
            </summary>
        </member>
        <member name="T:GraphQL.Types.InputObjectGraphType">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.InputObjectGraphType`1">
            <inheritdoc cref="T:GraphQL.Types.IInputObjectGraphType"/>
        </member>
        <member name="M:GraphQL.Types.InputObjectGraphType`1.ParseDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Converts a supplied dictionary of keys and values to an object.
            The default implementation uses <see cref="M:GraphQL.ObjectExtensions.ToObject(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,GraphQL.Types.IGraphType)"/> to convert the
            supplied field values into an object of type <typeparamref name="TSourceType"/>.
            Overriding this method allows for customizing the deserialization process of input objects,
            much like a field resolver does for output objects. For example, you can set some 'computed'
            properties for your input object which were not passed in the GraphQL request.
            </summary>
        </member>
        <member name="M:GraphQL.Types.InputObjectGraphType`1.IsValidDefault(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.InputObjectGraphType`1.ToAST(System.Object)">
            <summary>
            Converts a value to an AST representation. This is necessary for introspection queries
            to return the default value for fields of this input object type. Also AST representation
            is used while printing schema as SDL.
            <br/>
            This method may throw an exception or return <see langword="null"/> for a failed conversion.
            <br/><br/>
            The default implementation returns <see cref="T:GraphQLParser.AST.GraphQLNullValue"/> if <paramref name="value"/>
            is <see langword="null"/> and <see cref="T:GraphQLParser.AST.GraphQLObjectValue"/> filled with the values
            for all input fields except ones returning <see cref="T:GraphQLParser.AST.GraphQLNullValue"/>.
            <br/><br/>
            Note that you may need to override this method if you have already overrided <see cref="M:GraphQL.Types.InputObjectGraphType`1.ParseDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})"/>.
            </summary>
        </member>
        <member name="T:GraphQL.Types.IInterfaceGraphType">
            <summary>
            Represents a GraphQL interface graph type.
            </summary>
        </member>
        <member name="T:GraphQL.Types.InterfaceGraphType`1">
            <inheritdoc cref="T:GraphQL.Types.InterfaceGraphType"/>
        </member>
        <member name="P:GraphQL.Types.InterfaceGraphType`1.PossibleTypes">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.InterfaceGraphType`1.ResolveType">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.InterfaceGraphType`1.AddPossibleType(GraphQL.Types.IObjectGraphType)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.InterfaceGraphType">
            <inheritdoc cref="T:GraphQL.Types.IInterfaceGraphType"/>
        </member>
        <member name="T:GraphQL.Types.ListGraphType">
            <summary>
            Represents a list of objects. A GraphQL schema may describe that a field represents a list of another type.
            The List type is provided for this reason, and wraps another type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ListGraphType.#ctor(GraphQL.Types.IGraphType)">
            <summary>
            Initializes a new instance for the specified inner graph type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ListGraphType.Type">
            <summary>
            Returns the .NET type of the inner (wrapped) graph type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ListGraphType.ResolvedType">
            <summary>
            Gets or sets the instance of the inner (wrapped) graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ListGraphType.ToString">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.ListGraphType`1">
            <inheritdoc cref="T:GraphQL.Types.ListGraphType"/>
        </member>
        <member name="M:GraphQL.Types.ListGraphType`1.#ctor">
            <summary>
            Initializes a new instance for the specified inner graph type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ListGraphType`1.Type">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.NonNullGraphType">
            <summary>
            Represents a graph type that, for output graphs, is never <see langword="null"/>, or for input graphs, is not optional.
            In other words the NonNull type wraps another type, and denotes that the resulting value will never be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.NonNullGraphType.#ctor(GraphQL.Types.IGraphType)">
            <summary>
            Initializes a new instance for the specified inner graph type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.NonNullGraphType.Type">
            <summary>
            Returns the .NET type of the inner (wrapped) graph type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.NonNullGraphType.ResolvedType">
            <summary>
            Gets or sets the instance of the inner (wrapped) graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.NonNullGraphType.ToString">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.NonNullGraphType`1">
            <inheritdoc cref="T:GraphQL.Types.NonNullGraphType"/>
        </member>
        <member name="M:GraphQL.Types.NonNullGraphType`1.#ctor">
            <summary>
            Initializes a new instance for the specified inner graph type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.NonNullGraphType`1.Type">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.IObjectGraphType">
            <summary>
            Represents an interface for all object (that is, having their own properties) output graph types.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IObjectGraphType.IsTypeOf">
            <summary>
            Gets or sets a delegate that determines if the specified object is valid for this graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IObjectGraphType.AddResolvedInterface(GraphQL.Types.IInterfaceGraphType)">
            <summary>
            Adds an instance of <see cref="T:GraphQL.Types.IInterfaceGraphType"/> to the list of interface instances supported by this object graph type.
            </summary>
        </member>
        <member name="T:GraphQL.Types.ObjectGraphType`1">
            <summary>
            Represents a default base class for all object (that is, having their own properties) output graph types.
            </summary>
            <typeparam name="TSourceType">Typically the type of the object that this graph represents. More specifically, the .NET type of the source property within field resolvers for this graph.</typeparam>
        </member>
        <member name="P:GraphQL.Types.ObjectGraphType`1.IsTypeOf">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ObjectGraphType`1.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ObjectGraphType`1.AddResolvedInterface(GraphQL.Types.IInterfaceGraphType)">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.ObjectGraphType`1.Interfaces">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.ObjectGraphType`1.ResolvedInterfaces">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ObjectGraphType`1.Interface``1">
            <summary>
            Adds a GraphQL interface graph type to the list of GraphQL interfaces implemented by this graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ObjectGraphType`1.Interface(System.Type)">
            <summary>
            Adds a GraphQL interface graph type to the list of GraphQL interfaces implemented by this graph type.
            </summary>
        </member>
        <member name="T:GraphQL.Types.ObjectGraphType">
            <summary>
            Represents a default base class for all object (that is, having their own properties) output graph types.
            </summary>
        </member>
        <member name="T:GraphQL.Types.ObjectGraphTypeExtensions">
            <summary>
            Provides methods to add fields to output graph types.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ObjectGraphTypeExtensions.Field(GraphQL.Types.IObjectGraphType,System.String,GraphQL.Types.IGraphType,System.String,GraphQL.Types.QueryArguments,System.Func{GraphQL.IResolveFieldContext,System.Object})">
            <summary>
            Adds a field with the specified properties to a specified output graph type.
            </summary>
            <param name="obj">The graph type to add a field to.</param>
            <param name="name">The name of the field.</param>
            <param name="type">The graph type of this field.</param>
            <param name="description">The description of the field.</param>
            <param name="arguments">A list of arguments for the field.</param>
            <param name="resolve">A field resolver delegate. If not specified, <see cref="T:GraphQL.Resolvers.NameFieldResolver"/> will be used.</param>
        </member>
        <member name="M:GraphQL.Types.ObjectGraphTypeExtensions.FieldAsync(GraphQL.Types.IObjectGraphType,System.String,GraphQL.Types.IGraphType,System.String,GraphQL.Types.QueryArguments,System.Func{GraphQL.IResolveFieldContext,System.Threading.Tasks.Task{System.Object}})">
            <summary>
            Adds a field with the specified properties to a specified output graph type.
            </summary>
            <param name="obj">The graph type to add a field to.</param>
            <param name="name">The name of the field.</param>
            <param name="type">The graph type of this field.</param>
            <param name="description">The description of the field.</param>
            <param name="arguments">A list of arguments for the field.</param>
            <param name="resolve">A field resolver delegate. If not specified, <see cref="T:GraphQL.Resolvers.NameFieldResolver"/> will be used.</param>
        </member>
        <member name="T:GraphQL.Types.UnionGraphType">
            <summary>
            Represents a GraphQL union graph type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.UnionGraphType.PossibleTypes">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.UnionGraphType.ResolveType">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.UnionGraphType.AddPossibleType(GraphQL.Types.IObjectGraphType)">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.UnionGraphType.Types">
            <summary>
            Gets or sets a list of graph types that this union represents.
            </summary>
        </member>
        <member name="M:GraphQL.Types.UnionGraphType.Type``1">
            <summary>
            Adds a graph type to the list of graph types that this union represents.
            </summary>
        </member>
        <member name="M:GraphQL.Types.UnionGraphType.Type(System.Type)">
            <inheritdoc cref="M:GraphQL.Types.UnionGraphType.Type``1"/>
        </member>
        <member name="T:GraphQL.Types.AppliedDirective">
            <summary>
            Represents a directive applied to a schema element - type, field, argument, etc.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AppliedDirective.#ctor(System.String)">
            <summary>
            Creates directive.
            </summary>
            <param name="name">Directive name.</param>
        </member>
        <member name="P:GraphQL.Types.AppliedDirective.Name">
            <summary>
            Directive name.
            </summary>
        </member>
        <member name="P:GraphQL.Types.AppliedDirective.ArgumentsCount">
            <summary>
            Returns the number of directive arguments.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AppliedDirective.AddArgument(GraphQL.Types.DirectiveArgument)">
            <summary>
            Adds an argument to the directive.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AppliedDirective.FindArgument(System.String)">
            <summary>
            Searches the directive arguments for an argument specified by its name and returns it.
            </summary>
            <param name="argumentName">Argument name.</param>
        </member>
        <member name="M:GraphQL.Types.AppliedDirective.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="T:GraphQL.Types.DeprecatedDirective">
            <summary>
            Used to declare element of a GraphQL schema as deprecated.
            </summary>
        </member>
        <member name="P:GraphQL.Types.DeprecatedDirective.Introspectable">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.DeprecatedDirective.#ctor">
            <summary>
            Initializes a new instance of the 'deprecated' directive.
            </summary>
        </member>
        <member name="T:GraphQL.Types.IncludeDirective">
            <summary>
            Used to conditionally include fields or fragments.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IncludeDirective.#ctor">
            <summary>
            Initializes a new instance of the 'include' directive.
            </summary>
        </member>
        <member name="T:GraphQL.Types.SkipDirective">
            <summary>
            Used to conditionally skip (exclude) fields or fragments.
            </summary>
        </member>
        <member name="M:GraphQL.Types.SkipDirective.#ctor">
            <summary>
            Initializes a new instance of the 'skip' directive.
            </summary>
        </member>
        <member name="T:GraphQL.Types.LengthDirective">
            <summary>
            Used to specify the minimum and/or maximum length for an input field or argument.
            <br/><br/>
            When applied to argument or input field, this directive itself does not check anything. It only
            declares the necessary requirements and these requirements will be visible in introspection if
            <see cref="P:GraphQL.ExperimentalFeatures.AppliedDirectives">ExperimentalFeatures.AppliedDirectives</see>
            feature is enabled on schema. Use <see cref="T:GraphQL.Validation.Rules.InputFieldsAndArgumentsOfCorrectLength"/> validation
            rule if you want to enable checking for the length of arguments and input fields.
            </summary>
        </member>
        <member name="P:GraphQL.Types.LengthDirective.Introspectable">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.LengthDirective.#ctor">
            <summary>
            Initializes a new instance of the 'length' directive.
            </summary>
        </member>
        <member name="M:GraphQL.Types.LengthDirective.Validate(GraphQL.Types.AppliedDirective)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.Directive">
            <summary>
            Directives are used by the GraphQL runtime as a way of modifying execution
            behavior. Type system creators will usually not create these directly.
            </summary>
        </member>
        <member name="M:GraphQL.Types.Directive.#ctor(System.String)">
            <summary>
            Initializes a new instance with the specified name.
            </summary>
            <param name="name">The directive name within the GraphQL schema.</param>
        </member>
        <member name="M:GraphQL.Types.Directive.#ctor(System.String,System.Collections.Generic.IEnumerable{GraphQLParser.AST.DirectiveLocation})">
            <summary>
            Initializes a new instance with the specified parameters.
            </summary>
            <param name="name">The directive name within the GraphQL schema.</param>
            <param name="locations">A list of locations where the directive can be applied.</param>
        </member>
        <member name="M:GraphQL.Types.Directive.#ctor(System.String,GraphQLParser.AST.DirectiveLocation[])">
            <summary>
            Initializes a new instance with the specified parameters.
            </summary>
            <param name="name">The directive name within the GraphQL schema.</param>
            <param name="locations">A list of locations where the directive can be applied.</param>
        </member>
        <member name="P:GraphQL.Types.Directive.Name">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Directive.ToString">
            <inheritdoc />
        </member>
        <member name="P:GraphQL.Types.Directive.Description">
            <summary>
            Gets or sets the description of the directive.
            </summary>
        </member>
        <member name="P:GraphQL.Types.Directive.Introspectable">
            <summary>
            Indicates whether the directive and its usages for schema elements should return in response
            to an introspection request. By default (null) if the directive has all its locations of
            type ExecutableDirectiveLocation, only then it will be present in the introspection response.
            </summary>
        </member>
        <member name="P:GraphQL.Types.Directive.Repeatable">
            <summary>
            Indicates if the directive may be used repeatedly at a single location.
            <br/><br/>
            Repeatable directives are often useful when the same directive
            should be used with different arguments at a single location,
            especially in cases where additional information needs to be
            provided to a type or schema extension via a directive
            </summary>
        </member>
        <member name="P:GraphQL.Types.Directive.Arguments">
            <summary>
            Gets or sets a list of arguments for the directive.
            </summary>
        </member>
        <member name="P:GraphQL.Types.Directive.Locations">
            <summary>
            Returns a list of locations where the directive can be applied.
            </summary>
        </member>
        <member name="M:GraphQL.Types.Directive.Validate(GraphQL.Types.AppliedDirective)">
            <summary>
            Validates given <paramref name="applied"/> directive against this directive graph type.
            </summary>
        </member>
        <member name="T:GraphQL.Types.DirectiveArgument">
            <summary>
            Represents an argument of a directive applied to a schema element - type, field, argument, etc.
            </summary>
        </member>
        <member name="M:GraphQL.Types.DirectiveArgument.#ctor(System.String)">
            <summary>
            Creates argument.
            </summary>
            <param name="name">Argument name.</param>
        </member>
        <member name="P:GraphQL.Types.DirectiveArgument.Name">
            <summary>
            Argument name.
            </summary>
        </member>
        <member name="P:GraphQL.Types.DirectiveArgument.Value">
            <summary>
            Argument value.
            </summary>
        </member>
        <member name="T:GraphQL.Types.FieldType">
            <summary>
            Represents a field of a graph type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.FieldType.Name">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.FieldType.Description">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.FieldType.DeprecationReason">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.FieldType.DefaultValue">
            <summary>
            Gets or sets the default value of the field. Only applies to fields of input object graph types.
            </summary>
        </member>
        <member name="P:GraphQL.Types.FieldType.Type">
            <summary>
            Gets or sets the graph type of this field.
            </summary>
        </member>
        <member name="P:GraphQL.Types.FieldType.ResolvedType">
            <summary>
            Gets or sets the graph type of this field.
            </summary>
        </member>
        <member name="P:GraphQL.Types.FieldType.Arguments">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.FieldType.Resolver">
            <summary>
            Gets or sets a field resolver for the field. Only applicable to fields of output graph types.
            </summary>
        </member>
        <member name="P:GraphQL.Types.FieldType.StreamResolver">
            <summary>
            Gets or sets a subscription resolver for the field. Only applicable to the root fields of subscription.
            </summary>
        </member>
        <member name="T:GraphQL.Types.IFieldType">
            <summary>
            Represents a field of a graph type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IFieldType.Name">
            <summary>
            Gets or sets the name of the field.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IFieldType.Arguments">
            <summary>
            Gets or sets a list of arguments for the field.
            </summary>
        </member>
        <member name="T:GraphQL.Types.GraphQLTypeReference">
            <summary>
            Represents a placeholder for another GraphQL type, referenced by name. Must be replaced with a
            reference to the actual GraphQL type before using the reference.
            </summary>
        </member>
        <member name="M:GraphQL.Types.GraphQLTypeReference.#ctor(System.String)">
            <summary>
            Initializes a new instance for the specified graph type name.
            </summary>
        </member>
        <member name="P:GraphQL.Types.GraphQLTypeReference.TypeName">
            <summary>
            Returns the GraphQL type name that this reference is a placeholder for.
            </summary>
        </member>
        <member name="P:GraphQL.Types.GraphQLTypeReference.IsTypeOf">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.GraphQLTypeReference.AddResolvedInterface(GraphQL.Types.IInterfaceGraphType)">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.GraphQLTypeReference.Interfaces">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.GraphQLTypeReference.ResolvedInterfaces">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.GraphQLTypeReference.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.GraphQLTypeReference.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.GraphQLClrOutputTypeReference`1">
            <summary>
            Represents a placeholder for another GraphQL Output type, referenced by CLR type. Must be replaced with a
            reference to the actual GraphQL type before using the reference.
            </summary>
        </member>
        <member name="T:GraphQL.Types.GraphQLClrInputTypeReference`1">
            <summary>
            Represents a placeholder for another GraphQL Input type, referenced by CLR type. Must be replaced with a
            reference to the actual GraphQL type before using the reference.
            </summary>
        </member>
        <member name="T:GraphQL.Types.GraphType">
            <summary>
            Represents a graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.GraphType.#ctor">
            <summary>
            Initializes a new instance of the graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.GraphType.Initialize(GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.GraphType.Name">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.GraphType.Description">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.GraphType.DeprecationReason">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.GraphType.ToString">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Types.GraphType.Equals(GraphQL.Types.IGraphType)">
            <summary>
            Determines if the name of the specified graph type is equal to the name of this graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.GraphType.Equals(System.Object)">
            <summary>
            Determines if the graph type is equal to the specified object,
            or if the name of the specified graph type is equal to the name of this graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.GraphType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:GraphQL.Types.INamedType">
            <summary>
            A type that has a name within the GraphQL schema.
            </summary>
        </member>
        <member name="P:GraphQL.Types.INamedType.Name">
            <summary>
            Gets or sets a type name within the GraphQL schema. Type names are case sensitive and
            consist of alphanumeric characters and underscores only. Type names cannot start with
            a digit. For List and NonNull type modifiers returns <see langword="null"/>.
            </summary>
        </member>
        <member name="T:GraphQL.Types.IProvideDescription">
            <summary>
            A schema element that can have description.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IProvideDescription.Description">
            <summary>
            Gets or sets the element description.
            </summary>
        </member>
        <member name="T:GraphQL.Types.IProvideDeprecationReason">
            <summary>
            A schema element that can be deprecated. Now implemented by <see cref="T:GraphQL.Types.IFieldType"/>,
            <see cref="T:GraphQL.Types.QueryArgument"/> and <see cref="T:GraphQL.Types.EnumValueDefinition"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IProvideDeprecationReason.DeprecationReason">
            <summary>
            Gets or sets the reason this element has been deprecated;
            <see langword="null"/> if this element has not been deprecated.
            </summary>
        </member>
        <member name="T:GraphQL.Types.IGraphType">
            <summary>
            Represents a graph type within the GraphQL schema.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IGraphType.Initialize(GraphQL.Types.ISchema)">
            <summary>
            Initializes the graph type.
            </summary>
        </member>
        <member name="T:GraphQL.Types.IHaveDefaultValue">
            <summary>
            Provides a default value for arguments of fields or input object graph types.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IHaveDefaultValue.DefaultValue">
            <summary>
            Returns the default value of this argument or field.
            </summary>
        </member>
        <member name="T:GraphQL.Types.IImplementInterfaces">
            <summary>
            Provides properties for enumerating supported GraphQL interface types for an output graph type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IImplementInterfaces.Interfaces">
            <summary>
            Gets or sets a list of .NET types of supported GraphQL interface types.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IImplementInterfaces.ResolvedInterfaces">
            <summary>
            Gets or sets a list of instances of supported GraphQL interface types.
            </summary>
        </member>
        <member name="T:GraphQL.Types.IProvideMetadata">
            <summary>
            Provides basic capabilities for getting and setting arbitrary meta information.
            This interface is implemented by numerous descendants like <see cref="T:GraphQL.Types.GraphType"/>,
            <see cref="T:GraphQL.Types.FieldType"/>, <see cref="T:GraphQL.Types.Schema"/> or others.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IProvideMetadata.Metadata">
            <summary>
            Provides all meta information as a key-value dictionary.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IProvideMetadata.GetMetadata``1(System.String,``0)">
            <summary>
            Gets a value by a given key. If there is no value for the given key, returns <paramref name="defaultValue"/>.
            </summary>
            <typeparam name="TType">Type of the value.</typeparam>
            <param name="key">String key.</param>
            <param name="defaultValue">It is used if there is no value for the given key.</param>
            <returns>Value of the specified type.</returns>
        </member>
        <member name="M:GraphQL.Types.IProvideMetadata.GetMetadata``1(System.String,System.Func{``0})">
            <summary>
            Gets a value by a given key. If there is no value for the given key, returns value obtained from <paramref name="defaultValueFactory"/>.
            </summary>
            <typeparam name="TType">Type of the value.</typeparam>
            <param name="key">String key.</param>
            <param name="defaultValueFactory">It is used if there is no value for the given key.</param>
            <returns>Value of the specified type.</returns>
        </member>
        <member name="M:GraphQL.Types.IProvideMetadata.HasMetadata(System.String)">
            <summary>
            Indicates whether there is meta information with the given key.
            </summary>
            <param name="key">String key.</param>
            <returns><see langword="true"/> if value for such key exists, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:GraphQL.Types.IProvideResolvedType">
            <summary>
            Provides properties for returning the graph type for the argument or field. Also used for <see cref="T:GraphQL.Types.ListGraphType"/> and <see cref="T:GraphQL.Types.NonNullGraphType"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Types.IProvideResolvedType.ResolvedType">
            <summary>
            Returns the graph type of this argument or field.
            In case of <see cref="T:GraphQL.Types.ListGraphType"/> or <see cref="T:GraphQL.Types.NonNullGraphType"/>, returns an instance of the inner (wrapped) graph type.
            </summary>
        </member>
        <member name="T:GraphQL.Types.ISchema">
            <summary>
            The schema for the GraphQL request. Contains references to the 'query', 'mutation', and 'subscription' base graph types.
            <br/><br/>
            Also allows for adding custom directives, additional graph types, and custom value converters.
            <br/><br/>
            <see cref="T:GraphQL.Types.Schema"/> only requires the <see cref="P:GraphQL.Types.Schema.Query">Query</see> property to be set; although commonly the <see cref="P:GraphQL.Types.Schema.Mutation">Mutation</see> and/or <see cref="P:GraphQL.Types.Schema.Subscription">Subscription</see> properties are also set.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.Features">
            <inheritdoc cref="T:GraphQL.ExperimentalFeatures"/>
        </member>
        <member name="P:GraphQL.Types.ISchema.Initialized">
            <summary>
            Returns <see langword="true"/> once the schema has been initialized.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ISchema.Initialize">
            <summary>
            Initializes the schema. Called by <see cref="T:GraphQL.IDocumentExecuter"/> before validating or executing the request.
            <br/><br/>
            Note that middleware cannot be applied once the schema has been initialized. See <see cref="P:GraphQL.Types.ISchema.FieldMiddleware"/>.
            <br/><br/>
            This method should be safe to be called from multiple threads simultaneously.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.NameConverter">
            <summary>
            Field and argument names are sanitized by the provided <see cref="T:GraphQL.Conversion.INameConverter"/>; defaults to <see cref="T:GraphQL.Conversion.CamelCaseNameConverter"/>
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.FieldMiddleware">
            <summary>
            Note that field middlewares from this property apply only to an uninitialized schema. If the schema is initialized
            then adding additional middleware through the builder does nothing. The schema is initialized (if not yet)
            at the beginning of the first call to <see cref="T:GraphQL.DocumentExecuter"/>.<see cref="M:GraphQL.DocumentExecuter.ExecuteAsync(GraphQL.ExecutionOptions)">ExecuteAsync</see>.
            However, you can also apply middlewares at any time in runtime using SchemaTypes.ApplyMiddleware method.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.Query">
            <summary>
            The 'query' base graph type; required.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.Mutation">
            <summary>
            The 'mutation' base graph type; optional.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.Subscription">
            <summary>
            The 'subscription' base graph type; optional.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.Directives">
            <summary>
            Returns a list of directives supported by the schema.
            <br/><br/>
            Directives are used by the GraphQL runtime as a way of modifying execution
            behavior. Type system creators do not usually create them directly.
            <br/><br/>
            <see cref="T:GraphQL.Types.Schema"/> initializes the list to include <see cref="P:GraphQL.Types.SchemaDirectives.Include"/>, <see cref="P:GraphQL.Types.SchemaDirectives.Skip"/> and <see cref="P:GraphQL.Types.SchemaDirectives.Deprecated"/> by default.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.AllTypes">
            <summary>
            Returns a list of all the graph types utilized by this schema.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.AdditionalTypes">
            <summary>
            A list of additional graph types manually added to the schema by a <see cref="M:GraphQL.Types.ISchema.RegisterType(System.Type)"/> call.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.AdditionalTypeInstances">
            <summary>
            A list of additional graph type instances manually added to the schema by a <see cref="M:GraphQL.Types.ISchema.RegisterType(GraphQL.Types.IGraphType)"/> call.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ISchema.RegisterVisitor(GraphQL.Utilities.ISchemaNodeVisitor)">
            <summary>
            Adds the specified instance of an <see cref="T:GraphQL.Utilities.ISchemaNodeVisitor"/> to the schema.
            When initializing a schema, all registered visitors will be executed on each
            schema element when it is traversed.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ISchema.RegisterVisitor(System.Type)">
            <summary>
            Adds the specified visitor type to the schema. When initializing a schema, all
            registered visitors will be executed on each schema element when it is traversed.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ISchema.RegisterType(GraphQL.Types.IGraphType)">
            <summary>
            Adds the specified specific instance of an <see cref="T:GraphQL.Types.IGraphType"/> to the schema.
            <br/><br/>
            Not typically required as schema initialization will scan the <see cref="P:GraphQL.Types.ISchema.Query"/>, <see cref="P:GraphQL.Types.ISchema.Mutation"/> and <see cref="P:GraphQL.Types.ISchema.Subscription"/> graphs,
            creating instances of <see cref="T:GraphQL.Types.IGraphType"/>s referenced therein as necessary.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ISchema.RegisterType(System.Type)">
            <summary>
            Adds the specified graph type to the schema. Type must implement <see cref="T:GraphQL.Types.IGraphType"/>.
            <br/><br/>
            Not typically required as schema initialization will scan the <see cref="P:GraphQL.Types.ISchema.Query"/>, <see cref="P:GraphQL.Types.ISchema.Mutation"/> and <see cref="P:GraphQL.Types.ISchema.Subscription"/> graphs,
            creating instances of <see cref="T:GraphQL.Types.IGraphType"/>s referenced therein as necessary.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ISchema.RegisterTypeMapping(System.Type,System.Type)">
            <summary>
            Registers type mapping from CLR type to GraphType.
            <br/>
            These mappings are used for type inference when constructing fields using expressions:
            <br/>
            <c>
            Field(x => x.Filters);
            </c>
            </summary>
            <param name="clrType">The CLR property type from which to infer the GraphType.</param>
            <param name="graphType">Inferred GraphType.</param>
        </member>
        <member name="P:GraphQL.Types.ISchema.TypeMappings">
            <summary>
            Returns all registered by <see cref="M:GraphQL.Types.ISchema.RegisterTypeMapping(System.Type,System.Type)"/> type mappings.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.BuiltInTypeMappings">
            <summary>
            Returns all built-in type mappings for scalars.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.Filter">
            <summary>
            Provides the ability to filter the schema upon introspection to hide types, fields, arguments, enum values, directives.
            By default nothing is hidden. Note that this filter in fact does not prohibit the execution of queries that contain
            hidden types/fields. To limit access to the particular fields, you should use some authorization logic.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.Comparer">
            <summary>
            Provides the ability to order the schema elements upon introspection.
            By default all elements are returned as is, no sorting is applied.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.SchemaMetaFieldType">
            <summary>
            Returns a reference to the __schema introspection field available on the query graph type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.TypeMetaFieldType">
            <summary>
            Returns a reference to the __type introspection field available on the query graph type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.ISchema.TypeNameMetaFieldType">
            <summary>
            Returns a reference to the __typename introspection field available on any object, interface, or union graph type.
            </summary>
        </member>
        <member name="T:GraphQL.Types.QueryArgument`1">
            <summary>
            Represents an argument to a field or directive.
            </summary>
            <typeparam name="TType">The graph type of the argument.</typeparam>
        </member>
        <member name="M:GraphQL.Types.QueryArgument`1.#ctor">
            <summary>
            Initializes a new instance of the argument.
            </summary>
        </member>
        <member name="T:GraphQL.Types.QueryArgument">
            <summary>
            Represents an argument to a field or directive.
            </summary>
        </member>
        <member name="M:GraphQL.Types.QueryArgument.#ctor(GraphQL.Types.IGraphType)">
            <summary>
            Initializes a new instance of the argument.
            </summary>
            <param name="type">The graph type of the argument.</param>
        </member>
        <member name="M:GraphQL.Types.QueryArgument.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the argument.
            </summary>
            <param name="type">The graph type of the argument.</param>
        </member>
        <member name="P:GraphQL.Types.QueryArgument.Name">
            <summary>
            Gets or sets the name of the argument.
            </summary>
        </member>
        <member name="P:GraphQL.Types.QueryArgument.Description">
            <summary>
            Gets or sets the description of the argument.
            </summary>
        </member>
        <member name="P:GraphQL.Types.QueryArgument.DeprecationReason">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.QueryArgument.DefaultValue">
            <summary>
            Gets or sets the default value of the argument.
            </summary>
        </member>
        <member name="P:GraphQL.Types.QueryArgument.ResolvedType">
            <summary>
            Returns the graph type of this argument.
            </summary>
        </member>
        <member name="P:GraphQL.Types.QueryArgument.Type">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.Relay.ConnectionType`2">
            <summary>
            A connection graph type for the specified node graph type. The GraphQL type name
            defaults to {NodeType}Connection where {NodeType} is the GraphQL type name of
            the node graph type. This graph type assumes that the source (the result of
            the parent field's resolver) is <see cref="T:GraphQL.Types.Relay.ConnectionType`2"/>
            or <see cref="T:GraphQL.Types.Relay.ConnectionType`1"/> or has the same members.
            </summary>
            <typeparam name="TNodeType">The graph type of the result data set's data type.</typeparam>
            <typeparam name="TEdgeType">The edge graph type of node, typically <see cref="T:GraphQL.Types.Relay.EdgeType`1"/>.</typeparam>
        </member>
        <member name="M:GraphQL.Types.Relay.ConnectionType`2.#ctor">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.Relay.ConnectionType`1">
            <summary>
            A connection graph type for the specified node type. The GraphQL type name
            defaults to {NodeType}Connection where {NodeType} is the GraphQL type name of
            the node graph type. The edge graph type used is <see cref="T:GraphQL.Types.Relay.EdgeType`1"/>.
            </summary>
            <typeparam name="TNodeType">The graph type of the result data set's data type.</typeparam>
        </member>
        <member name="T:GraphQL.Types.Relay.DataObjects.Connection`2">
            <summary>
            Represents a connection result containing nodes and pagination information.
            </summary>
            <typeparam name="TNode">The data type.</typeparam>
            <typeparam name="TEdge">The edge type, typically <see cref="T:GraphQL.Types.Relay.DataObjects.Edge`1"/>.</typeparam>
        </member>
        <member name="P:GraphQL.Types.Relay.DataObjects.Connection`2.TotalCount">
            <summary>
            The total number of records available. Returns <see langword="null"/> if the total number is unknown.
            </summary>
        </member>
        <member name="P:GraphQL.Types.Relay.DataObjects.Connection`2.PageInfo">
            <summary>
            Additional pagination information for this result data set.
            </summary>
        </member>
        <member name="P:GraphQL.Types.Relay.DataObjects.Connection`2.Edges">
            <summary>
            The result data set, stored as a list of edges containing a node (the data) and a cursor (a unique identifier for the data).
            </summary>
        </member>
        <member name="P:GraphQL.Types.Relay.DataObjects.Connection`2.Items">
            <summary>
            The result data set.
            </summary>
        </member>
        <member name="T:GraphQL.Types.Relay.DataObjects.Connection`1">
            <summary>
            Represents a connection result containing nodes and pagination information, with an
            edge type of <see cref="T:GraphQL.Types.Relay.DataObjects.Edge`1"/>.
            </summary>
            <typeparam name="TNode">The data type.</typeparam>
        </member>
        <member name="T:GraphQL.Types.Relay.DataObjects.Edge`1">
            <summary>
            Represents an edge of a connection containing a node (a row of data) and cursor (a unique identifier for the row of data).
            </summary>
            <typeparam name="TNode">The data type.</typeparam>
        </member>
        <member name="P:GraphQL.Types.Relay.DataObjects.Edge`1.Cursor">
            <summary>
            The cursor of this edge's node. A cursor is a string representation of a unique identifier of this node.
            </summary>
        </member>
        <member name="P:GraphQL.Types.Relay.DataObjects.Edge`1.Node">
            <summary>
            The node. A node is a single row of data within the result data set.
            </summary>
        </member>
        <member name="T:GraphQL.Types.Relay.DataObjects.PageInfo">
            <summary>
            Contains pagination information relating to the result data set.
            </summary>
        </member>
        <member name="P:GraphQL.Types.Relay.DataObjects.PageInfo.HasNextPage">
            <summary>
            Indicates if there are additional pages of data that can be returned.
            </summary>
        </member>
        <member name="P:GraphQL.Types.Relay.DataObjects.PageInfo.HasPreviousPage">
            <summary>
            Indicates if there are prior pages of data that can be returned.
            </summary>
        </member>
        <member name="P:GraphQL.Types.Relay.DataObjects.PageInfo.StartCursor">
            <summary>
            The cursor of the first node in the result data set.
            </summary>
        </member>
        <member name="P:GraphQL.Types.Relay.DataObjects.PageInfo.EndCursor">
            <summary>
            The cursor of the last node in the result data set.
            </summary>
        </member>
        <member name="T:GraphQL.Types.Relay.EdgeType`1">
            <summary>
            An edge graph type for the specified node graph type. The GraphQL type name
            defaults to {NodeType}Edge where {NodeType} is the GraphQL type name of
            the node graph type. This graph type assumes that the source (the result of
            the parent field's resolver) is <see cref="T:GraphQL.Types.Relay.EdgeType`1"/>
            or has the same members.
            </summary>
            <typeparam name="TNodeType">The graph type of the result data set's data type.</typeparam>
        </member>
        <member name="M:GraphQL.Types.Relay.EdgeType`1.#ctor">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.Relay.PageInfoType">
            <summary>
            A graph type that represents pagination information relating to the result data set.
            </summary>
        </member>
        <member name="M:GraphQL.Types.Relay.PageInfoType.#ctor">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.BigIntGraphType">
            <summary>
            The BigInt scalar graph type represents a signed integer with any number of digits.
            By default <see cref="T:GraphQL.Types.SchemaTypes"/> maps all <see cref="T:System.Numerics.BigInteger"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.BigIntGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.BigIntGraphType.CanParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.BigIntGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.BooleanGraphType">
            <summary>
            The Boolean scalar graph type represents a boolean value. It is one of the five built-in scalars.
            By default <see cref="T:GraphQL.Types.SchemaTypes"/> maps all <see cref="T:System.Boolean"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.BooleanGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.BooleanGraphType.CanParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.BooleanGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.BooleanGraphType.CanParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.BooleanGraphType.ToAST(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.ByteGraphType">
            <summary>
            The Byte scalar graph type represents an unsigned 8-bit integer value.
            By default <see cref="T:GraphQL.Types.SchemaTypes"/> maps all <see cref="T:System.Byte"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ByteGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ByteGraphType.CanParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ByteGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.DateGraphType">
            <summary>
            The Date scalar graph type represents a year, month and day in accordance with the ISO-8601 standard.
            </summary>
        </member>
        <member name="M:GraphQL.Types.DateGraphType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Types.DateGraphType"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.Types.DateGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.DateGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.DateGraphType.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.DateTimeGraphType">
            <summary>
            The DateTime scalar graph type represents a date and time in accordance with the ISO-8601 standard.
            By default <see cref="T:GraphQL.Types.SchemaTypes"/> maps all <see cref="T:System.DateTime"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.DateTimeGraphType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Types.DateTimeGraphType"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.Types.DateTimeGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.DateTimeGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.DateTimeGraphType.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.DateTimeOffsetGraphType">
            <summary>
            The DateTimeOffset scalar graph type represents a date, time and offset from UTC.
            By default <see cref="T:GraphQL.Types.SchemaTypes"/> maps all <see cref="T:System.DateTimeOffset"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.DateTimeOffsetGraphType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Types.DateTimeOffsetGraphType"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.Types.DateTimeOffsetGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.DateTimeOffsetGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.DateTimeOffsetGraphType.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.DecimalGraphType">
            <summary>
            The Decimal scalar graph type represents a decimal value.
            By default <see cref="T:GraphQL.Types.SchemaTypes"/> maps all <see cref="T:System.Decimal"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.DecimalGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.DecimalGraphType.CanParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.DecimalGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.EnumCaseAttribute">
            <summary>
            Allows to change the case of the enum names for enum marked with that attribute.
            </summary>
        </member>
        <member name="M:GraphQL.Types.EnumCaseAttribute.ChangeEnumCase(System.String)">
            <summary>
            Changes the case of the specified enum name.
            </summary>
        </member>
        <member name="T:GraphQL.Types.ConstantCaseAttribute">
            <summary>
            Returns a constant case version of enum names.
            For example, converts 'StringError' into 'STRING_ERROR'.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ConstantCaseAttribute.ChangeEnumCase(System.String)">
            <inheritdoc />
        </member>
        <member name="T:GraphQL.Types.CamelCaseAttribute">
            <summary>
            Returns a camel case version of enum names.
            </summary>
        </member>
        <member name="M:GraphQL.Types.CamelCaseAttribute.ChangeEnumCase(System.String)">
            <inheritdoc />
        </member>
        <member name="T:GraphQL.Types.PascalCaseAttribute">
            <summary>
            Returns a pascal case version of enum names.
            </summary>
        </member>
        <member name="M:GraphQL.Types.PascalCaseAttribute.ChangeEnumCase(System.String)">
            <inheritdoc />
        </member>
        <member name="T:GraphQL.Types.AsIsCaseAttribute">
            <summary>
            Returns enum names as is.
            </summary>
        </member>
        <member name="M:GraphQL.Types.AsIsCaseAttribute.ChangeEnumCase(System.String)">
            <inheritdoc />
        </member>
        <member name="T:GraphQL.Types.EnumerationGraphType">
            <summary>
            Also called Enums, enumeration types are a special kind of scalar that is restricted to a
            particular set of allowed values. This allows you to:
            1. Validate that any arguments of this type are one of the allowed values.
            2. Communicate through the type system that a field will always be one of a finite set of values.
            </summary>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Types.EnumerationGraphType"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType.Add(System.String,System.Object,System.String,System.String)">
            <summary>
            Adds a value to the allowed set of enumeration values.
            </summary>
            <param name="name">The name of the enumeration member, as exposed through the GraphQL endpoint (e.g. "RED").</param>
            <param name="value">The value of the enumeration member, as referenced by the code (e.g. <see cref="F:System.ConsoleColor.Red"/>).</param>
            <param name="description">A description of the enumeration member.</param>
            <param name="deprecationReason">The reason this enumeration member has been deprecated; <see langword="null"/> if this member has not been deprecated.</param>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType.Add(GraphQL.Types.EnumValueDefinition)">
            <summary>
            Adds a value to the allowed set of enumeration values.
            </summary>
        </member>
        <member name="P:GraphQL.Types.EnumerationGraphType.Values">
            <summary>
            Returns the allowed set of enumeration values.
            </summary>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType.CreateValues">
            <summary>
            Returns a new instance of <see cref="T:GraphQL.Types.EnumValues"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType.CanParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType.CanParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType.ToAST(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.EnumerationGraphType`1">
            <summary>
            Allows you to automatically register the necessary enumeration members for the specified enum.
            Supports <see cref="T:System.ComponentModel.DescriptionAttribute"/> and <see cref="T:System.ObsoleteAttribute"/>.
            Also it can get descriptions for enum fields from the XML comments.
            </summary>
            <typeparam name="TEnum">The enum to take values from.</typeparam>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Types.EnumerationGraphType"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType`1.CreateValues">
            <summary>
            Returns a new instance of <see cref="T:GraphQL.Types.EnumValues`1"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType`1.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType`1.CanParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.EnumerationGraphType`1.ChangeEnumCase(System.String)">
            <summary>
            Changes the case of the specified enum name.
            By default changes it to constant case (uppercase, using underscores to separate words).
            </summary>
        </member>
        <member name="T:GraphQL.Types.EnumValueDefinition">
            <summary>
            A class that represents an enumeration definition.
            </summary>
        </member>
        <member name="M:GraphQL.Types.EnumValueDefinition.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance with the specified name and value.
            </summary>
        </member>
        <member name="P:GraphQL.Types.EnumValueDefinition.Name">
            <summary>
            The name of the enumeration member, as exposed through the GraphQL endpoint (e.g. "RED").
            </summary>
        </member>
        <member name="P:GraphQL.Types.EnumValueDefinition.Description">
            <summary>
            A description of the enumeration member.
            </summary>
        </member>
        <member name="P:GraphQL.Types.EnumValueDefinition.DeprecationReason">
            <summary>
            The reason this enumeration member has been deprecated; <see langword="null"/> if this member has not been deprecated.
            </summary>
        </member>
        <member name="P:GraphQL.Types.EnumValueDefinition.Value">
            <summary>
            The value of the enumeration member, as referenced by the code (e.g. <see cref="F:System.ConsoleColor.Red"/>).
            </summary>
        </member>
        <member name="P:GraphQL.Types.EnumValueDefinition.UnderlyingValue">
            <summary>
            When mapped to a member of an <see cref="T:System.Enum"/>, contains the underlying enumeration value; otherwise contains <see cref="P:GraphQL.Types.EnumValueDefinition.Value" />.
            </summary>
        </member>
        <member name="T:GraphQL.Types.EnumValues">
            <summary>
            A class that represents a set of enumeration definitions.
            </summary>
        </member>
        <member name="P:GraphQL.Types.EnumValues.Count">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.EnumValues.Add(GraphQL.Types.EnumValueDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.EnumValues.FindByName(GraphQLParser.ROM)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.EnumValues.FindByValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.EnumValues.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.EnumValuesBase">
            <summary>
            Base class for collection of enumeration values used be <see cref="T:GraphQL.Types.EnumerationGraphType"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Types.EnumValuesBase.Item(System.String)">
            <summary>
            Returns an enumeration definition for the specified name and <see langword="null"/> if not found.
            </summary>
        </member>
        <member name="P:GraphQL.Types.EnumValuesBase.Count">
            <summary>
            Gets the count of enumeration definitions.
            </summary>
        </member>
        <member name="M:GraphQL.Types.EnumValuesBase.Add(GraphQL.Types.EnumValueDefinition)">
            <summary>
            Adds an enumeration definition to the set.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:GraphQL.Types.EnumValuesBase.FindByName(GraphQLParser.ROM)">
            <summary>
            Returns an enumeration definition for the specified name.
            </summary>
        </member>
        <member name="M:GraphQL.Types.EnumValuesBase.FindByValue(System.Object)">
            <summary>
            Returns an enumeration definition for the specified value.
            </summary>
        </member>
        <member name="M:GraphQL.Types.EnumValuesBase.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.EnumValues`1">
            <summary>
            A class that represents a set of enumeration definitions
            corresponding to the desired .NET enum.
            </summary>
        </member>
        <member name="P:GraphQL.Types.EnumValues`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.EnumValues`1.Add(GraphQL.Types.EnumValueDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.EnumValues`1.FindByName(GraphQLParser.ROM)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.EnumValues`1.FindByValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.EnumValues`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.FloatGraphType">
            <summary>
            The Float scalar graph type represents an IEEE 754 double-precision floating point value. It is one of the five built-in scalars.
            By default <see cref="T:GraphQL.Types.SchemaTypes"/> maps all <see cref="T:System.Double"/> and <see cref="T:System.Single"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.FloatGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.FloatGraphType.CanParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.FloatGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.GuidGraphType">
            <summary>
            The Guid scalar graph type represents a 128-bit globally unique identifier (GUID).
            </summary>
        </member>
        <member name="M:GraphQL.Types.GuidGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.GuidGraphType.CanParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.GuidGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.GuidGraphType.CanParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.GuidGraphType.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.IdGraphType">
            <summary>
            The ID scalar graph type represents a string identifier, not intended to be human-readable. It is one of the five built-in scalars.
            When expected as an input type, any string or integer input value will be accepted as an ID.
            By default <see cref="T:GraphQL.Types.SchemaTypes"/> maps all <see cref="T:System.Guid"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IdGraphType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Types.IdGraphType"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IdGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.IdGraphType.CanParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.IdGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.IdGraphType.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.IntGraphType">
            <summary>
            The Int scalar type represents a signed 32‐bit numeric non‐fractional value. It is one of the five built-in scalars.
            By default <see cref="T:GraphQL.Types.SchemaTypes"/> maps all <see cref="T:System.Int32"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.IntGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.IntGraphType.CanParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.IntGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.LongGraphType">
            <summary>
            The Long scalar graph type represents a signed 64-bit integer value.
            By default <see cref="T:GraphQL.Types.SchemaTypes"/> maps all <see cref="T:System.Int64"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.LongGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.LongGraphType.CanParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.LongGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.SByteGraphType">
            <summary>
            The SByte scalar graph type represents a signed 8-bit integer value.
            By default <see cref="T:GraphQL.Types.SchemaTypes"/> maps all <see cref="T:System.SByte"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.SByteGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.SByteGraphType.CanParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.SByteGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.ScalarGraphType">
            <summary>
            Scalar types represent the leaves of the query - those fields that don't have any sub-fields.
            <br/><br/>
            <see href="https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md">More info</see> about scalars.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ScalarGraphType.Serialize(System.Object)">
            <summary>
            Result (output) coercion. It takes the result of a resolver and converts it into an
            appropriate value for the output result. In other words it transforms a scalar from
            its server-side representation to a representation suitable for the client.
            <br/><br/>
            Since GraphQL specifies no response format, Serialize is not
            responsible for preparing the scalar for transport to the client. It is only responsible
            for generating an object which can eventually be serialized by some transport-focused API.
            <br/><br/>
            This method should handle a value of <see langword="null"/>, but may throw an exception
            if <see langword="null"/> is an invalid internal scalar representation.
            </summary>
            <param name="value">Resolved value (internal scalar representation). May be <see langword="null"/>.</param>
            <returns>
            The returned value of a the result coercion is part of the overall execution result.
            Normally this value is a primitive value like String or Integer to make it easy for
            the serialization layer. For complex types like a Date or Money scalar this involves
            formatting the value. Thus, the returned value for some scalars by their nature may
            already have a string value and it is impossible (or rather difficult) to change that
            value by the serialization layer. Returning <see langword="null"/> is valid.
            </returns>
        </member>
        <member name="M:GraphQL.Types.ScalarGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <summary>
            Literal input coercion. It takes an abstract syntax tree (AST) element from a schema
            definition or query and converts it into an appropriate internal value. In other words
            it transforms a scalar from its client-side representation as an argument to its
            server-side representation. Input coercion may not only return primitive values like
            String but rather complex ones when appropriate.
            <br/><br/>
            This method must handle a value of <see cref="T:GraphQLParser.AST.GraphQLNullValue"/>.
            <br/><br/>
            This method SHOULD be overridden by descendants.
            </summary>
            <param name="value">AST value node. Must not be <see langword="null"/>, but may be <see cref="T:GraphQLParser.AST.GraphQLNullValue"/>.</param>
            <returns>Internal scalar representation. Returning <see langword="null"/> is valid.</returns>
        </member>
        <member name="M:GraphQL.Types.ScalarGraphType.ParseDoubleAccordingSpec``1(``0)">
            <summary>
            Parses a <see cref="T:System.Double"/> according to the GraphQL specification,
            throwing a conversion error if the value is outside the range of a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ScalarGraphType.ParseValue(System.Object)">
            <summary>
            Value input coercion. Argument values can not only provided via GraphQL syntax inside a
            query, but also via variable. It transforms a scalar from its client-side representation
            as a variable to its server-side representation.
            <br/><br/>
            Parsing for arguments and variables are handled separately because while arguments must
            always be expressed in GraphQL query syntax, variable format is transport-specific (usually JSON).
            <br/><br/>
            This method must handle a value of <see langword="null"/>.
            </summary>
            <param name="value">Runtime object from variables. May be <see langword="null"/>.</param>
            <returns>Internal scalar representation. Returning <see langword="null"/> is valid.</returns>
        </member>
        <member name="M:GraphQL.Types.ScalarGraphType.CanParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <summary>
            Checks for literal input coercion possibility. It takes an abstract syntax tree (AST) element from a schema
            definition or query and checks if it can be converted into an appropriate internal value. In other words
            it checks if a scalar can be converted from its client-side representation as an argument to its
            server-side representation.
            <br/><br/>
            This method can be overridden to validate input values without directly getting those values, i.e. without boxing.
            <br/><br/>
            This method must return <see langword="true"/> when passed a <see cref="T:GraphQLParser.AST.GraphQLNullValue"/> node.
            </summary>
            <param name="value">AST value node. Must not be <see langword="null"/>, but may be <see cref="T:GraphQLParser.AST.GraphQLNullValue"/>.</param>
        </member>
        <member name="M:GraphQL.Types.ScalarGraphType.CanParseValue(System.Object)">
            <summary>
            Checks for value input coercion possibility. Argument values can not only provided via GraphQL syntax inside a
            query, but also via variable. It checks if a scalar can be converted from its client-side representation
            as a variable to its server-side representation.
            <br/><br/>
            Parsing for arguments and variables are handled separately because while arguments must
            always be expressed in GraphQL query syntax, variable format is transport-specific (usually JSON).
            <br/><br/>
            This method can be overridden to validate input values without directly getting those values, i.e. without boxing.
            <br/><br/>
            This method must return <see langword="true"/> when passed a <see langword="null"/> value.
            </summary>
            <param name="value">Runtime object from variables. May be <see langword="null"/>.</param>
        </member>
        <member name="M:GraphQL.Types.ScalarGraphType.IsValidDefault(System.Object)">
            <summary>
            Checks that the provided value is a valid default value.
            This method should not throw an exception.
            </summary>
            <param name="value">The value to examine. Must not be <see langword="null"/>, as that indicates the lack of a default value.</param>
        </member>
        <member name="M:GraphQL.Types.ScalarGraphType.ToAST(System.Object)">
            <summary>
            Converts a value to an AST representation. This is necessary for introspection queries
            to return the default values of this scalar type when used on input fields or field and directive arguments.
            This method may throw an exception or return <see langword="null"/> for a failed conversion.
            May return <see cref="T:GraphQLParser.AST.GraphQLNullValue"/>.
            </summary>
            <param name="value">The value to convert. May be <see langword="null"/>.</param>
            <returns>AST representation of the specified value. Returning <see langword="null"/> indicates a failed conversion. Returning <see cref="T:GraphQLParser.AST.GraphQLNullValue"/> is valid.</returns>
        </member>
        <member name="M:GraphQL.Types.ScalarGraphType.ThrowASTConversionError(System.Object)">
            <summary>
            Throws an exception indicating that a value cannot be converted to its AST representation. Typically called by
            <see cref="M:GraphQL.Types.ScalarGraphType.ToAST(System.Object)"/> if the provided object (an internal representation) is not valid for this scalar type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ScalarGraphType.ThrowLiteralConversionError(GraphQLParser.AST.GraphQLValue,System.String)">
            <summary>
            Throws an exception indicating that an AST scalar node cannot be converted to a value. Typically called by
            <see cref="M:GraphQL.Types.ScalarGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)"/> if the node type is invalid or cannot be parsed.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ScalarGraphType.ThrowValueConversionError(System.Object)">
            <summary>
            Throws an exception indicating that an external value (typically provided through a variable) cannot be converted
            to an internal representation. Typically called by <see cref="M:GraphQL.Types.ScalarGraphType.ParseValue(System.Object)"/> if the provided object is invalid
            or cannot be parsed.
            </summary>
            <remarks>
            This is often called for serialization errors, since <see cref="M:GraphQL.Types.ScalarGraphType.Serialize(System.Object)"/> calls <see cref="M:GraphQL.Types.ScalarGraphType.ParseValue(System.Object)"/> by default.
            This also may be called for serialization errors during <see cref="M:GraphQL.Types.ScalarGraphType.ToAST(System.Object)"/>, since <see cref="M:GraphQL.Types.ScalarGraphType.ToAST(System.Object)"/> calls <see cref="M:GraphQL.Types.ScalarGraphType.Serialize(System.Object)"/>
            by default, which by default calls <see cref="M:GraphQL.Types.ScalarGraphType.ParseValue(System.Object)"/>.
            </remarks>
        </member>
        <member name="M:GraphQL.Types.ScalarGraphType.ThrowSerializationError(System.Object)">
            <summary>
            Throws an exception indicating that an internal value (typically returned from a field resolver) cannot be converted
            to its external representation. Typically called by <see cref="M:GraphQL.Types.ScalarGraphType.Serialize(System.Object)"/> if the object is not valid for this
            scalar type.
            </summary>
            <remarks>
            This may be called for serialization errors during <see cref="M:GraphQL.Types.ScalarGraphType.ToAST(System.Object)"/>, since the default implementation
            of <see cref="M:GraphQL.Types.ScalarGraphType.ToAST(System.Object)"/> calls <see cref="M:GraphQL.Types.ScalarGraphType.Serialize(System.Object)"/> to serialize the value before converting the
            result to an AST node.
            </remarks>
        </member>
        <member name="M:GraphQL.Types.ScalarGraphType.Initialize(GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.ShortGraphType">
            <summary>
            The Short scalar graph type represents a signed 16-bit integer value.
            By default <see cref="T:GraphQL.Types.SchemaTypes"/> maps all <see cref="T:System.Int16"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ShortGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ShortGraphType.CanParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ShortGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.StringGraphType">
            <summary>
            The String scalar graph type represents a string value. It is one of the five built-in scalars.
            By default <see cref="T:GraphQL.Types.SchemaTypes"/> maps all <see cref="T:System.String"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.StringGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.StringGraphType.CanParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.StringGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.StringGraphType.CanParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.TimeSpanMillisecondsGraphType">
            <summary>
            The Milliseconds scalar graph type represents a period of time represented as an integer value of the total number of milliseconds.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TimeSpanMillisecondsGraphType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Types.TimeSpanMillisecondsGraphType"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TimeSpanMillisecondsGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.TimeSpanMillisecondsGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.TimeSpanMillisecondsGraphType.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.TimeSpanSecondsGraphType">
            <summary>
            The Seconds scalar graph type represents a period of time represented as an integer value of the total number of seconds.
            By default <see cref="T:GraphQL.Types.SchemaTypes"/> maps all <see cref="T:System.TimeSpan"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TimeSpanSecondsGraphType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Types.TimeSpanSecondsGraphType"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TimeSpanSecondsGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.TimeSpanSecondsGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.TimeSpanSecondsGraphType.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.UIntGraphType">
            <summary>
            The UInt scalar graph type represents an unsigned 32-bit integer value.
            By default <see cref="T:GraphQL.Types.SchemaTypes"/> maps all <see cref="T:System.UInt32"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.UIntGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.UIntGraphType.CanParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.UIntGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.ULongGraphType">
            <summary>
            The ULong scalar graph type represents an unsigned 64-bit integer value.
            By default <see cref="T:GraphQL.Types.SchemaTypes"/> maps all <see cref="T:System.UInt64"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.ULongGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ULongGraphType.CanParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.ULongGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.UriGraphType">
            <summary>
            The Uri scalar graph type represents a string Uri specified in RFC 2396, RFC 2732, RFC 3986, and RFC 3987.
            By default <see cref="T:GraphQL.Types.SchemaTypes"/> maps all <see cref="T:System.Uri"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.UriGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.UriGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.UriGraphType.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.UShortGraphType">
            <summary>
            The UShort scalar graph type represents an unsigned 16-bit integer value.
            By default <see cref="T:GraphQL.Types.SchemaTypes"/> maps all <see cref="T:System.UInt16"/> .NET values to this scalar graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.UShortGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.UShortGraphType.CanParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.UShortGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Types.Schema">
            <inheritdoc cref="T:GraphQL.Types.ISchema"/>
        </member>
        <member name="P:GraphQL.Types.Schema.SchemaDebugView.Comparer">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.SchemaDebugView.Directives">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.SchemaDebugView.AllTypes">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.SchemaDebugView.SchemaMetaFieldType">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.SchemaDebugView.TypeMetaFieldType">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.SchemaDebugView.TypeNameMetaFieldType">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.SchemaDebugView.BuiltInTypeMappings">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.#ctor">
            <summary>
            Create an instance of <see cref="T:GraphQL.Types.Schema"/> with the <see cref="T:GraphQL.DefaultServiceProvider"/>, which
            uses <see cref="M:System.Activator.CreateInstance(System.Type)"/> to create required objects.
            </summary>
        </member>
        <member name="M:GraphQL.Types.Schema.#ctor(System.IServiceProvider)">
            <summary>
            Create an instance of <see cref="T:GraphQL.Types.Schema"/> with a specified <see cref="T:System.IServiceProvider"/>, used
            to create required objects.
            Pulls registered <see cref="T:GraphQL.DI.IConfigureSchema"/> instances from <paramref name="services"/> and
            executes them.
            </summary>
        </member>
        <member name="M:GraphQL.Types.Schema.#ctor(System.IServiceProvider,System.Boolean)">
            <summary>
            Create an instance of <see cref="T:GraphQL.Types.Schema"/> with a specified <see cref="T:System.IServiceProvider"/>, used
            to create required objects.
            If <paramref name="runConfigurations"/> is <see langword="true"/>, pulls registered
            <see cref="T:GraphQL.DI.IConfigureSchema"/> instances from <paramref name="services"/> and executes them.
            </summary>
        </member>
        <member name="M:GraphQL.Types.Schema.#ctor(System.IServiceProvider,System.Collections.Generic.IEnumerable{GraphQL.DI.IConfigureSchema})">
            <summary>
            Create an instance of <see cref="T:GraphQL.Types.Schema"/> with a specified <see cref="T:System.IServiceProvider"/>, used
            to create required objects.
            Executes the specified <see cref="T:GraphQL.DI.IConfigureSchema"/> instances on the schema, if any.
            </summary>
        </member>
        <member name="M:GraphQL.Types.Schema.For(System.String,System.Action{GraphQL.Utilities.SchemaBuilder})">
            <summary>
            Builds schema from the specified string and configuration delegate.
            </summary>
            <param name="typeDefinitions">A textual description of the schema in SDL (Schema Definition Language) format.</param>
            <param name="configure">Optional configuration delegate to setup <see cref="T:GraphQL.Utilities.SchemaBuilder"/>.</param>
            <returns>Created schema.</returns>
        </member>
        <member name="M:GraphQL.Types.Schema.For``1(System.String,System.Action{``0})">
            <summary>
            Builds schema from the specified string and configuration delegate.
            </summary>
            <typeparam name="TSchemaBuilder">The type of <see cref="T:GraphQL.Utilities.SchemaBuilder"/> that will create the schema.</typeparam>
            <param name="typeDefinitions">A textual description of the schema in SDL (Schema Definition Language) format.</param>
            <param name="configure">Optional configuration delegate to setup <see cref="T:GraphQL.Utilities.SchemaBuilder"/>.</param>
            <returns>Created schema.</returns>
        </member>
        <member name="P:GraphQL.Types.Schema.Features">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.NameConverter">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.FieldMiddleware">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.Initialized">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.Initialize">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.Description">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.Query">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.Mutation">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.Subscription">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Gets the service object of the specified type. Schema itself acts as a service provider used to
            create objects, such as graph types, requested by the schema.
            <br/><br/>
            Note that most objects are created during schema initialization, which then have the same lifetime
            as the schema's lifetime.
            <br/><br/>
            Other types created by the service provider may include directive visitors, middlewares, validation
            rules, and name converters, among others.
            <br/><br/>
            Explicit implementation of the <see cref="M:System.IServiceProvider.GetService(System.Type)"/> method makes this method
            less visible to the calling code, which reduces the likelihood of using it as so called ServiceLocator
            anti-pattern. However, in some advanced scenarios this may be necessary.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/> or <see langword="null"/> if there is no service
            object of type serviceType.
            </returns>
        </member>
        <member name="P:GraphQL.Types.Schema.Filter">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.Comparer">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.Directives">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.AllTypes">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.AdditionalTypes">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.AdditionalTypeInstances">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.SchemaMetaFieldType">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.TypeMetaFieldType">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.TypeNameMetaFieldType">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.RegisterVisitor(GraphQL.Utilities.ISchemaNodeVisitor)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.RegisterVisitor(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.RegisterType(GraphQL.Types.IGraphType)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.RegisterType(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.RegisterTypes(System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.RegisterTypeMapping(System.Type,System.Type)">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.TypeMappings">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Types.Schema.BuiltInTypeMappings">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Types.Schema.CreateSchemaTypes">
            <summary>
            Creates and returns a new instance of <see cref="T:GraphQL.Types.SchemaTypes"/> for this schema.
            Does not apply middleware, apply schema visitors, or validate the schema.
            </summary>
            <remarks>
            This executes within a lock in <see cref="M:GraphQL.Types.Schema.Initialize"/>.
            </remarks>
        </member>
        <member name="M:GraphQL.Types.Schema.Validate">
            <summary>
            Validates correctness of the created schema. This method is called only once - during schema initialization.
            </summary>
        </member>
        <member name="M:GraphQL.Types.Schema.CoerceInputTypeDefaultValues">
            <summary>
            Coerces input types' default values when those values are <see cref="T:GraphQLParser.AST.GraphQLValue"/> nodes.
            This is applicable when the <see cref="T:GraphQL.Utilities.SchemaBuilder"/> is used to build the schema.
            </summary>
        </member>
        <member name="T:GraphQL.Types.TypeCollectionContext">
            <summary>
            Provides a mechanism to resolve graph type instances from their .NET types,
            and also to register new graph type instances with their name in the graph type lookup table.
            (See <see cref="T:GraphQL.Types.SchemaTypes"/>.)
            </summary>
        </member>
        <member name="M:GraphQL.Types.TypeCollectionContext.#ctor(System.Func{System.Type,GraphQL.Types.IGraphType},System.Action{System.String,GraphQL.Types.IGraphType,GraphQL.Types.TypeCollectionContext},System.Collections.Generic.IEnumerable{GraphQL.Types.IGraphTypeMappingProvider},GraphQL.Types.ISchema)">
            <summary>
            Initializes a new instance with the specified parameters.
            </summary>
            <param name="resolver">A delegate which returns an instance of a graph type from its .NET type.</param>
            <param name="addType">A delegate which adds a graph type instance to the list of named graph types for the schema.</param>
            <param name="typeMappings">CLR-GraphType type mappings.</param>
            <param name="schema">The schema.</param>
        </member>
        <member name="P:GraphQL.Types.TypeCollectionContext.ResolveType">
            <summary>
            Returns a delegate which returns an instance of a graph type from its .NET type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.TypeCollectionContext.AddType">
            <summary>
            Returns a delegate which adds a graph type instance to the list of named graph types for the schema.
            </summary>
        </member>
        <member name="T:GraphQL.Types.TypeExtensions">
            <summary>
            Provides helper methods for locating a graph type within a schema from the AST type.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TypeExtensions.NamedGraphTypeFromType(GraphQLParser.AST.GraphQLType,GraphQL.Types.ISchema)">
            <summary>
            Searches a schema for a graph type specified by an AST type after unwrapping any
            <see cref="T:GraphQLParser.AST.GraphQLNonNullType"/> or <see cref="T:GraphQLParser.AST.GraphQLListType"/> layers. If the type cannot be
            found, returns <see langword="null"/>.
            </summary>
            <param name="type">The AST type to search for.</param>
            <param name="schema">The schema to search within.</param>
        </member>
        <member name="M:GraphQL.Types.TypeExtensions.GraphTypeFromType(GraphQLParser.AST.GraphQLType,GraphQL.Types.ISchema)">
            <summary>
            Searches a schema for a graph type specified by an AST type. If the type
            cannot be found, returns <see langword="null"/>.
            </summary>
            <param name="type">The AST type to search for.</param>
            <param name="schema">The schema to search within.</param>
        </member>
        <member name="M:GraphQL.Types.TypeExtensions.Name(GraphQLParser.AST.GraphQLType)">
            <summary>
            Returns the name of an AST type after unwrapping any <see cref="T:GraphQLParser.AST.GraphQLNonNullType"/> or <see cref="T:GraphQLParser.AST.GraphQLListType"/> layers.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TypeExtensions.FullName(GraphQLParser.AST.GraphQLType)">
            <summary>
            Returns the formatted GraphQL type name of the AST type,
            using brackets and exclamation points as necessary to
            indicate lists or non-null types, respectively.
            </summary>
        </member>
        <member name="T:GraphQL.Types.TypeInformation">
            <summary>
            Parses a <see cref="T:System.Type"/> along with nullability information into its constituent parts
            in preparation for creating a graph type that represents such a type.
            </summary>
        </member>
        <member name="P:GraphQL.Types.TypeInformation.MemberInfo">
            <summary>
            The member being inspected. This is a <see cref="T:System.Reflection.MethodInfo"/>, <see cref="T:System.Reflection.PropertyInfo"/> or <see cref="T:System.Reflection.FieldInfo"/> instance.
            </summary>
        </member>
        <member name="P:GraphQL.Types.TypeInformation.ParameterInfo">
            <summary>
            The parameter being inspected. Only applicable when <see cref="P:GraphQL.Types.TypeInformation.MemberInfo"/> is a <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Types.TypeInformation.IsInputType">
            <summary>
            Indicates that this is an input type (an argument or input field); false for output types.
            </summary>
        </member>
        <member name="P:GraphQL.Types.TypeInformation.Type">
            <summary>
            The underlying CLR type represented. This might be the underlying type of a <see cref="T:System.Nullable`1"/>
            or the underlying type of a <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Types.TypeInformation.IsNullable">
            <summary>
            Indicates if the underlying type is nullable.
            </summary>
        </member>
        <member name="P:GraphQL.Types.TypeInformation.IsList">
            <summary>
            Indicates that this represents a list of elements.
            </summary>
        </member>
        <member name="P:GraphQL.Types.TypeInformation.ListIsNullable">
            <summary>
            Indicates if the list is nullable.
            </summary>
        </member>
        <member name="P:GraphQL.Types.TypeInformation.GraphType">
            <summary>
            The graph type of the underlying CLR type or <see langword="null"/> to detect the graph type automatically.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TypeInformation.#ctor(System.Reflection.MemberInfo,System.Boolean,System.Type,System.Boolean,System.Boolean,System.Boolean,System.Type)">
            <summary>
            Initializes an instance with the specified properties.
            </summary>
            <param name="memberInfo">The member being inspected.</param>
            <param name="isInputType">Indicates that this is an input type (an argument or input field); false for output types.</param>
            <param name="type">The underlying type.</param>
            <param name="isNullable">Indicates that the underlying type is nullable.</param>
            <param name="isList">Indicates that this member represents a list of elements.</param>
            <param name="listIsNullable">Indicates that the list is nullable.</param>
            <param name="graphType">The graph type of the underlying CLR type; null to be generated by <see cref="M:GraphQL.TypeExtensions.GetGraphTypeFromType(System.Type,System.Boolean,GraphQL.TypeMappingMode)"/>.</param>
        </member>
        <member name="M:GraphQL.Types.TypeInformation.#ctor(System.Reflection.ParameterInfo,System.Type,System.Boolean,System.Boolean,System.Boolean,System.Type)">
            <summary>
            Initializes an instance with the specified properties.
            </summary>
            <param name="parameterInfo">The parameter being inspected.</param>
            <param name="type">The underlying type.</param>
            <param name="isNullable">Indicates that the underlying type is nullable.</param>
            <param name="isList">Indicates that this member represents a list of elements.</param>
            <param name="listIsNullable">Indicates that the list is nullable.</param>
            <param name="graphType">The graph type of the underlying CLR type; null to be generated by <see cref="M:GraphQL.TypeExtensions.GetGraphTypeFromType(System.Type,System.Boolean,GraphQL.TypeMappingMode)"/>.</param>
        </member>
        <member name="M:GraphQL.Types.TypeInformation.#ctor(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Initializes an instance containing type information necessary to select a graph type.
            The instance is populated based on inspecting the type and NRT annotations on the specified property.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TypeInformation.#ctor(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            Initializes an instance containing type information necessary to select a graph type.
            The instance is populated based on inspecting the type and NRT annotations on the specified field.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TypeInformation.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes an instance containing type information necessary to select a graph type.
            The instance is populated based on inspecting the type and NRT annotations on the specified method.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TypeInformation.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            Initializes an instance containing type information necessary to select a graph type.
            The instance is populated based on inspecting the type and NRT annotations on the specified parameter.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TypeInformation.ProcessTypeTree(System.Collections.Generic.List{System.ValueTuple{System.Type,System.Reflection.NullabilityState}},System.Boolean)">
            <summary>
            Populates the <see cref="P:GraphQL.Types.TypeInformation.Type"/>, <see cref="P:GraphQL.Types.TypeInformation.IsNullable"/>, <see cref="P:GraphQL.Types.TypeInformation.IsList"/> and <see cref="P:GraphQL.Types.TypeInformation.ListIsNullable"/>
            properties of this instance from a provided <paramref name="typeTree"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TypeInformation.Interpret(System.Reflection.NullabilityInfo,System.Boolean)">
            <summary>
            Flattens a complex <see cref="T:System.Reflection.NullabilityInfo"/> structure into a list of types and nullability flags.
            <see cref="T:System.Nullable`1"/> structs return their underlying type rather than <see cref="T:System.Nullable`1"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TypeInformation.ApplyAttributes">
            <summary>
            Applies <see cref="T:GraphQL.GraphQLAttribute"/> attributes for the specified member to this instance.
            Also scans the member's owning module and assembly for globally-applied attributes,
            and applies attributes defined within <see cref="P:GraphQL.GlobalSwitches.GlobalAttributes"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TypeInformation.ConstructGraphType">
            <summary>
            Returns a graph type constructed based on the properties set within this instance.
            If <see cref="P:GraphQL.Types.TypeInformation.GraphType"/> is <see langword="null"/>, the graph type is generated via
            <see cref="M:GraphQL.TypeExtensions.GetGraphTypeFromType(System.Type,System.Boolean,GraphQL.TypeMappingMode)"/>.
            The graph type is then wrapped with <see cref="T:GraphQL.Types.NonNullGraphType`1"/> and/or
            <see cref="T:GraphQL.Types.ListGraphType`1"/> as appropriate.
            </summary>
        </member>
        <member name="M:GraphQL.Types.TypeInformation.IsRecognizedListType(System.Type)">
            <summary>
            Determines if the specified type is one of a certain set of recognized generic list types.
            Does not match for <see cref="T:System.String"/> or <see cref="T:System.Collections.Generic.IDictionary`2"/> or other
            types which may also be able to be cast to <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="T:GraphQL.Utilities.ArgumentConfig">
            <summary>
            Provides configuration for specific field argument when building schema via <see cref="T:GraphQL.Utilities.SchemaBuilder"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.ArgumentConfig.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:GraphQL.Utilities.ArgumentConfig"/> with the specified name.
            </summary>
            <param name="name">Field argument name.</param>
        </member>
        <member name="P:GraphQL.Utilities.ArgumentConfig.Name">
            <summary>
            Gets the name of the argument.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.ArgumentConfig.Description">
            <summary>
            Gets or sets the argument description.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.ArgumentConfig.DefaultValue">
            <summary>
            Gets or sets the default value of the field argument.
            </summary>
        </member>
        <member name="T:GraphQL.Utilities.Federation.AnyScalarGraphType">
            <summary>
            Represents a type unknown within this portion of the federated schema.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.Federation.AnyScalarGraphType.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.Federation.AnyScalarGraphType.ParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.Federation.AnyScalarGraphType.ParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.Federation.AnyScalarGraphType.CanParseLiteral(GraphQLParser.AST.GraphQLValue)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.Federation.AnyScalarGraphType.CanParseValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.Federation.AnyScalarGraphType.IsValidDefault(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.Federation.AnyScalarGraphType.ToAST(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Utilities.Federation.FederatedSchema">
            <summary>
            A schema builder for GraphQL federation
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.Federation.FederatedSchema.For(System.String,System.Action{GraphQL.Utilities.Federation.FederatedSchemaBuilder})">
            <summary>
            Builds schema from the specified string and configuration delegate.
            </summary>
            <param name="typeDefinitions">A textual description of the schema in SDL (Schema Definition Language) format.</param>
            <param name="configure">Optional configuration delegate to setup <see cref="T:GraphQL.Utilities.SchemaBuilder"/>.</param>
            <returns>Created schema.</returns>
        </member>
        <member name="M:GraphQL.Utilities.Federation.FederatedSchema.For``1(System.String,System.Action{``0})">
            <summary>
            Builds schema from the specified string and configuration delegate.
            </summary>
            <typeparam name="TFederatedSchemaBuilder">The type of <see cref="T:GraphQL.Utilities.Federation.FederatedSchemaBuilder"/> that will create the schema.</typeparam>
            <param name="typeDefinitions">A textual description of the schema in SDL (Schema Definition Language) format.</param>
            <param name="configure">Optional configuration delegate to setup <see cref="T:GraphQL.Utilities.SchemaBuilder"/>.</param>
            <returns>Created schema.</returns>
        </member>
        <member name="T:GraphQL.Utilities.FieldConfig">
            <summary>
            Provides configuration for specific field of GraphType when building schema via <see cref="T:GraphQL.Utilities.SchemaBuilder"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.FieldConfig.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:GraphQL.Utilities.FieldConfig"/> with the specified name.
            </summary>
            <param name="name">Field argument name.</param>
        </member>
        <member name="P:GraphQL.Utilities.FieldConfig.Name">
            <summary>
            Gets the name of the field.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.FieldConfig.Description">
            <summary>
            Gets or sets the field description.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.FieldConfig.DeprecationReason">
            <summary>
            Gets or sets the reason this field has been deprecated;
            <see langword="null"/> if this element has not been deprecated.
            Only applies to fields of output graph types.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.FieldConfig.DefaultValue">
            <summary>
            Gets or sets the default value of the field. Only applies to fields of input object graph types.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.FieldConfig.Resolver">
            <summary>
            Gets or sets the field resolver.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.FieldConfig.StreamResolver">
            <summary>
            Gets or sets the event stream resolver.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.FieldConfig.ResolverAccessor">
            <summary>
            Gets or sets the <see cref="T:GraphQL.Reflection.IAccessor"/> representing the class member
            to be executed for the field resolver.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.FieldConfig.StreamResolverAccessor">
            <summary>
            Gets or sets the <see cref="T:GraphQL.Reflection.IAccessor"/> representing the class member
            to be executed for the subscription field's event stream resolver.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.FieldConfig.ArgumentFor(System.String)">
            <summary>
            Gets configuration for specific field argument by argument name.
            </summary>
            <param name="argumentName">Name of the field argument.</param>
        </member>
        <member name="T:GraphQL.Utilities.MetadataProvider">
            <summary>
            Default implementation of <see cref="T:GraphQL.Types.IProvideMetadata"/>. This is the base class for numerous
            descendants like <see cref="T:GraphQL.Types.GraphType"/>, <see cref="T:GraphQL.Types.FieldType"/>, <see cref="T:GraphQL.Types.Schema"/> and others.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.MetadataProvider.Metadata">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Utilities.MetadataProvider.GetMetadata``1(System.String,``0)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Utilities.MetadataProvider.GetMetadata``1(System.String,System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Utilities.MetadataProvider.HasMetadata(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Utilities.MetadataProvider.CopyMetadataTo(GraphQL.Types.IProvideMetadata)">
            <summary>
            Copies metadata to the specified target.
            </summary>
            <param name="target">Target for copying metadata.</param>
        </member>
        <member name="T:GraphQL.Utilities.NamedElement">
            <summary>
            Indicates a field, type, argument, enum or directive.
            </summary>
        </member>
        <member name="F:GraphQL.Utilities.NamedElement.Field">
            <summary>
            A field
            </summary>
        </member>
        <member name="F:GraphQL.Utilities.NamedElement.Type">
            <summary>
            A type
            </summary>
        </member>
        <member name="F:GraphQL.Utilities.NamedElement.Argument">
            <summary>
            An argument
            </summary>
        </member>
        <member name="F:GraphQL.Utilities.NamedElement.EnumValue">
            <summary>
            An enum value
            </summary>
        </member>
        <member name="F:GraphQL.Utilities.NamedElement.Directive">
            <summary>
            A directive
            </summary>
        </member>
        <member name="T:GraphQL.Utilities.NameValidator">
            <summary>
            Validator for GraphQL names.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.NameValidator.ValidateName(System.String,GraphQL.Utilities.NamedElement)">
            <summary>
            Validates a specified name.
            </summary>
            <param name="name">GraphQL name.</param>
            <param name="type">Type of element: field, type, argument, enum.</param>
        </member>
        <member name="M:GraphQL.Utilities.NameValidator.ValidateNameOnSchemaInitialize(System.String,GraphQL.Utilities.NamedElement)">
            <summary>
            Validates a specified name during schema initialization.
            </summary>
            <param name="name">GraphQL name.</param>
            <param name="type">Type of element: field, type, argument, enum.</param>
        </member>
        <member name="M:GraphQL.Utilities.NameValidator.ValidateDefault(System.String,GraphQL.Utilities.NamedElement)">
            <summary>
            Validates a specified name according to the GraphQL <see href="https://spec.graphql.org/October2021/#sec-Names">specification</see>.
            </summary>
            <param name="name">GraphQL name.</param>
            <param name="type">Type of element: field, type, argument, enum or directive.</param>
        </member>
        <member name="T:GraphQL.Utilities.SchemaBuilder">
            <summary>
            Builds schema from string.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.SchemaBuilder.ServiceProvider">
            <summary>
            This <see cref="T:System.IServiceProvider"/> is used to create required objects during building schema.
            <br/><br/>
            By default equals to <see cref="T:GraphQL.DefaultServiceProvider"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.SchemaBuilder.IgnoreComments">
            <summary>
            Specifies whether to ignore comments when parsing GraphQL document.
            By default, all comments are ignored.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.SchemaBuilder.IgnoreLocations">
            <summary>
            Specifies whether to ignore token locations when parsing GraphQL document.
            By default, all token locations are taken into account.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.SchemaBuilder.AllowUnknownTypes">
            <summary>
            Allows to successfully build the schema even if types are found that are not registered int <see cref="P:GraphQL.Utilities.SchemaBuilder.Types"/>.
            <br/>
            By default <see langword="true"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.SchemaBuilder.AllowUnknownFields">
            <summary>
            Allows to successfully build the schema even if fields are found that have no resolvers.
            <br/>
            By default <see langword="true"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.SchemaBuilder.Types">
            <inheritdoc cref="T:GraphQL.Utilities.TypeSettings" />
        </member>
        <member name="P:GraphQL.Utilities.SchemaBuilder.RunConfigurations">
            <summary>
            If <see langword="true"/>, pulls registered <see cref="T:GraphQL.DI.IConfigureSchema"/>
            instances from <see cref="P:GraphQL.Utilities.SchemaBuilder.ServiceProvider"/> and executes them.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.SchemaBuilder.Build(System.String)">
            <summary>
            Builds schema from string.
            </summary>
            <param name="typeDefinitions">A textual description of the schema in SDL (Schema Definition Language) format.</param>
            <returns>Created schema.</returns>
        </member>
        <member name="M:GraphQL.Utilities.SchemaBuilder.Validate(GraphQLParser.AST.GraphQLDocument)">
            <summary>
            Validate the specified SDL.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.SchemaBuilder.CreateSchema">
            <summary>
            Returns a new <see cref="T:GraphQL.Types.Schema"/> instance.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.SchemaBuilder.PreConfigure(GraphQL.Types.Schema)">
            <summary>
            Configures the <paramref name="schema"/> prior to adding any types.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.SchemaBuilder.GetType(System.String)">
            <summary>
            Returns the graph type built for the specified graph type name.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.SchemaBuilder.ToObjectGraphType(GraphQLParser.AST.GraphQLObjectTypeDefinition,System.Boolean)">
            <summary>
            Returns an <see cref="T:GraphQL.Types.IObjectGraphType"/> from the specified <see cref="T:GraphQLParser.AST.GraphQLObjectTypeDefinition"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.SchemaBuilder.ToFieldType(System.String,GraphQLParser.AST.GraphQLFieldDefinition)">
            <summary>
            Returns a <see cref="T:GraphQL.Types.FieldType"/> from the specified <see cref="T:GraphQLParser.AST.GraphQLFieldDefinition"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.SchemaBuilder.ToSubscriptionFieldType(System.String,GraphQLParser.AST.GraphQLFieldDefinition)">
            <summary>
            Returns a subscription <see cref="T:GraphQL.Types.FieldType"/> from the specified <see cref="T:GraphQLParser.AST.GraphQLFieldDefinition"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.SchemaBuilder.ToFieldType(System.String,GraphQLParser.AST.GraphQLInputValueDefinition)">
            <summary>
            Returns a <see cref="T:GraphQL.Types.FieldType"/> from the specified <see cref="T:GraphQLParser.AST.GraphQLInputValueDefinition"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.SchemaBuilder.ToInterfaceType(GraphQLParser.AST.GraphQLInterfaceTypeDefinition)">
            <summary>
            Returns a <see cref="T:GraphQL.Types.InterfaceGraphType"/> from the specified <see cref="T:GraphQLParser.AST.GraphQLInterfaceTypeDefinition"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.SchemaBuilder.ToUnionType(GraphQLParser.AST.GraphQLUnionTypeDefinition)">
            <summary>
            Returns a <see cref="T:GraphQL.Types.UnionGraphType"/> from the specified <see cref="T:GraphQLParser.AST.GraphQLUnionTypeDefinition"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.SchemaBuilder.ToInputObjectType(GraphQLParser.AST.GraphQLInputObjectTypeDefinition)">
            <summary>
            Returns an <see cref="T:GraphQL.Types.InputObjectGraphType"/> from the specified <see cref="T:GraphQLParser.AST.GraphQLInputObjectTypeDefinition"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.SchemaBuilder.ToEnumerationType(GraphQLParser.AST.GraphQLEnumTypeDefinition)">
            <summary>
            Returns an <see cref="T:GraphQL.Types.EnumerationGraphType"/> from the specified <see cref="T:GraphQLParser.AST.GraphQLEnumTypeDefinition"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.SchemaBuilder.ToDirective(GraphQLParser.AST.GraphQLDirectiveDefinition)">
            <summary>
            Returns a <see cref="T:GraphQL.Types.Directive"/> from the specified <see cref="T:GraphQLParser.AST.GraphQLDirectiveDefinition"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.SchemaBuilder.ToArgument(GraphQL.Utilities.ArgumentConfig,GraphQLParser.AST.GraphQLInputValueDefinition)">
            <summary>
            Returns a <see cref="T:GraphQL.Types.QueryArgument"/> from the specified <see cref="T:GraphQLParser.AST.GraphQLInputValueDefinition"/>.
            </summary>
        </member>
        <member name="T:GraphQL.Utilities.SchemaPrinter">
            <summary>
            Enables printing schema as SDL (Schema Definition Language) document.
            <br/>
            See <see href="https://spec.graphql.org/October2021/#sec-Type-System"/> for more information.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.SchemaPrinter.#ctor(GraphQL.Types.ISchema,GraphQL.Utilities.SchemaPrinterOptions)">
            <summary>
            Creates printer with the specified options.
            </summary>
            <param name="schema">Schema to print.</param>
            <param name="options">Printer options.</param>
        </member>
        <member name="M:GraphQL.Utilities.SchemaPrinter.Print">
            <summary>
            Prints only 'defined' types and directives.
            <br/>
            See <see cref="M:GraphQL.Utilities.SchemaPrinter.IsDefinedType(System.String)"/> and <see cref="M:GraphQL.Utilities.SchemaPrinter.IsDefinedDirective(System.String)"/> for more information about what 'defined' means.
            </summary>
            <returns>SDL document.</returns>
        </member>
        <member name="M:GraphQL.Utilities.SchemaPrinter.PrintIntrospectionSchema">
            <summary>
            Prints only introspection types.
            </summary>
            <returns>SDL document.</returns>
        </member>
        <member name="M:GraphQL.Utilities.SchemaPrinter.PrintFilteredSchema(System.Func{System.String,System.Boolean},System.Func{System.String,System.Boolean})">
            <summary>
            Prints schema according to the specified filters.
            </summary>
            <param name="directiveFilter">Filter for directives.</param>
            <param name="typeFilter">Filter for types.</param>
            <returns>SDL document.</returns>
        </member>
        <member name="M:GraphQL.Utilities.SchemaPrinter.IsDefinedDirective(System.String)">
            <summary>
            Determines that the specified directive is defined in the schema and should be printed.
            By default, all directives are defined (printed) except for built-in directives.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.SchemaPrinter.IsDefinedType(System.String)">
            <summary>
            Determines that the specified type is defined in the schema and should be printed.
            By default, all types are defined (printed) except for introspection types and built-in scalars.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.SchemaPrinter.IsSchemaOfCommonNames(GraphQL.Types.ISchema)">
             GraphQL schema define root types for each type of operation. These types are
             the same as any other type and can be named in any manner, however there is
             a common naming convention:
            
               schema {
                 query: Query
                 mutation: Mutation
                 subscription: Subscription
               }
            
             When using this naming convention, the schema description can be omitted.
        </member>
        <member name="T:GraphQL.Utilities.SchemaPrinterOptions">
            <summary>
            Options for schema printing when using <see cref="M:GraphQL.Utilities.SchemaPrinter.Print"/>.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.SchemaPrinterOptions.IncludeDescriptions">
            <summary>
            Indicates whether to print a description for types, fields, directives, arguments and other schema elements.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.SchemaPrinterOptions.IncludeDeprecationReasons">
            <summary>
            Indicates whether to print a deprecation reason for fields and enum values.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.SchemaPrinterOptions.OldImplementsSyntax">
            <summary>
            Indicates whether to use ',' instead of '&amp;' when inheriting a type from multiple interfaces.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.SchemaPrinterOptions.PrintDescriptionsAsComments">
            <summary>
            Indicates whether to print descriptions as comments for compatibility with the 2016 GraphQL specification.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.SchemaPrinterOptions.Comparer">
            <summary>
            Provides the ability to order the schema elements upon printing.
            By default all elements are returned as-is; no sorting is applied.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.ServiceProviderExtensions.GetRequiredService``1(System.IServiceProvider)">
            <summary>
            Get service of type <typeparamref name="T"/> from the <see cref="T:System.IServiceProvider"/>.
            This method has exactly the same behavior as ServiceProviderServiceExtensions.GetRequiredService.
            It is added so as not to be dependent on the Microsoft.Extensions.DependencyInjection.Abstractions package.
            https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.serviceproviderserviceextensions.getrequiredservice
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.ServiceProviderExtensions.GetRequiredService(System.IServiceProvider,System.Type)">
            <summary>
            Get service of type <paramref name="serviceType"/> from the <see cref="T:System.IServiceProvider"/>.
            This method has exactly the same behavior as ServiceProviderServiceExtensions.GetRequiredService.
            It is added so as not to be dependent on the Microsoft.Extensions.DependencyInjection.Abstractions package.
            https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.serviceproviderserviceextensions.getrequiredservice
            </summary>
        </member>
        <member name="T:GraphQL.Utilities.StringUtils">
            <summary>
            Provides utility methods for strings.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.StringUtils.QuotedOrList(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Given array of strings [ "A", "B", "C" ] return one string "'A', 'B' or 'C'".
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.StringUtils.SuggestionList(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Given an invalid input string and a list of valid options, returns a filtered
            list of valid options sorted based on their similarity with the input.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.StringUtils.DamerauLevenshteinDistance(System.String,System.String,System.Int32)">
            <summary>
            Computes the Damerau-Levenshtein Distance between two strings, represented as arrays of
            integers, where each integer represents the code point of a character in the source string.
            Includes an optional threshold which can be used to indicate the maximum allowable distance.
            http://stackoverflow.com/a/9454016/279764
            </summary>
            <param name="source">An array of the code points of the first string</param>
            <param name="target">An array of the code points of the second string</param>
            <param name="threshold">Maximum allowable distance</param>
            <returns>Int.MaxValue if threshold exceeded; otherwise the Damerau-Levenshtein distance between the strings</returns>
        </member>
        <member name="T:GraphQL.Utilities.TypeConfig">
            <summary>
            Provides configuration for specific GraphType when building schema via <see cref="T:GraphQL.Utilities.SchemaBuilder"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.TypeConfig.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:GraphQL.Utilities.TypeConfig"/> with the specified name.
            </summary>
            <param name="name">Field argument name.</param>
        </member>
        <member name="P:GraphQL.Utilities.TypeConfig.Type">
            <summary>
            Gets or sets the CLR type of the GraphQL type configured by this instance.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.TypeConfig.Name">
            <summary>
            Gets the name of the GraphType.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.TypeConfig.Description">
            <summary>
            Gets or sets the description of the GraphType.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.TypeConfig.DeprecationReason">
            <summary>
            Gets or sets the reason this GraphType has been deprecated;
            <see langword="null"/> if this element has not been deprecated.
            </summary>
        </member>
        <member name="P:GraphQL.Utilities.TypeConfig.ResolveType">
            <inheritdoc cref="P:GraphQL.Types.IAbstractGraphType.ResolveType"/>
        </member>
        <member name="P:GraphQL.Utilities.TypeConfig.IsTypeOfFunc">
            <inheritdoc cref="P:GraphQL.Types.IObjectGraphType.IsTypeOf"/>
        </member>
        <member name="M:GraphQL.Utilities.TypeConfig.IsTypeOf``1">
            <summary>
            Sets the <see cref="P:GraphQL.Utilities.TypeConfig.IsTypeOfFunc"/> property to a delegate
            that returns <see langword="true"/> when the object is a type
            that can be cast to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.TypeConfig.FieldFor(System.String)">
            <summary>
            Gets configuration for specific field of GraphType by field name.
            </summary>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="T:GraphQL.Utilities.TypeSettings">
            <summary>
            Provides configuration for GraphTypes and their fields and arguments when building schema via <see cref="T:GraphQL.Utilities.SchemaBuilder"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.TypeSettings.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.TypeSettings.For(System.String)">
            <summary>
            Gets configuration for specific GraphType by its name.
            Executes configured configuration delegates for the type cofiguration.
            </summary>
            <param name="typeName">Name of the GraphType.</param>
        </member>
        <member name="M:GraphQL.Utilities.TypeSettings.ForAll(System.Action{GraphQL.Utilities.TypeConfig})">
            <summary>
            Adds a configuration delegate that executes for all types.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.TypeSettings.Include``1">
            <summary>
            Adds a configuration for the specified CLR type.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.TypeSettings.Include``1(System.String)">
            <summary>
            Adds a configuration for the specified CLR type, as the specified graph type name.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.TypeSettings.Include(System.Type)">
            <summary>
            Adds a configuration for the specified CLR type.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.TypeSettings.Include(System.String,System.Type)">
            <summary>
            Adds a configuration for the specified CLR type, as the specified graph type name.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.TypeSettings.Include``2">
            <summary>
            Adds a configuration for the specified CLR source type <typeparamref name="TTypeOfType"/>,
            which executes field resolvers on the specified CLR type <typeparamref name="TType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.TypeSettings.Include``2(System.String)">
            <summary>
            Adds a configuration for the specified CLR source type <typeparamref name="TTypeOfType"/>,
            which executes field resolvers on the specified CLR type <typeparamref name="TType"/>,
            with the specified graph type name.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.TypeSettings.Include(System.Type,System.Type)">
            <summary>
            Adds a configuration for the specified CLR source type <paramref name="typeOfType"/>,
            which executes field resolvers on the specified CLR type <paramref name="type"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.TypeSettings.Include(System.String,System.Type,System.Type)">
            <summary>
            Adds a configuration for the specified CLR source type <paramref name="typeOfType"/>,
            which executes field resolvers on the specified CLR type <paramref name="type"/>,
            with the specified graph type name.
            </summary>
        </member>
        <member name="T:GraphQL.Utilities.AppliedDirectivesValidationVisitor">
            <summary>
            This visitor verifies the correct application of directives to the schema elements.
            </summary>
        </member>
        <member name="F:GraphQL.Utilities.AppliedDirectivesValidationVisitor.Instance">
            <summary>
            Returns a static instance of the <see cref="T:GraphQL.Utilities.AppliedDirectivesValidationVisitor"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.AppliedDirectivesValidationVisitor.VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument,GraphQL.Types.FieldType,GraphQL.Types.IObjectGraphType,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.AppliedDirectivesValidationVisitor.VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument,GraphQL.Types.FieldType,GraphQL.Types.IInterfaceGraphType,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.AppliedDirectivesValidationVisitor.VisitDirectiveArgumentDefinition(GraphQL.Types.QueryArgument,GraphQL.Types.Directive,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.AppliedDirectivesValidationVisitor.VisitEnum(GraphQL.Types.EnumerationGraphType,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.AppliedDirectivesValidationVisitor.VisitDirective(GraphQL.Types.Directive,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.AppliedDirectivesValidationVisitor.VisitEnumValue(GraphQL.Types.EnumValueDefinition,GraphQL.Types.EnumerationGraphType,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.AppliedDirectivesValidationVisitor.VisitObjectFieldDefinition(GraphQL.Types.FieldType,GraphQL.Types.IObjectGraphType,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.AppliedDirectivesValidationVisitor.VisitInterfaceFieldDefinition(GraphQL.Types.FieldType,GraphQL.Types.IInterfaceGraphType,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.AppliedDirectivesValidationVisitor.VisitInputObjectFieldDefinition(GraphQL.Types.FieldType,GraphQL.Types.IInputObjectGraphType,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.AppliedDirectivesValidationVisitor.VisitInputObject(GraphQL.Types.IInputObjectGraphType,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.AppliedDirectivesValidationVisitor.VisitInterface(GraphQL.Types.IInterfaceGraphType,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.AppliedDirectivesValidationVisitor.VisitObject(GraphQL.Types.IObjectGraphType,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.AppliedDirectivesValidationVisitor.VisitScalar(GraphQL.Types.ScalarGraphType,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.AppliedDirectivesValidationVisitor.VisitSchema(GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.AppliedDirectivesValidationVisitor.VisitUnion(GraphQL.Types.UnionGraphType,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.AppliedDirectivesValidationVisitor.ValidateAppliedDirectives(GraphQL.Types.IProvideMetadata,System.Object,System.Object,GraphQL.Types.ISchema,System.Nullable{GraphQLParser.AST.DirectiveLocation})">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Utilities.BaseSchemaNodeVisitor">
            <summary>
            Base class implementing <see cref="T:GraphQL.Utilities.ISchemaNodeVisitor"/>. Does nothing.
            Inherit from it if you need to override only some of the methods.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.BaseSchemaNodeVisitor.VisitSchema(GraphQL.Types.ISchema)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Utilities.BaseSchemaNodeVisitor.VisitDirective(GraphQL.Types.Directive,GraphQL.Types.ISchema)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Utilities.BaseSchemaNodeVisitor.VisitScalar(GraphQL.Types.ScalarGraphType,GraphQL.Types.ISchema)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Utilities.BaseSchemaNodeVisitor.VisitObject(GraphQL.Types.IObjectGraphType,GraphQL.Types.ISchema)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Utilities.BaseSchemaNodeVisitor.VisitInputObject(GraphQL.Types.IInputObjectGraphType,GraphQL.Types.ISchema)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Utilities.BaseSchemaNodeVisitor.VisitObjectFieldDefinition(GraphQL.Types.FieldType,GraphQL.Types.IObjectGraphType,GraphQL.Types.ISchema)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Utilities.BaseSchemaNodeVisitor.VisitInterfaceFieldDefinition(GraphQL.Types.FieldType,GraphQL.Types.IInterfaceGraphType,GraphQL.Types.ISchema)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Utilities.BaseSchemaNodeVisitor.VisitInputObjectFieldDefinition(GraphQL.Types.FieldType,GraphQL.Types.IInputObjectGraphType,GraphQL.Types.ISchema)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Utilities.BaseSchemaNodeVisitor.VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument,GraphQL.Types.FieldType,GraphQL.Types.IObjectGraphType,GraphQL.Types.ISchema)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Utilities.BaseSchemaNodeVisitor.VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument,GraphQL.Types.FieldType,GraphQL.Types.IInterfaceGraphType,GraphQL.Types.ISchema)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Utilities.BaseSchemaNodeVisitor.VisitDirectiveArgumentDefinition(GraphQL.Types.QueryArgument,GraphQL.Types.Directive,GraphQL.Types.ISchema)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Utilities.BaseSchemaNodeVisitor.VisitInterface(GraphQL.Types.IInterfaceGraphType,GraphQL.Types.ISchema)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Utilities.BaseSchemaNodeVisitor.VisitUnion(GraphQL.Types.UnionGraphType,GraphQL.Types.ISchema)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Utilities.BaseSchemaNodeVisitor.VisitEnum(GraphQL.Types.EnumerationGraphType,GraphQL.Types.ISchema)">
            <inheritdoc />
        </member>
        <member name="M:GraphQL.Utilities.BaseSchemaNodeVisitor.VisitEnumValue(GraphQL.Types.EnumValueDefinition,GraphQL.Types.EnumerationGraphType,GraphQL.Types.ISchema)">
            <inheritdoc />
        </member>
        <member name="T:GraphQL.Utilities.ISchemaNodeVisitor">
            <summary>
            Visitor which methods are called when traversing the schema. This happens either explicitly, i.e. when calling
            <see cref="M:GraphQL.SchemaExtensions.Run(GraphQL.Utilities.ISchemaNodeVisitor,GraphQL.Types.ISchema)"/> method directly or during schema creation when
            this method is executed on all schema visitors registered on the schema.
            <br/>
            Also see <see href="https://www.apollographql.com/docs/graphql-tools/schema-directives/#implementing-schema-directives"/>
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.ISchemaNodeVisitor.VisitSchema(GraphQL.Types.ISchema)">
            <summary>
            Visits <see cref="T:GraphQL.Types.Schema"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.ISchemaNodeVisitor.VisitDirective(GraphQL.Types.Directive,GraphQL.Types.ISchema)">
            <summary>
            Visits registered within the schema <see cref="T:GraphQL.Types.Directive"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.ISchemaNodeVisitor.VisitScalar(GraphQL.Types.ScalarGraphType,GraphQL.Types.ISchema)">
            <summary>
            Visits registered within the schema <see cref="T:GraphQL.Types.ScalarGraphType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.ISchemaNodeVisitor.VisitObject(GraphQL.Types.IObjectGraphType,GraphQL.Types.ISchema)">
            <summary>
            Visits registered within the schema object graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.ISchemaNodeVisitor.VisitInputObject(GraphQL.Types.IInputObjectGraphType,GraphQL.Types.ISchema)">
            <summary>
            Visits registered within the schema input object graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.ISchemaNodeVisitor.VisitObjectFieldDefinition(GraphQL.Types.FieldType,GraphQL.Types.IObjectGraphType,GraphQL.Types.ISchema)">
            <summary>
            Visits field of registered within the schema object graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.ISchemaNodeVisitor.VisitInterfaceFieldDefinition(GraphQL.Types.FieldType,GraphQL.Types.IInterfaceGraphType,GraphQL.Types.ISchema)">
            <summary>
            Visits field of registered within the schema interface graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.ISchemaNodeVisitor.VisitInputObjectFieldDefinition(GraphQL.Types.FieldType,GraphQL.Types.IInputObjectGraphType,GraphQL.Types.ISchema)">
            <summary>
            Visits field of registered within the schema input object graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.ISchemaNodeVisitor.VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument,GraphQL.Types.FieldType,GraphQL.Types.IObjectGraphType,GraphQL.Types.ISchema)">
            <summary>
            Visits field argument of registered within the schema object graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.ISchemaNodeVisitor.VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument,GraphQL.Types.FieldType,GraphQL.Types.IInterfaceGraphType,GraphQL.Types.ISchema)">
            <summary>
            Visits field argument of registered within the schema interface graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.ISchemaNodeVisitor.VisitDirectiveArgumentDefinition(GraphQL.Types.QueryArgument,GraphQL.Types.Directive,GraphQL.Types.ISchema)">
            <summary>
            Visits directive argument.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.ISchemaNodeVisitor.VisitInterface(GraphQL.Types.IInterfaceGraphType,GraphQL.Types.ISchema)">
            <summary>
            Visits registered within the schema <see cref="T:GraphQL.Types.IInterfaceGraphType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.ISchemaNodeVisitor.VisitUnion(GraphQL.Types.UnionGraphType,GraphQL.Types.ISchema)">
            <summary>
            Visits registered within the schema <see cref="T:GraphQL.Types.UnionGraphType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.ISchemaNodeVisitor.VisitEnum(GraphQL.Types.EnumerationGraphType,GraphQL.Types.ISchema)">
            <summary>
            Visits registered within the schema <see cref="T:GraphQL.Types.EnumerationGraphType"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.ISchemaNodeVisitor.VisitEnumValue(GraphQL.Types.EnumValueDefinition,GraphQL.Types.EnumerationGraphType,GraphQL.Types.ISchema)">
            <summary>
            Visits value of registered within the schema <see cref="T:GraphQL.Types.EnumerationGraphType"/>.
            </summary>
        </member>
        <member name="T:GraphQL.Utilities.SchemaValidationVisitor">
            <summary>
            Validates the schema as required by the official specification. Also looks for
            default values within arguments and inputs fields which are stored in AST nodes
            and coerces them to their internally represented values.
            </summary>
        </member>
        <member name="F:GraphQL.Utilities.SchemaValidationVisitor.Instance">
            <summary>
            Returns a static instance of the <see cref="T:GraphQL.Utilities.SchemaValidationVisitor"/> class.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.SchemaValidationVisitor.VisitObject(GraphQL.Types.IObjectGraphType,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.SchemaValidationVisitor.VisitObjectFieldDefinition(GraphQL.Types.FieldType,GraphQL.Types.IObjectGraphType,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.SchemaValidationVisitor.VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument,GraphQL.Types.FieldType,GraphQL.Types.IObjectGraphType,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.SchemaValidationVisitor.VisitInterface(GraphQL.Types.IInterfaceGraphType,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.SchemaValidationVisitor.VisitInterfaceFieldDefinition(GraphQL.Types.FieldType,GraphQL.Types.IInterfaceGraphType,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.SchemaValidationVisitor.VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument,GraphQL.Types.FieldType,GraphQL.Types.IInterfaceGraphType,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.SchemaValidationVisitor.VisitInputObject(GraphQL.Types.IInputObjectGraphType,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.SchemaValidationVisitor.VisitInputObjectFieldDefinition(GraphQL.Types.FieldType,GraphQL.Types.IInputObjectGraphType,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.SchemaValidationVisitor.VisitSchema(GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.SchemaValidationVisitor.VisitUnion(GraphQL.Types.UnionGraphType,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.SchemaValidationVisitor.VisitEnum(GraphQL.Types.EnumerationGraphType,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.SchemaValidationVisitor.VisitDirective(GraphQL.Types.Directive,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Utilities.SchemaValidationVisitor.VisitDirectiveArgumentDefinition(GraphQL.Types.QueryArgument,GraphQL.Types.Directive,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Utilities.XmlDocumentationExtensions">
            <summary>
            Provides extension methods for reading XML comments from reflected members.
            </summary>
        </member>
        <member name="M:GraphQL.Utilities.XmlDocumentationExtensions.GetMemberElementName(System.Reflection.MemberInfo)">
            <summary>
            Returns the expected name for a member element in the XML documentation file.
            </summary>
            <param name="member">The reflected member.</param>
            <returns>The name of the member element.</returns>
        </member>
        <member name="M:GraphQL.Utilities.XmlDocumentationExtensions.GetXmlDocumentation(System.Reflection.MemberInfo)">
            <summary>
            Returns the XML documentation (summary tag) for the specified member.
            </summary>
            <param name="member">The reflected member.</param>
            <returns>The contents of the summary tag for the member.</returns>
        </member>
        <member name="M:GraphQL.Utilities.XmlDocumentationExtensions.GetXmlDocumentation(System.Reflection.MemberInfo,System.String)">
            <summary>
            Returns the XML documentation (summary tag) for the specified member.
            </summary>
            <param name="member">The reflected member.</param>
            <param name="pathToXmlFile">Path to the XML documentation file.</param>
            <returns>The contents of the summary tag for the member.</returns>
        </member>
        <member name="M:GraphQL.Utilities.XmlDocumentationExtensions.GetXmlDocumentation(System.Reflection.MemberInfo,System.Xml.Linq.XDocument)">
            <summary>
            Returns the XML documentation (summary tag) for the specified member.
            </summary>
            <param name="member">The reflected member.</param>
            <param name="xml">XML documentation.</param>
            <returns>The contents of the summary tag for the member.</returns>
        </member>
        <member name="M:GraphQL.Utilities.XmlDocumentationExtensions.GetXmlDocumentation(System.Reflection.ParameterInfo)">
            <summary>
            Returns the XML documentation (returns/param tag) for the specified parameter.
            </summary>
            <param name="parameter">The reflected parameter (or return value).</param>
            <returns>The contents of the returns/param tag for the parameter.</returns>
        </member>
        <member name="M:GraphQL.Utilities.XmlDocumentationExtensions.GetXmlDocumentation(System.Reflection.ParameterInfo,System.String)">
            <summary>
            Returns the XML documentation (returns/param tag) for the specified parameter.
            </summary>
            <param name="parameter">The reflected parameter (or return value).</param>
            <param name="pathToXmlFile">Path to the XML documentation file.</param>
            <returns>The contents of the returns/param tag for the parameter.</returns>
        </member>
        <member name="M:GraphQL.Utilities.XmlDocumentationExtensions.GetXmlDocumentation(System.Reflection.ParameterInfo,System.Xml.Linq.XDocument)">
            <summary>
            Returns the XML documentation (returns/param tag) for the specified parameter.
            </summary>
            <param name="parameter">The reflected parameter (or return value).</param>
            <param name="xml">XML documentation.</param>
            <returns>The contents of the returns/param tag for the parameter.</returns>
        </member>
        <member name="T:GraphQL.Validation.BaseVariableVisitor">
            <summary>
            Base class implementing <see cref="T:GraphQL.Validation.IVariableVisitor"/>. Does nothing.
            Inherit from it if you need to override only some of the methods.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.BaseVariableVisitor.VisitFieldAsync(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLVariableDefinition,GraphQL.VariableName,GraphQL.Types.IInputObjectGraphType,GraphQL.Types.FieldType,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Validation.BaseVariableVisitor.VisitListAsync(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLVariableDefinition,GraphQL.VariableName,GraphQL.Types.ListGraphType,System.Object,System.Collections.Generic.IList{System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Validation.BaseVariableVisitor.VisitObjectAsync(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLVariableDefinition,GraphQL.VariableName,GraphQL.Types.IInputObjectGraphType,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Validation.BaseVariableVisitor.VisitScalarAsync(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLVariableDefinition,GraphQL.VariableName,GraphQL.Types.ScalarGraphType,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Validation.BasicVisitor">
            <summary>
            Walks an AST node tree executing <see cref="M:GraphQL.Validation.INodeVisitor.EnterAsync(GraphQLParser.AST.ASTNode,GraphQL.Validation.ValidationContext)"/>
            and <see cref="M:GraphQL.Validation.INodeVisitor.LeaveAsync(GraphQLParser.AST.ASTNode,GraphQL.Validation.ValidationContext)"/> methods for each node.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.BasicVisitor.#ctor(GraphQL.Validation.INodeVisitor[])">
            <summary>
            Returns a new instance configured for the specified list of <see cref="T:GraphQL.Validation.INodeVisitor"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.BasicVisitor.#ctor(System.Collections.Generic.IList{GraphQL.Validation.INodeVisitor})">
            <inheritdoc cref="M:GraphQL.Validation.BasicVisitor.#ctor(GraphQL.Validation.INodeVisitor[])"/>
        </member>
        <member name="M:GraphQL.Validation.BasicVisitor.VisitAsync(GraphQLParser.AST.ASTNode,GraphQL.Validation.BasicVisitor.State)">
            <summary>
            Walks the specified <see cref="T:GraphQLParser.AST.ASTNode"/>, executing <see cref="M:GraphQL.Validation.INodeVisitor.EnterAsync(GraphQLParser.AST.ASTNode,GraphQL.Validation.ValidationContext)"/> and
            <see cref="M:GraphQL.Validation.INodeVisitor.LeaveAsync(GraphQLParser.AST.ASTNode,GraphQL.Validation.ValidationContext)"/> methods for each node.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.BasicVisitor.State">
            <inheritdoc cref="T:GraphQLParser.Visitors.IASTVisitorContext"/>
        </member>
        <member name="M:GraphQL.Validation.BasicVisitor.State.#ctor(GraphQL.Validation.ValidationContext)">
            <summary>
            Initializes a new instance with the specified validation context.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.BasicVisitor.State.Context">
            <summary>
            Returns the validation context.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.BasicVisitor.State.CancellationToken">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Validation.Complexity.AnalysisContext.RecordFieldComplexity(GraphQLParser.AST.ASTNode,System.Double)">
            <summary>
            Takes into account the complexity of the specified node.
            <br/>
            Available nodes:
            <list type="number">
            <item><see cref="T:GraphQLParser.AST.GraphQLField"/></item>
            <item><see cref="T:GraphQLParser.AST.GraphQLFragmentSpread"/></item>
            </list>
            </summary>
            <param name="node">The node for which the complexity is added.</param>
            <param name="impact">Added complexity.</param>
        </member>
        <member name="T:GraphQL.Validation.Complexity.ComplexityAnalayzerMetadataExtensions">
            <summary>
            Provides extension methods for working with field's complexity impact.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Complexity.ComplexityAnalayzerMetadataExtensions.WithComplexityImpact``1(``0,System.Double)">
            <summary>
            Specify field's complexity impact which will be taken into account by <see cref="T:GraphQL.Validation.Complexity.ComplexityAnalyzer"/>.
            </summary>
            <typeparam name="TMetadataProvider">The type of metadata provider. Generics are used here to let compiler infer the returning type to allow methods chaining.</typeparam>
            <param name="provider">Metadata provider which must implement <see cref="T:GraphQL.Types.IProvideMetadata"/> interface.</param>
            <param name="impact">Field's complexity impact.</param>
            <returns>The reference to the specified <paramref name="provider"/>.</returns>
        </member>
        <member name="M:GraphQL.Validation.Complexity.ComplexityAnalayzerMetadataExtensions.GetComplexityImpact(GraphQL.Types.IProvideMetadata)">
            <summary>
            Get field's complexity impact which will be taken into account by <see cref="T:GraphQL.Validation.Complexity.ComplexityAnalyzer"/>.
            </summary>
            <param name="provider">Metadata provider which must implement <see cref="T:GraphQL.Types.IProvideMetadata"/> interface.</param>
            <returns>Field's complexity impact.</returns>
        </member>
        <member name="T:GraphQL.Validation.Complexity.ComplexityAnalyzer">
            <summary>
            The default complexity analyzer.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Complexity.ComplexityAnalyzer.Validate(GraphQLParser.AST.GraphQLDocument,GraphQL.Validation.Complexity.ComplexityConfiguration,GraphQL.Types.ISchema)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Validation.Complexity.ComplexityAnalyzer.Analyzed(GraphQLParser.AST.GraphQLDocument,GraphQL.Validation.Complexity.ComplexityConfiguration,GraphQL.Validation.Complexity.ComplexityResult)">
            <summary>
            Executes after the complexity analysis has completed, before comparing results to the complexity configuration parameters.
            This method is made to be able to access the calculated <see cref="T:GraphQL.Validation.Complexity.ComplexityResult"/> and handle it, for example, for logging.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Complexity.ComplexityAnalyzer.Analyze(GraphQLParser.AST.GraphQLDocument,System.Double,System.Int32,GraphQL.Types.ISchema)">
            <summary>
            Analyzes the complexity of a document.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Complexity.ComplexityConfiguration">
            <summary>
            Configuration parameters for a complexity analyzer.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Complexity.ComplexityConfiguration.MaxDepth">
            <summary>
            Gets or sets the allowed maximum depth of the query.
            <see langword="null"/> if the depth does not need to be limited.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Complexity.ComplexityConfiguration.MaxComplexity">
            <summary>
            Gets or sets the maximum calculated document complexity factor.
            <see langword="null"/> if the complexity does not need to be limited.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Complexity.ComplexityConfiguration.FieldImpact">
            <summary>
            Hardcoded maximum number of objects returned by each field.
            If there is no hardcoded maximum then use the average number of rows/objects returned by each field.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Complexity.ComplexityConfiguration.MaxRecursionCount">
            <summary>
            Max number of times to traverse tree nodes. GraphiQL queries take ~95 iterations, adjust as needed.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Complexity.ComplexityResult">
            <summary>
            Contains the result of a complexity analysis.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Complexity.ComplexityResult.ComplexityMap">
            <summary>
            Returns a dictionary of nodes and their complexity factors.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Complexity.ComplexityResult.Complexity">
            <summary>
            Returns the total calculated document complexity factor over all executed nodes.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Complexity.ComplexityResult.TotalQueryDepth">
            <summary>
            Returns the total query depth.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Complexity.ComplexityVisitor">
            <summary>
            Two-phase complexity visitor. See <see cref="M:GraphQL.Validation.Complexity.ComplexityAnalyzer.Analyze(GraphQLParser.AST.GraphQLDocument,System.Double,System.Int32,GraphQL.Types.ISchema)"/>.
            Phase 1. Calculate complexity of all fragments defined in GraphQL document; <see cref="P:GraphQL.Validation.Complexity.AnalysisContext.FragmentMapAlreadyBuilt"/> is false.
            Phase 2. Calculate complexity of executed operation; <see cref="P:GraphQL.Validation.Complexity.AnalysisContext.FragmentMapAlreadyBuilt"/> is true.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Complexity.FragmentComplexity">
            <summary>
            Class to track complexity of fragment defined in GraphQL document.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Complexity.FragmentComplexity.Depth">
            <summary>
            Depth of fragment.
            <br/><br/>
            Depth 0: fragment frag1 on Type { f }
            <br/>
            Depth 1: fragment frag1 on Type { f { ff } }
            <br/>
            Depth 2: fragment frag1 on Type { f { ff { fff } } }
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Complexity.FragmentComplexity.Complexity">
            <summary>
            Complexity of fragment.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Complexity.IComplexityAnalyzer">
            <summary>
            Analyzes a document to determine if its complexity exceeds a threshold,
            throwing an exception if it is too complex.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Complexity.IComplexityAnalyzer.Validate(GraphQLParser.AST.GraphQLDocument,GraphQL.Validation.Complexity.ComplexityConfiguration,GraphQL.Types.ISchema)">
            <summary>
            Analyzes a document to determine if its complexity exceeds a threshold,
            throwing an exception if it is too complex.
            </summary>
            <param name="document"></param>
            <param name="parameters"></param>
            <param name="schema"></param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if complexity is not within the defined range in parameters.
            </exception>
        </member>
        <member name="T:GraphQL.Validation.IDocumentValidator">
            <summary>
            Validates a document against a set of validation rules and returns a list of the errors found.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.IDocumentValidator.ValidateAsync(GraphQL.Validation.ValidationOptions@)">
            <inheritdoc cref="T:GraphQL.Validation.IDocumentValidator"/>
        </member>
        <member name="T:GraphQL.Validation.DocumentValidator">
            <inheritdoc/>
        </member>
        <member name="F:GraphQL.Validation.DocumentValidator.CoreRules">
            <summary>
            Returns the default set of validation rules.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.DocumentValidator.ValidateAsync(GraphQL.Validation.ValidationOptions@)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Validation.Errors.Custom.ComplexityError">
            <summary>
            Represents a complexity error.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Errors.Custom.ComplexityError.#ctor(System.String)">
            <inheritdoc cref="T:GraphQL.Validation.Errors.Custom.ComplexityError"/>
        </member>
        <member name="T:GraphQL.Validation.Errors.InputFieldsAndArgumentsOfCorrectLengthError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.InputFieldsAndArgumentsOfCorrectLength"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.InputFieldsAndArgumentsOfCorrectLengthError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.ASTNode,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Errors.InputFieldsAndArgumentsOfCorrectLengthError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLVariableDefinition,GraphQL.VariableName,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.ArgumentsOfCorrectTypeError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.ArgumentsOfCorrectType"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.ArgumentsOfCorrectTypeError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLArgument,System.String)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.DefaultValuesOfCorrectTypeError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.DefaultValuesOfCorrectType"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.DefaultValuesOfCorrectTypeError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLVariableDefinition,GraphQL.Types.IGraphType,System.String)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.DirectivesInAllowedLocationsError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.KnownDirectivesInAllowedLocations"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.DirectivesInAllowedLocationsError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLDirective,GraphQLParser.AST.DirectiveLocation)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.FieldsOnCorrectTypeError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.FieldsOnCorrectType"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.FieldsOnCorrectTypeError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLField,GraphQL.Types.IGraphType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.FragmentsOnCompositeTypesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.FragmentsOnCompositeTypes"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.FragmentsOnCompositeTypesError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLInlineFragment)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Errors.FragmentsOnCompositeTypesError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLFragmentDefinition)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.KnownArgumentNamesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.KnownArgumentNames"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.KnownArgumentNamesError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLArgument,GraphQL.Types.FieldType,GraphQL.Types.IGraphType)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Errors.KnownArgumentNamesError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLArgument,GraphQL.Types.Directive)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.KnownDirectivesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.KnownDirectivesInAllowedLocations"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.KnownDirectivesError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLDirective)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.KnownFragmentNamesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.KnownFragmentNames"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.KnownFragmentNamesError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLFragmentSpread,System.String)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.KnownTypeNamesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.KnownTypeNames"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.KnownTypeNamesError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLNamedType,System.String[])">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.LoneAnonymousOperationError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.LoneAnonymousOperation"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.LoneAnonymousOperationError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLOperationDefinition)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.NoFragmentCyclesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.NoFragmentCycles"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.NoFragmentCyclesError.#ctor(GraphQL.Validation.ValidationContext,System.String,System.String[],GraphQLParser.AST.ASTNode[])">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.NoUndefinedVariablesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.NoUndefinedVariables"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.NoUndefinedVariablesError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLOperationDefinition,GraphQLParser.AST.GraphQLVariable)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.NoUnusedFragmentsError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.NoUnusedFragments"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.NoUnusedFragmentsError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLFragmentDefinition)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.NoUnusedVariablesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.NoUnusedVariables"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.NoUnusedVariablesError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLVariableDefinition,GraphQLParser.AST.GraphQLOperationDefinition)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.OverlappingFieldsCanBeMergedError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.OverlappingFieldsCanBeMergedError.#ctor(GraphQL.Validation.ValidationContext,GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Conflict)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.PossibleFragmentSpreadsError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.PossibleFragmentSpreads"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.PossibleFragmentSpreadsError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLInlineFragment,GraphQL.Types.IGraphType,GraphQL.Types.IGraphType)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Errors.PossibleFragmentSpreadsError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLFragmentSpread,GraphQL.Types.IGraphType,GraphQL.Types.IGraphType)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.ProvidedNonNullArgumentsError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.ProvidedNonNullArguments"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.ProvidedNonNullArgumentsError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLField,GraphQL.Types.QueryArgument)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Errors.ProvidedNonNullArgumentsError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLDirective,GraphQL.Types.QueryArgument)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.ScalarLeafsError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.ScalarLeafs"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.ScalarLeafsError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLSelectionSet,GraphQLParser.AST.GraphQLField,GraphQL.Types.IGraphType)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Errors.ScalarLeafsError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLField,GraphQL.Types.IGraphType)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.SingleRootFieldSubscriptionsError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.SingleRootFieldSubscriptions"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.SingleRootFieldSubscriptionsError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLOperationDefinition,GraphQLParser.AST.ASTNode[])">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.UniqueArgumentNamesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.UniqueArgumentNames"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.UniqueArgumentNamesError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLArgument,GraphQLParser.AST.GraphQLArgument)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.UniqueDirectivesPerLocationError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.UniqueDirectivesPerLocation"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.UniqueDirectivesPerLocationError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLDirective)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.UniqueFragmentNamesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.UniqueFragmentNames"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.UniqueFragmentNamesError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLFragmentDefinition,GraphQLParser.AST.GraphQLFragmentDefinition)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.UniqueInputFieldNamesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.UniqueInputFieldNames"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.UniqueInputFieldNamesError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLValue,GraphQLParser.AST.GraphQLObjectField)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.UniqueOperationNamesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.UniqueOperationNames"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.UniqueOperationNamesError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLOperationDefinition)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.UniqueVariableNamesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.UniqueVariableNames"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.UniqueVariableNamesError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLVariableDefinition,GraphQLParser.AST.GraphQLVariableDefinition)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.VariablesAreInputTypesError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.VariablesAreInputTypes"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.VariablesAreInputTypesError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLVariableDefinition,GraphQL.Types.IGraphType)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Errors.VariablesInAllowedPositionError">
            <inheritdoc cref="T:GraphQL.Validation.Rules.VariablesInAllowedPosition"/>
        </member>
        <member name="M:GraphQL.Validation.Errors.VariablesInAllowedPositionError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLVariableDefinition,GraphQL.Types.IGraphType,GraphQL.Validation.VariableUsage)">
            <summary>
            Initializes a new instance with the specified properties.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.InvalidVariableError">
            <summary>
            Represents an error triggered by an invalid variable passed with the associated document.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.InvalidVariableError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLVariableDefinition,GraphQL.VariableName,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Validation.InvalidVariableError"/> class for a specified variable and error message.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.InvalidVariableError.#ctor(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLVariableDefinition,GraphQL.VariableName,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Validation.InvalidVariableError"/> class for a specified variable
            and error message. Loads any exception data from the inner exception into this instance.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.INodeVisitor">
            <summary>
            An interface to handle events raised by a node walker such as <see cref="T:GraphQL.Validation.BasicVisitor"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.INodeVisitor.EnterAsync(GraphQLParser.AST.ASTNode,GraphQL.Validation.ValidationContext)">
            <summary>
            Called when the node walker is entering a node.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.INodeVisitor.LeaveAsync(GraphQLParser.AST.ASTNode,GraphQL.Validation.ValidationContext)">
            <summary>
            Called when the node walker is leaving a node.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.IValidationResult">
            <summary>
            Contains a list of the validation errors found after validating a document against a set of validation rules.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.IValidationResult.IsValid">
            <summary>
            Returns <see langword="true"/> if no errors were found during the validation of a document.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.IValidationResult.Errors">
            <summary>
            Returns a list of the errors found during validation of a document.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.IValidationRule">
            <summary>
            Represents a validation rule for a document.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.IValidationRule.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <summary>
            Prepares and returns a node visitor to be used to validate a document (via a node walker) against this
            validation rule. Validation failures are added then by this visitor to a list stored within <see cref="P:GraphQL.Validation.ValidationContext.Errors"/>.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.IVariableVisitor">
            <summary>
            Visitor which methods are called when parsing the inputs into variables in <see cref="M:GraphQL.Validation.ValidationContext.GetVariableValuesAsync(GraphQL.Validation.IVariableVisitor)"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.IVariableVisitor.VisitScalarAsync(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLVariableDefinition,GraphQL.VariableName,GraphQL.Types.ScalarGraphType,System.Object,System.Object)">
            <summary>
            Visits parsed scalar value.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.IVariableVisitor.VisitListAsync(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLVariableDefinition,GraphQL.VariableName,GraphQL.Types.ListGraphType,System.Object,System.Collections.Generic.IList{System.Object})">
            <summary>
            Visits parsed list value.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.IVariableVisitor.VisitObjectAsync(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLVariableDefinition,GraphQL.VariableName,GraphQL.Types.IInputObjectGraphType,System.Object,System.Object)">
            <summary>
            Visits parsed input object value.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.IVariableVisitor.VisitFieldAsync(GraphQL.Validation.ValidationContext,GraphQLParser.AST.GraphQLVariableDefinition,GraphQL.VariableName,GraphQL.Types.IInputObjectGraphType,GraphQL.Types.FieldType,System.Object,System.Object)">
            <summary>
            Visits parsed value of input object field.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.IVariableVisitorProvider">
            <summary>
            An interface for an object that provides <see cref="T:GraphQL.Validation.IVariableVisitor"/>.
            In most cases, this interface should be implemented by validation rules.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.IVariableVisitorProvider.GetVisitor(GraphQL.Validation.ValidationContext)">
            <summary>
            Gets a visitor for the specified validation context.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.MatchingNodeVisitor`1">
            <summary>
            A node listener which runs configured delegates only when the node entered/left matches the specified node type.
            </summary>
            <typeparam name="TNode">A specified AST node type.</typeparam>
        </member>
        <member name="M:GraphQL.Validation.MatchingNodeVisitor`1.#ctor(System.Action{`0,GraphQL.Validation.ValidationContext},System.Action{`0,GraphQL.Validation.ValidationContext})">
            <summary>
            Returns a new instance configured with the specified enter/leave delegates.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.MatchingNodeVisitor`2">
            <summary>
            A node listener which runs configured delegates only when the node entered/left matches the specified node type.
            </summary>
            <typeparam name="TNode">A specified AST node type.</typeparam>
            <typeparam name="TState">Type of the provided state.</typeparam>
        </member>
        <member name="M:GraphQL.Validation.MatchingNodeVisitor`2.#ctor(`1,System.Action{`0,GraphQL.Validation.ValidationContext,`1},System.Action{`0,GraphQL.Validation.ValidationContext,`1})">
            <summary>
            Returns a new instance configured with the specified enter/leave delegates and arbitrary state.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.NodeVisitors">
            <summary>
            Represents a set of <see cref="T:GraphQL.Validation.INodeVisitor"/> instances that each runs upon entering or leaving a node.
            Be aware that all <see cref="T:GraphQL.Validation.INodeVisitor"/> instances are called in the order supplied; not in reverse order upon leaving a node.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.NodeVisitors.#ctor(GraphQL.Validation.INodeVisitor[])">
            <summary>
            Initializes a new instance with the specified <see cref="T:GraphQL.Validation.INodeVisitor"/>s.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Rules.Custom.ComplexityValidationRule">
            <summary>
            Analyzes a document to determine if its complexity exceeds a threshold.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.Custom.ComplexityValidationRule.#ctor(GraphQL.Validation.Complexity.ComplexityConfiguration)">
            <summary>
            Initializes an instance with the specified complexity configuration.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.Custom.ComplexityValidationRule.#ctor(GraphQL.Validation.Complexity.ComplexityConfiguration,GraphQL.Validation.Complexity.IComplexityAnalyzer)">
            <summary>
            Initializes an instance with the specified complexity configuration and complexity analyzer.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.Custom.ComplexityValidationRule.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Validation.Rules.InputFieldsAndArgumentsOfCorrectLength">
            <summary>
            Validation rule that checks minimum and maximum length of provided values for input fields and
            arguments that marked with <see cref="T:GraphQL.Types.LengthDirective"/> directive. Doesn't check default values.
            <br/><br/>
            This is not a standard validation rule that is not in the official specification. Note that this
            rule will be required to run on cached queries also since it works with request variables, so
            <see cref="P:GraphQL.ExecutionOptions.CachedDocumentValidationRules">ExecutionOptions.CachedDocumentValidationRules</see>
            needs to be set as well (if using caching).
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.InputFieldsAndArgumentsOfCorrectLength.GetVisitor(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
        </member>
        <member name="F:GraphQL.Validation.Rules.InputFieldsAndArgumentsOfCorrectLength.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.InputFieldsAndArgumentsOfCorrectLength.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.InputFieldsAndArgumentsOfCorrectLengthError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.KnownDirectivesInAllowedLocations">
             <summary>
             Known directives:
            
             GraphQL servers define what directives they support and where they support them.
             For each usage of a directive, the directive must be available on that server and
             must be used in a location that the server has declared support for.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.KnownDirectivesInAllowedLocations.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.KnownDirectivesInAllowedLocations.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.KnownDirectivesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.UniqueDirectivesPerLocation">
             <summary>
             Unique directive names per location:
            
             A GraphQL document is only valid if all not repeatable directives
             at a given location are uniquely named.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.UniqueDirectivesPerLocation.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.UniqueDirectivesPerLocation.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.UniqueDirectivesPerLocationError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.UniqueVariableNames">
             <summary>
             Unique variable names:
            
             A GraphQL operation is only valid if all its variables are uniquely named.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.UniqueVariableNames.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.UniqueVariableNames.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.UniqueVariableNamesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.VariablesAreInputTypes">
             <summary>
             Variables are input types:
            
             A GraphQL operation is only valid if all the variables it defines are of
             input types (scalar, enum, or input object).
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.VariablesAreInputTypes.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.VariablesAreInputTypes.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.VariablesAreInputTypesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.NoUndefinedVariables">
             <summary>
             No undefined variables:
            
             A GraphQL operation is only valid if all variables encountered, both directly
             and via fragment spreads, are defined by that operation.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.NoUndefinedVariables.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.NoUndefinedVariables.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.NoUndefinedVariablesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.NoUnusedVariables">
             <summary>
             No unused variables:
            
             A GraphQL operation is only valid if all variables defined by that operation
             are used in that operation or a fragment transitively included by that
             operation.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.NoUnusedVariables.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.NoUnusedVariables.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.NoUnusedVariablesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.VariablesInAllowedPosition">
            <summary>
            Variables passed to field arguments conform to type.
            </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.VariablesInAllowedPosition.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.VariablesInAllowedPosition.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.VariablesInAllowedPositionError"/>
        </member>
        <member name="M:GraphQL.Validation.Rules.VariablesInAllowedPosition.effectiveType(GraphQL.Types.IGraphType,GraphQLParser.AST.GraphQLVariableDefinition)">
            <summary>
            if a variable definition has a default value, it is effectively non-null.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Rules.ArgumentsOfCorrectType">
             <summary>
             Argument values of correct type:
            
             A GraphQL document is only valid if all field argument literal values are
             of the type expected by their position.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.ArgumentsOfCorrectType.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.ArgumentsOfCorrectType.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.ArgumentsOfCorrectTypeError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.DefaultValuesOfCorrectType">
             <summary>
             Variable default values of correct type:
            
             A GraphQL document is only valid if all variable default values are of the
             type expected by their definition.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.DefaultValuesOfCorrectType.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.DefaultValuesOfCorrectType.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.DefaultValuesOfCorrectTypeError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.FieldsOnCorrectType">
             <summary>
             Fields on correct type:
            
             A GraphQL document is only valid if all fields selected are defined by the
             parent type, or are an allowed meta field such as __typename.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.FieldsOnCorrectType.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.FieldsOnCorrectType.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.FieldsOnCorrectTypeError"/>
        </member>
        <member name="M:GraphQL.Validation.Rules.FieldsOnCorrectType.GetSuggestedTypeNames(GraphQL.Types.IGraphType,System.String)">
            <summary>
            Go through all of the implementations of type, as well as the interfaces
            that they implement. If any of those types include the provided field,
            suggest them, sorted by how often the type is referenced,  starting
            with Interfaces.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.FieldsOnCorrectType.GetSuggestedFieldNames(GraphQL.Types.IGraphType,System.String)">
            <summary>
            For the field name provided, determine if there are any similar field names
            that may be the result of a typo.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Rules.FragmentsOnCompositeTypes">
             <summary>
             Fragments on composite type:
            
             Fragments use a type condition to determine if they apply, since fragments
             can only be spread into a composite type (object, interface, or union), the
             type condition must also be a composite type.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.FragmentsOnCompositeTypes.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.FragmentsOnCompositeTypes.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.FragmentsOnCompositeTypesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.KnownArgumentNames">
             <summary>
             Known argument names:
            
             A GraphQL field is only valid if all supplied arguments are defined by
             that field.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.KnownArgumentNames.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.KnownArgumentNames.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.KnownArgumentNamesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.KnownFragmentNames">
             <summary>
             Known fragment names:
            
             A GraphQL document is only valid if all <c>...Fragment</c> fragment spreads refer
             to fragments defined in the same document.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.KnownFragmentNames.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.KnownFragmentNames.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.KnownFragmentNamesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.KnownTypeNames">
             <summary>
             Known type names:
            
             A GraphQL document is only valid if referenced types (specifically
             variable definitions and fragment conditions) are defined by the type schema.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.KnownTypeNames.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.KnownTypeNames.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.KnownTypeNamesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.LoneAnonymousOperation">
             <summary>
             Lone anonymous operation:
            
             A GraphQL document is only valid if when it contains an anonymous operation
             (the query short-hand) that it contains only that one operation definition.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.LoneAnonymousOperation.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.LoneAnonymousOperation.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.LoneAnonymousOperationError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.NoFragmentCycles">
             <summary>
             No fragment cycles:
            
             A GraphQL document is only valid if it does not contain fragment cycles.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.NoFragmentCycles.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.NoFragmentCycles.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.NoFragmentCyclesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.NoUnusedFragments">
             <summary>
             No unused fragments:
            
             A GraphQL document is only valid if all fragment definitions are spread
             within operations, or spread within other fragment spreads within operations.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.NoUnusedFragments.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.NoUnusedFragments.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.NoUnusedFragmentsError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged">
             <summary>
             Overlapping fields are mergable:
            
             If multiple field selections with the same response names are encountered during execution,
             the field and arguments to execute and the resulting value should be unambiguous. Therefore
             any two field selections which might both be encountered for the same object are only valid
             if they are equivalent.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.OverlappingFieldsCanBeMergedError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Conflict">
            <summary>
            Describes a conflict between two fields in a document.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Conflict.Reason">
            <summary>
            Returns the reason for the conflict.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Conflict.FieldsLeft">
            <summary>
            Returns a list of fields that are in conflict.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Conflict.FieldsRight">
            <summary>
            Returns a list of fields that are in conflict.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.ConflictReason">
            <summary>
            Describes the reason for a conflict.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.ConflictReason.Name">
            <summary>
            The name of the field in conflict.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.ConflictReason.Message">
            <summary>
            Returns a message descriptor describing the conflict.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Message">
            <summary>
            A message descriptor describing a conflict.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Message.Msg">
            <summary>
            Returns the conflict message.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Message.Msgs">
            <summary>
            Returns a list of conflict reasons that triggered this conflict.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Rules.PossibleFragmentSpreads">
             <summary>
             Possible fragment spread:
            
             A fragment spread is only valid if the type condition could ever possibly
             be <see langword="true"/>: if there is a non-empty intersection of the
             possible parent types, and possible types which pass the type condition.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.PossibleFragmentSpreads.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.PossibleFragmentSpreads.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.PossibleFragmentSpreadsError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.ProvidedNonNullArguments">
             <summary>
             Provided required arguments:
            
             A field or directive is only valid if all required (non-null) field arguments
             have been provided.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.ProvidedNonNullArguments.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.ProvidedNonNullArguments.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.ProvidedNonNullArgumentsError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.ScalarLeafs">
             <summary>
             Scalar leafs:
            
             A GraphQL document is valid only if all leaf fields (fields without
             sub selections) are of scalar or enum types.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.ScalarLeafs.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.ScalarLeafs.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.ScalarLeafsError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.SingleRootFieldSubscriptions">
            <summary>
            Subscription operations must have exactly one root field.
            </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.SingleRootFieldSubscriptions.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.SingleRootFieldSubscriptions.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.SingleRootFieldSubscriptionsError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.UniqueArgumentNames">
             <summary>
             Unique argument names:
            
             A GraphQL field or directive is only valid if all supplied arguments at a given field
             are uniquely named.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.UniqueArgumentNames.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.UniqueArgumentNames.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.UniqueArgumentNamesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.UniqueFragmentNames">
             <summary>
             Unique fragment names:
            
             A GraphQL document is only valid if all defined fragments have unique names.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.UniqueFragmentNames.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.UniqueFragmentNames.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.UniqueFragmentNamesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.UniqueInputFieldNames">
             <summary>
             Unique input field names:
            
             A GraphQL input object value is only valid if all supplied fields are
             uniquely named.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.UniqueInputFieldNames.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.UniqueInputFieldNames.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.UniqueInputFieldNamesError"/>
        </member>
        <member name="T:GraphQL.Validation.Rules.UniqueOperationNames">
             <summary>
             Unique operation names:
            
             A GraphQL document is only valid if all defined operations have unique names.
             </summary>
        </member>
        <member name="F:GraphQL.Validation.Rules.UniqueOperationNames.Instance">
            <summary>
            Returns a static instance of this validation rule.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Rules.UniqueOperationNames.ValidateAsync(GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
            <exception cref="T:GraphQL.Validation.Errors.UniqueOperationNamesError"/>
        </member>
        <member name="T:GraphQL.Validation.TypeInfo">
            <summary>
            Provides information pertaining to the current state of the AST tree while being walked.
            Thus, validation rules checking is designed for sequential execution.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.TypeInfo.#ctor(GraphQL.Types.ISchema)">
            <summary>
            Initializes a new instance for the specified schema.
            </summary>
            <param name="schema"></param>
        </member>
        <member name="M:GraphQL.Validation.TypeInfo.GetAncestor(System.Int32)">
            <summary>
            Returns an ancestor of the current node.
            </summary>
            <param name="index">Index of the ancestor; 0 for the node itself, 1 for the direct ancestor and so on.</param>
        </member>
        <member name="M:GraphQL.Validation.TypeInfo.GetLastType(System.Int32)">
            <summary>
            Returns the last graph type matched, or <see langword="null"/> if none.
            </summary>
            <param name="index">Index of the type; 0 for the top-most type, 1 for the direct ancestor and so on.</param>
        </member>
        <member name="M:GraphQL.Validation.TypeInfo.GetInputType(System.Int32)">
            <summary>
            Returns the last input graph type matched, or <see langword="null"/> if none.
            </summary>
            <param name="index">Index of the type; 0 for the top-most type, 1 for the direct ancestor and so on.</param>
        </member>
        <member name="M:GraphQL.Validation.TypeInfo.GetParentType(System.Int32)">
            <summary>
            Returns the parent graph type of the current node, or <see langword="null"/> if none.
            </summary>
            <param name="index">Index of the type; 0 for the top-most type, 1 for the direct ancestor and so on.</param>
        </member>
        <member name="M:GraphQL.Validation.TypeInfo.GetFieldDef(System.Int32)">
            <summary>
            Returns the last field type matched, or <see langword="null"/> if none.
            </summary>
            <param name="index">Index of the field; 0 for the top-most field, 1 for the direct ancestor and so on.</param>
        </member>
        <member name="M:GraphQL.Validation.TypeInfo.GetDirective">
            <summary>
            Returns the last directive specified, or <see langword="null"/> if none.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.TypeInfo.GetArgument">
            <summary>
            Returns the last query argument matched, or <see langword="null"/> if none.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.TypeInfo.EnterAsync(GraphQLParser.AST.ASTNode,GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
        </member>
        <member name="M:GraphQL.Validation.TypeInfo.LeaveAsync(GraphQLParser.AST.ASTNode,GraphQL.Validation.ValidationContext)">
            <inheritdoc/>
        </member>
        <member name="F:GraphQL.Validation.TypeInfo.NoFragmentCycles_VisitedFrags">
            <summary>
            Tracks already visited fragments to maintain O(N) and to ensure that cycles
            are not redundantly reported.
            </summary>
        </member>
        <member name="F:GraphQL.Validation.TypeInfo.NoFragmentCycles_SpreadPath">
            <summary>
            Array of AST nodes used to produce meaningful errors
            </summary>
        </member>
        <member name="F:GraphQL.Validation.TypeInfo.NoFragmentCycles_SpreadPathIndexByName">
            <summary>
            Position in the spread path
            </summary>
        </member>
        <member name="T:GraphQL.Validation.ValidationContext">
            <summary>
            Provides contextual information about the validation of the document.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationContext.Operation">
            <summary>
            Returns the operation requested to be executed.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationContext.Schema">
            <inheritdoc cref="P:GraphQL.Execution.IExecutionContext.Schema"/>
        </member>
        <member name="P:GraphQL.Validation.ValidationContext.Document">
            <inheritdoc cref="P:GraphQL.Execution.IExecutionContext.Document"/>
        </member>
        <member name="P:GraphQL.Validation.ValidationContext.TypeInfo">
            <inheritdoc cref="T:GraphQL.Validation.TypeInfo"/>
        </member>
        <member name="P:GraphQL.Validation.ValidationContext.UserContext">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Validation.ValidationContext.Metrics">
            <inheritdoc cref="P:GraphQL.Execution.IExecutionContext.Metrics"/>
        </member>
        <member name="P:GraphQL.Validation.ValidationContext.NonUserContext">
            <summary>
            Dictionary of temporary data used by validation rules.
            TODO: think about internal reusable fields in TypeInfo
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationContext.Errors">
            <summary>
            Returns a list of validation errors for this document.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationContext.HasErrors">
            <summary>
            Returns <see langword="true"/> if there are any validation errors for this document.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationContext.Variables">
            <inheritdoc cref="P:GraphQL.ExecutionOptions.Variables"/>
        </member>
        <member name="P:GraphQL.Validation.ValidationContext.Extensions">
            <inheritdoc cref="P:GraphQL.ExecutionOptions.Extensions"/>
        </member>
        <member name="P:GraphQL.Validation.ValidationContext.RequestServices">
            <inheritdoc cref="P:GraphQL.ExecutionOptions.RequestServices"/>
        </member>
        <member name="P:GraphQL.Validation.ValidationContext.User">
            <inheritdoc cref="P:GraphQL.ExecutionOptions.User"/>
        </member>
        <member name="P:GraphQL.Validation.ValidationContext.CancellationToken">
            <summary>
            <see cref="T:System.Threading.CancellationToken">CancellationToken</see> to cancel validation of request;
            defaults to <see cref="P:System.Threading.CancellationToken.None"/>
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationContext.ReportError(GraphQL.Validation.ValidationError)">
            <summary>
            Adds a validation error to the list of validation errors.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationContext.GetFragmentSpreads(GraphQLParser.AST.GraphQLSelectionSet)">
            <summary>
            Returns a list of fragment spreads within the specified node.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationContext.GetVariableValuesAsync(GraphQL.Validation.IVariableVisitor)">
            <summary>
            Returns all of the variable values defined for the operation from the attached <see cref="P:GraphQL.Validation.ValidationContext.Variables"/> object.
            Only correctly validated variables are returned. If the variable is specified incorrectly, then an instance of
            <see cref="T:GraphQL.Validation.ValidationError"/> is added to the <see cref="P:GraphQL.Validation.ValidationContext.Errors"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationContext.GetVariablesValuesAsync(GraphQL.Validation.IVariableVisitor)">
            <summary>
            Returns all of the variable values defined for the operation from the attached <see cref="P:GraphQL.Validation.ValidationContext.Variables"/> object.
            Only correctly validated variables are returned. If the variable is specified incorrectly, then an instance of
            <see cref="T:GraphQL.Validation.ValidationError"/> is returned within the list of errors.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationContext.GetVariableValueAsync(GraphQL.Types.IGraphType,GraphQLParser.AST.GraphQLVariableDefinition,System.Object,GraphQL.Validation.IVariableVisitor)">
            <summary>
            Return the specified variable's value for the document from the attached <see cref="P:GraphQL.Validation.ValidationContext.Variables"/> object.
            <br/><br/>
            Validates and parses the supplied input object according to the variable's type, and converts the object
            with <see cref="M:GraphQL.Types.ScalarGraphType.ParseValue(System.Object)"/> and
            <see cref="M:GraphQL.Types.IInputObjectGraphType.ParseDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})"/> as applicable.
            <br/><br/>
            Since v3.3, returns null for variables set to null rather than the variable's default value.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationContext.IsValidLiteralValue(GraphQL.Types.IGraphType,GraphQLParser.AST.GraphQLValue)">
            <summary>
            Validates that the specified AST value is valid for the specified scalar or input graph type.
            Graph types that are lists or non-null types are handled appropriately by this method.
            Returns a string representing the errors encountered while validating the value.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationContext.GetRecursivelyReferencedFragments(GraphQLParser.AST.GraphQLOperationDefinition)">
            <summary>
            For a specified operation within a document, returns a list of all fragment definitions in use.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationContext.GetRecursivelyReferencedFragments(System.Collections.Generic.List{GraphQLParser.AST.GraphQLOperationDefinition})">
            <summary>
            For a specified operations within a document, returns a list of all fragment definitions in use.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationContext.GetVariables``1(``0)">
            <summary>
            For a node with a selection set, returns a list of variable references along with what input type each were referenced for.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationContext.GetRecursiveVariables(GraphQLParser.AST.GraphQLOperationDefinition)">
            <summary>
            For a specified operation with a document, returns a list of variable references
            along with what input type each was referenced for.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.ValidationError">
            <summary>
            Represents an error generated while validating the document.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Validation.ValidationError"/> class with a specified error message.
            Sets the <see cref="P:GraphQL.ExecutionError.Code">Code</see> property based on the exception type.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationError.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Validation.ValidationError"/> class with a specified
            error message and inner exception. Sets the <see cref="P:GraphQL.ExecutionError.Code">Code</see>
            property based on the exception type. Loads any exception data from the inner exception
            into this instance.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationError.#ctor(GraphQLParser.ROM,System.String,System.String,GraphQLParser.AST.ASTNode)">
            <inheritdoc cref="M:GraphQL.Validation.ValidationError.#ctor(GraphQLParser.ROM,System.String,System.String,GraphQLParser.AST.ASTNode[])"/>
        </member>
        <member name="M:GraphQL.Validation.ValidationError.#ctor(GraphQLParser.ROM,System.String,System.String,GraphQLParser.AST.ASTNode[])">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Validation.ValidationError"/> class with a specified
            error message, code and number. Sets locations based on the original query and specified
            AST nodes that this error applies to.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationError.#ctor(GraphQLParser.ROM,System.String,System.String,System.Exception,GraphQLParser.AST.ASTNode)">
            <inheritdoc cref="M:GraphQL.Validation.ValidationError.#ctor(GraphQLParser.ROM,System.String,System.String,System.Exception,GraphQLParser.AST.ASTNode[])"/>
        </member>
        <member name="M:GraphQL.Validation.ValidationError.#ctor(GraphQLParser.ROM,System.String,System.String,System.Exception,GraphQLParser.AST.ASTNode[])">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Validation.ValidationError"/> class with a specified
            error message and inner exception. Sets the <see cref="P:GraphQL.ExecutionError.Code">Code</see>
            property based on the exception type. Sets locations based on the original query and
            specified AST nodes that this error applies to. Loads any exception data from the inner
            exception into this instance.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationError.Nodes">
            <summary>
            Returns a list of AST nodes that this error applies to.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationError.Number">
            <summary>
            Gets or sets the rule number of this validation error corresponding
            to the paragraph number from the official specification if any.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.ValidationOptions">
            <summary>
            Options used by <see cref="M:GraphQL.Validation.IDocumentValidator.ValidateAsync(GraphQL.Validation.ValidationOptions@)"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationOptions.#ctor">
            <summary>
            Creates a default instance of <see cref="T:GraphQL.Validation.ValidationOptions"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.ValidationOptions.#ctor(GraphQL.Types.ISchema,GraphQLParser.AST.GraphQLDocument,System.Collections.Generic.IEnumerable{GraphQL.Validation.IValidationRule},System.Collections.Generic.IDictionary{System.String,System.Object},GraphQL.Instrumentation.Metrics,GraphQL.Inputs,GraphQL.Inputs,GraphQLParser.AST.GraphQLOperationDefinition,System.IServiceProvider,System.Security.Claims.ClaimsPrincipal,System.Threading.CancellationToken)">
            <summary>
            Creates a default instance of <see cref="T:GraphQL.Validation.ValidationOptions"/> with the specified options.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationOptions.Schema">
            <summary>
            Gets or sets the <see cref="T:GraphQL.Types.ISchema"/> to validate the <see cref="T:GraphQLParser.AST.GraphQLDocument"/> against.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationOptions.Document">
            <summary>
            Gets or sets the <see cref="T:GraphQLParser.AST.GraphQLDocument"/> to validate.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationOptions.Rules">
            <summary>
            Gets or sets a list of rules to use to validate the <see cref="T:GraphQLParser.AST.GraphQLDocument"/>.
            If no rules are specified, <see cref="F:GraphQL.Validation.DocumentValidator.CoreRules"/> are used.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationOptions.UserContext">
            <summary>
            Gets or sets the user context, which can be used by validation rules
            during document validation.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationOptions.Metrics">
            <summary>
            Gets or sets object for performance metrics, which can be used by
            validation rules during document validation.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationOptions.Variables">
            <summary>
            Gets or sets the input variables.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationOptions.Extensions">
            <summary>
            Gets or sets the input extensions.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationOptions.Operation">
            <summary>
            Executed operation.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.ValidationOptions.RequestServices">
            <inheritdoc cref="P:GraphQL.ExecutionOptions.RequestServices"/>
        </member>
        <member name="P:GraphQL.Validation.ValidationOptions.User">
            <inheritdoc cref="P:GraphQL.ExecutionOptions.User"/>
        </member>
        <member name="P:GraphQL.Validation.ValidationOptions.CancellationToken">
            <summary>
            <see cref="T:System.Threading.CancellationToken">CancellationToken</see> to cancel validation of request;
            defaults to <see cref="P:System.Threading.CancellationToken.None"/>
            </summary>
        </member>
        <member name="T:GraphQL.Validation.ValidationResult">
            <inheritdoc cref="T:GraphQL.Validation.IValidationResult"/>
        </member>
        <member name="M:GraphQL.Validation.ValidationResult.#ctor(System.Collections.Generic.IEnumerable{GraphQL.Validation.ValidationError})">
            <summary>
            Initializes a new instance with the specified set of validation errors.
            </summary>
            <param name="errors">Set of validation errors.</param>
        </member>
        <member name="M:GraphQL.Validation.ValidationResult.#ctor(GraphQL.Validation.ValidationError[])">
            <summary>
            Initializes a new instance with the specified set of validation errors.
            </summary>
            <param name="errors">Set of validation errors.</param>
        </member>
        <member name="P:GraphQL.Validation.ValidationResult.IsValid">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Validation.ValidationResult.Errors">
            <inheritdoc/>
        </member>
        <member name="T:GraphQL.Validation.SuccessfullyValidatedResult">
            <summary>
            A validation result that indicates no errors were found during validation of the document.
            </summary>
        </member>
        <member name="F:GraphQL.Validation.SuccessfullyValidatedResult.Instance">
            <summary>
            Returns a static instance of this class.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.SuccessfullyValidatedResult.IsValid">
            <summary>
            Returns <see langword="true"/> indicating that the document was successfully validated.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.SuccessfullyValidatedResult.Errors">
            <summary>
            Returns an empty list of execution errors.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Variable">
            <summary>
            Represents a variable name and value tuple that has been gathered from the document and attached <see cref="T:GraphQL.Inputs"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Variable.#ctor(System.String)">
            <summary>
            Initializes a new instance with the specified name.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Variable.Name">
            <summary>
            Gets or sets the name of the variable.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Variable.Value">
            <summary>
            Gets or sets the value of the variable.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Variable.ValueSpecified">
            <summary>
            Indicates if the variable value has been set.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.Variable.IsDefault">
            <summary>
            Indicates if the variable's value is the variable's configured default value.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.Variables">
            <summary>
            Contains a list of variables (name &amp; value tuples) that have been gathered from the document and attached <see cref="T:GraphQL.Inputs"/>.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Variables.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Variables.Add(GraphQL.Validation.Variable)">
            <summary>
            Adds a variable to the list.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Variables.ValueFor(System.String,System.Object)">
            <summary>
            Returns the first variable with a matching name, or <paramref name="defaultValue"/> if none are found.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Variables.ValueFor(GraphQLParser.ROM,GraphQL.Execution.ArgumentValue@)">
            <summary>
            Gets the first variable with a matching name. Returns <see langword="true"/> if a match is found.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.Variables.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:GraphQL.Validation.Variables.None">
            <summary>
            Returns a static instance that holds no variables.
            </summary>
        </member>
        <member name="T:GraphQL.Validation.VariableUsage">
            <summary>
            Represents a variable reference node and the graph type it is referenced to be used for.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.VariableUsage.Node">
            <summary>
            Returns a variable reference node.
            </summary>
        </member>
        <member name="P:GraphQL.Validation.VariableUsage.Type">
            <summary>
            Returns a graph type.
            </summary>
        </member>
        <member name="M:GraphQL.Validation.VariableUsage.#ctor(GraphQLParser.AST.GraphQLVariable,GraphQL.Types.IGraphType)">
            <summary>
            Initializes a new instance with the specified parameters.
            </summary>
            <param name="node">A variable reference node.</param>
            <param name="type">A graph type.</param>
        </member>
        <member name="T:GraphQL.VariableName">
            <summary>
            Represents the full path to a property of a variable, typically for
            use in error messages, such as <c>myVariable[1].name</c>.
            Use the <see cref="M:GraphQL.VariableName.ToString"/> method to return the serialized name
            of the variable property.
            </summary>
        </member>
        <member name="M:GraphQL.VariableName.#ctor(GraphQL.VariableName,System.Int32)">
            <summary>
            Initialize an instance with the specified parent variable name and specified child index.
            </summary>
        </member>
        <member name="M:GraphQL.VariableName.#ctor(GraphQL.VariableName,System.String)">
            <summary>
            Initialize an instance with the specified parent variable name and specified child property.
            </summary>
        </member>
        <member name="P:GraphQL.VariableName.Name">
            <summary>
            Gets or sets the variable name.
            Does not include the index or child property name.
            </summary>
        </member>
        <member name="P:GraphQL.VariableName.Index">
            <summary>
            Gets or sets the index of the variable.
            </summary>
        </member>
        <member name="P:GraphQL.VariableName.ChildName">
            <summary>
            Gets or sets the child property name of the variable.
            </summary>
        </member>
        <member name="M:GraphQL.VariableName.ToString">
            <summary>
            Returns the full path of the variable property represented by this instance.
            </summary>
        </member>
        <member name="M:GraphQL.VariableName.op_Implicit(System.String)~GraphQL.VariableName">
            <summary>
            Returns a new instance with the specified name.
            </summary>
        </member>
        <member name="M:GraphQL.VariableName.op_Implicit(GraphQL.VariableName)~System.String">
            <inheritdoc cref="M:GraphQL.VariableName.ToString"/>
        </member>
    </members>
</doc>
